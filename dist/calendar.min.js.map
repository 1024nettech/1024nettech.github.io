{"version":3,"sources":["calendar.js"],"names":["this","parent","options","_classCallCheck","Calendar","viewMode","time","onMonthPick","MONTHS","isLunarCalendar","DATES","isFestivalsDisplay","onYearPick","elements","wrap","header","title","switcher","prev","next","body","week","dates","months","today","minYear","data","maxYear","year","month","date","picked","day","text","fullText","_createClass","startDate","key","pickMode","monthText","defaults","set","setYear","getMonth","getDate","_setYears","endDate","dateRanges","push","_createElements","length","value","_renderTitle","$header","$switcher","appendChild","$fragment","document","createDocumentFragment","$body","_renderDates","$footer","$wrap","_renderYears","years","selectorMonth","selectorYear","selectorToday","Delegate","selectorTitle","selectorPrev","selectorNext","on","selectorDate","CLICK","_nextClick","_dateClick","getEls","off","_titleClick","STYLES","footer","start","mode","arguments","undefined","$months","DOM","removeClass","$week","addClass","CLS_HIDDEN","$years","$dates","startYear","getYears","getYear","toString","updateView","get","callback","$date","getAttribute","PICKED","$picked","pickedDates","hasClass","CLS_PICKED","isFunction","Utils","_removePicked","getPicked","setDate","sort","_renderDateRanges","ranges","$month","setMonth","update","$year","getToday","HIDDEN","CLS_ICON_NEXT","CLS_BODY","BODY","CLS_WEEK","WEEK","CLS_DATES","CLS_MONTHS","TITLE","YEARS","CLS_WRAP","CLS_HEADER","CLS_TITLE","NEXT","CLS_SWITCHER","CLS_PREV","PREV","CLS_ICON_PREV","CLS_NEXT","createElement","weekClassName","FOOTER_DATE","datesClassName","monthsClassName","yearsClassName","SPACE","TEXT","guid","getElementById","className","id","CLS_TEXT","CLS_TIME","$title","innerHTML","DAYS","WEEKEND","fragment","i","CLS_DAY","CLS_WEEKEND","$day","firstDateDay","prevYear","isLeapYear","prevDays","nextYear","nextMonth","nextDays","isPrev","prevMonth","end","isNext","_getDatesFragment","CLS_DATE","CLS_DATE_PREV","CLS_DATE_NEXT","CLS_CURRENT","CLS_PICKED_RANGE","CLS_LUNAR_TEXT","DATE_NEXT","CLS_FESTIVAL_TEXT","CURRENT","isToday","getDay","fullDate","$children","_loop","lunarText","solarTerm","festival","lunar","data-date","isCurrent","isPickedDate","isDatesEqual","pickedDate","_this","getRanges","$pickedDates","forEach","querySelector","setAttribute","CLS_MONTH","MONTH","isPicked","prevEndYear","yearsStart","_getYearsFragment","prevStartYear","nextStartYear","yearsEnd","YEAR_PREV","CLS_YEAR","CLS_YEAR_PREV","CLS_DISABLED","renderTime","Date","getHours","hours","$today","getSeconds","minutes","seconds","getMinutes","timer","clearTimeout","setTimeout","$time","console","evt","$el","delegateTarget","log","val","getLunarDate","numbers","lastNumber","split","startMonth","endYear","endMonth","days","parseInt","begins","endTime","beginNumber","endNumber","beginTime","timeNumber","setUTCFullYear","begin","getTime","ends","fullYear","fullMonth","getFullYear","total","toLunarYear","lunarDate","lunarMonth","toLunarDate","Math","floor","zodiac","lunarZodiac","toLunarMonth","lunarYear","diff","HEAVENLY_STEMS","EARTHLY_BRANCHES","FESTIVALS","WRAP","HEADER","SWITCHER","ICON_PREV","ICON_NEXT","DAY","DATE","YEAR","FOOTER","TODAY","TIME","LUNAR_TEXT","PICKED_RANGE","DISABLED","isNumber","isArray","Array","isElement","isEmpty","uuid","0214","prefix","0308","trim","0401","str","0501","0504","element","tagName","DATE_PREV","el","MONTH_NEXT","FOOTER_TIME","allClass","isString","o","prototype","Object","nodeName","apply","nodeType","children","attributes","attr","childNode","wrapper","child","stripTags","createTextNode","toLowerCase","type","context","capture","call","e","getDelegateTarget","target","selector","addEventListener","removeEventListener","_delegateWrapper","stopPropagation","preventDefault","event","window","replace"],"mappings":"8HAAAA,KAAA,oMAWwB,WAOlBC,SAAAA,EAFgBC,sGAGhBC,CAAAH,KAAAI,GAMAC,KAAAA,WATgB,CAWhBJ,OAAA,GAVAK,KAAA,GAKAD,SAAA,EAMAE,SAAAA,SAIAC,iBAhBgB,EAmBhBC,oBAAAA,EACAC,WApBgB,KAqBhBH,YAAA,KACAI,WAAAA,KAGAC,YAAAA,uBAIAF,MAAAG,GAEAZ,OAAA,IAmBAD,KAAAa,SAAA,CAlDFZ,OAAA,KA0CEa,KAAA,KAEAC,OAAA,KAEAC,MAAA,KAEAC,SAAA,KAEAC,KAAA,KAEAC,KAAA,KAEAC,KAAA,KAEAC,KAAA,KAEAC,MAAA,KAIAC,OAAA,4BAIAC,MAAA,KAEAC,KAAAA,MAmBAzB,KAAA0B,KAAA,CA9CFD,QAAA,EAsCEE,QAAA,EAEAC,KAAA,EAEAC,MAAA,EAEAC,KAAA,CAEAF,KAAA,EArBAC,MAAA,EAyBEE,KAAA,EAKAC,IAAAA,EA9BFC,KAAA,GAsBMC,SAAA,oEA+hFRjC,qDAj/EAkC,CAAIC,EAAJ,CAAA,CACAC,IAAA,+BAGA,IARAC,EACAA,EACAT,EACAU,IAcAH,IATAR,EAASxB,EAASoC,UAVlBC,MA+BIL,OANJpC,KAAAyC,IAAQH,EAARE,UAAAC,IAAAvC,GANAI,EAAKoC,KAAAA,IAAAA,QAQDJ,EAAKZ,KAAKK,IAAV,eAFJF,EAAAzB,EAAAuC,SAAArC,SAEI8B,KAAAA,QAAKV,GAAKK,SAAYzB,GAAKsC,QAA3BtC,GAAAuC,UAAAvC,GAIA8B,GAGA,IAAA,sDACA,MAKAA,IAAAA,QAFFU,EAAKC,EAALA,KAEEX,EAAAA,EAAYW,IAAAA,KAAZX,IAAAA,SAAAA,EAAAA,MAAAA,GACAU,KAAAA,KAAOf,OAAGgB,KAAUD,GAGpB9C,KAAA0B,KAAAK,OAAAiB,KAAAF,GAnBJ,MAwBA,IAAKpB,UAALqB,EAAA3C,EAAoBwB,cAGpBtB,OACAwC,EAAAG,EAAAF,EAAAG,OAAA,4BAEAlD,KAAA0B,KAAAK,OAAAiB,KAAAF,wFAaA,cAKAK,MAAKC,+BAALC,EAAKD,EAALvC,KAEAyC,EAAUC,EAAY1C,OADtBwC,EAAQE,EAAY1C,SACpByC,EAAAA,EAAUC,gBAKVC,EAAAC,SAAAC,gCAAAC,KAAAP,eAIAC,EAAKO,YAAL/C,EAAAG,6BAAA2C,EAAAJ,YAAKK,EAALtC,gIAcAuC,EAAAA,YAAQN,EAAY1C,QAGpBiD,KAAKC,eACLD,EAAAA,YAAMP,EAvCES,OA0CRR,KAAAA,gBAGA3C,EAAAA,YAASZ,EAAOsD,OAGjBM,EAAAN,YAAA1C,EAAAP,MAEDwD,EAAAP,YAAAF,qFAWE,CACAhB,IAAA,oBACAc,MAAMc,WACN,IAAMC,EAAAA,IACAC,EAAAA,KAAAA,IAAAA,UACNL,EAAMM,oBAINA,EAAAC,EAAAA,EAAAD,gBAEAA,EAAAE,EAAAA,EAAAF,iBAEAA,EAAAG,EAAAA,EAAAH,iBAEAA,EAASI,EAATC,wGASDL,EAAAI,GAAAV,EAAAS,EAAAG,EAAA1E,KAAA2E,WAAA3E,MAEDoE,EAAAI,GAAAV,EAAAW,EAAAC,EAAA1E,KAAA4E,WAAA5E,kHAaEoE,CACAA,IAAAA,uBACAA,MAAAA,WACAA,IAAAA,EAAAA,QAGDA,EAAAhE,EAAAgE,SAEDN,EAAA9D,KAAA6E,SAAA/D,YAAAsD,EAAAU,IAAAhB,EAAAY,EAAA1E,KAAA+E,geA4DI1E,CACAiC,IAAAA,QACA7B,MAAAA,kBACAD,KAAAA,WAAM,CANRP,OAAA,GASE+E,KAAAA,GATgB/E,SAAlB,EAYAa,SAHU,SAIRb,iBAJQ,EAKRa,OAAI,GACJC,KAAAA,GACAC,MAAAA,GACAC,OAAAA,IAEAE,KAAAA,SAVQ,CAWRC,OAAI,KACJC,KAAI,KACJC,OAAK,KACLC,MAAAA,KACAyC,SAAK,KACLiB,KAAAA,KACAzD,KAAAA,KACAlB,KAAAA,KACAsB,KAAI,KAnBJoD,MAAAA,KAGczD,OAAA,KAqBhBE,MAAKC,KACHD,OAAAA,KACAE,MAAAA,KACAqC,KAAAA,KACEkB,KAAAA,KAFFvD,MAvBF,KAwBSC,KAHG,MAQVC,KAAAA,KAAAA,CACAC,QADAD,EAEED,QAAI,EACJC,MAAAA,CACAC,MAJFD,EAKEG,IAAAA,GALFH,KA7BF,EA8BQE,MATI,EArBID,KAAA,CAyChBF,KAAA,EACDC,MAAA,EAEDC,KAAA,oyBAmIC,CAhBAO,IAAA,qQA8CG,CACE8C,IAAAA,iBApBgBhC,MAAA,SAAA,GACpB,MAAA,EAAAiC,UAAAlC,aAAAmC,IADoB,EAAA,EACpB,SAKF,EAAAhF,EAFC8E,EAAA,EAyBAA,EAAA,IAEDA,EAAA,iCAAA,CAsBE9C,IAAA,aACAc,MAAImC,WACJ,MAAazE,KAAAA,IAASmD,iBAEtBuB,EAAKnC,EAALmC,iBAEAC,EAAiBD,EAAAC,YACf3E,EAAAb,KAAA6E,SACAY,EAAA5E,EAAAQ,KACEqE,EAASJ,EAASK,MAClBD,EAASE,EAAQD,OAEjBH,EAAAA,EAAWxB,uDAjBf,KAAA,SACA0B,EAAAE,EAAAD,GACAD,EAAMF,EAAcD,GACpBG,EAAI7E,EAAW8E,GAGfH,KAAAA,gBAGA,MAGE,KAAA,SACAE,EAAAG,EAAAF,GACED,EAAAA,EAASJ,GACTI,EAAAA,EAAQC,GA2BRH,KAAAA,iBAnBA,MAZJ,KAAA,SAgBIE,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,GAyBNF,EAAAI,EAAAD,uCAFCtD,IAAA,OAEDc,MAAA,WAoBI,IAMItB,EALFiE,EADF9F,KAAA+F,WACEb,MACArD,EAAK7B,KAELgG,4BACAvE,EAASzB,KAAM0B,KAAAD,qCAMXG,KAAAA,GApBRC,GAAA,GAEY,IAEZA,EAAIvB,IAIFsB,GAAA,GACAH,IACEG,EAAAH,IAKEI,EAAAA,EAAKJ,IAALI,EACAD,KAAAA,QAAAA,GAAAA,SAAAA,SAKC,KAAA,GACFA,GAAA,GAEMA,SAMT5B,KAAA0C,QAAAd,EAAAqE,0BAwBFH,GAAA,QAhBII,EAAAzE,EAAA,GAKAqE,KAAAA,UAAAA,EAAAA,6CAkCJzD,IAAA,OACEc,MAAA,WACEtB,QAAK7B,KAAL+F,iBAEAnE,EAAIC,KAAQmE,UACVnE,EAAK7B,KAAL2C,WACAf,EAAQ5B,KAAR0B,KAAAC,QAGEC,OAAAA,KAAIuE,IAAGxE,aACR,KAAA,EAfI,IAFXE,GAAA,IAQEF,GADFC,GAHAC,EAAIF,KAKAE,EAAAA,GAIED,EAAAA,EAAAA,IAAAA,8BAEA,gBAGDA,GAAA,KAIDA,EAAAkE,8BAKAlE,MAEA,KAAA,EAmBJD,GAzCAmE,GAAA,MA4BIA,EAAAnE,EAAA,gEA4CJ,CACAU,IAAA,WACAc,MAAItC,SAAgBgE,GACpB,MACIuB,EADOC,KAAMC,IAAAA,UACOC,OACpBC,EAAAA,EAAJjB,IACIkB,EAAJlB,EAEAmB,sBACIA,EAAQnB,EAAQoB,YAClBC,EAAQtE,EAARuE,MAAAD,WAhBFtE,EAAAtC,KAAAmG,IAAA,YACAtF,EAAM8F,KAAN9B,SACAvE,EAAS+F,EAATC,aAAA,aACMI,EAAAA,KAAAA,IAAAA,cACNF,EAAA,KAEMI,GAAAA,EAAAA,EAAAA,GACFtE,OAAAA,GAEAhC,IAAAA,oBAEAkG,OAAAA,EAKF,IAAA,WAEEhB,EAAAa,EAAAM,GAEE3G,KAAA8G,cAAAxG,GACFmG,EAAAzG,KAAA+G,YAiBE/G,KAAAgH,QAAAP,EAAAA,EAAAvD,OAAA,UAdAsC,EAAAA,EAAmBmB,EAAnBnB,MAMA3E,MAiBA,IAAA,QAdEuF,KAAAA,KAAAA,OAASK,GAkBVzG,KAAA0B,KAAAK,OAAAiB,KAAA1C,mBAnCLO,EAAAiB,KAAAuE,EAuBIrG,KAAA0C,oBAqBIJ,EAAR8D,IAdIvF,EAAAA,KAAAA,YAAAA,EAAAA,WAOAA,mCAAAA,GAtCN,IAAA,qBA8CI2E,EAAAgB,EAAAG,UAGE9F,EAAAiB,KAAAuE,EACEb,KAAAA,QAAAA,GAGFE,EAASW,IAGTD,EAAAY,EAAKA,EAALhH,MAIC,MAED,IAAA,oCACFA,KAAA0B,KAAAK,OAAAkF,0BACEjH,KAAAgH,QAAAP,EAAAA,EAAAvD,OAAA,IACAwC,EAAKhE,EAAKK,GAIV6E,EAAAR,IAEAV,EAAAA,KAASW,YAAOM,EAAhBjB,MAGEU,kBAGFK,OAAAA,KAAAA,KAAA1E,OAAAgF,QAYI,KAAA,EAVJlG,KAAAA,wDAGIb,KAAA4G,KAAAA,OAAU7E,0BAIT/B,KAAAgH,QAAAP,EAAAA,EAAAvD,OAAA,aAEDuD,KAAAA,oBAeA5F,EAAAuF,gBATA,aAeJpG,KAAA0B,KAAAK,OAAA,4BAXIlB,EAAAiB,KAAAuE,EAEArG,KAAAkH,qCASJ,IAAAN,EAAAA,EAAAR,cAAA9F,GAcE8F,KAAAA,KAAQrE,OAAMgF,GAblB/G,KAAA0B,KAAAK,OAAAiB,KAAAmE,EAAA,yCAGEnH,KAAAgH,QAAAG,EAAAA,EAAAjE,OAAA,IApEJrC,EAAAiB,KAAAuE,2BAsFHO,EAAAR,IAEDA,EAAApG,KAAA+G,YAAAV,EAAArG,qBAmBEqC,IAAA,YACEc,MAAA,SAAAiE,GACA,IAAAT,EAAA3G,KAAAmG,IAAA,UAAAI,OAFFhB,EAGOnF,EAAAmF,IACL1E,EAAAb,KAAA6E,SACA2B,EAAA3F,EAAagB,MAbf0D,EAAMoB,EAAAA,aAAsBA,cAG5BP,EAAApG,KAAAmG,IAAA,sCAEAtF,KAAAA,aAQET,EAAAA,YAAawG,EAAbD,GAiBFpB,EAAAG,SAAA0B,EAAAT,GAZEpB,EAAAA,MAAAA,EAGAvF,KAAA0C,QAAApC,GAAA+G,SAAA/G,GAAAgH,qDA+BFjF,IAAA,WACEc,MAAA,SAAAoE,GACA,IAAAZ,EAAarG,KAAMgH,IAAAA,UAAnBf,OAFFhB,EAGOnF,EAAAmF,IAXP1E,EAAAb,KAAA6E,SACA2B,EAAA3F,EAAYT,KACZmF,EAAI1E,EAAAA,aAAW8F,aAGfP,EAAApG,KAAAmG,IAAA,uCAQEK,sCAMA3F,EAAAA,KAAAA,GAXFA,KAAAA,QAAAP,GAAIiH,OAEF,6CAyCD,iBATDpE,MAAA,WAEA,IAAA7C,EAAAF,EAAAoH,WAAArE,MAKAiD,EAAApG,KAAAmG,IAAA,gZAgDE,CACD9D,IAAA,0BAND,IAAAsD,EAAA3F,KAAAmG,IAAA,UAAAsB,OASD3D,EAAA9D,KAAA6E,SAAA/D,+IA8BCuB,IAAA,gBACDc,MAAA,SAAA7C,GAED,IAAAmG,EAAAzG,KAAA+G,4DAaE,CACA1E,IAAA,kBACAc,MAAMuE,WACN,IAAMC,EAAQ3H,KAAGgF,IAAO4C,UAClBC,EAAW7C,EAAO8C,KAClBC,EAAY/C,EAAOtE,OACnBsH,EAAUhD,EAASiD,MAZnBjD,EAASA,EAASkD,SAClBC,EAAQnD,EAAGA,KACXoD,EAAapD,EAAAA,UACbqD,EAASrD,EAASsD,KAClBC,EAAevD,EAAAA,UACfwD,EAAWxD,EAAOyD,KAClBC,EAAAA,EAAgB1D,KAChB2D,EAAQ3D,EAAUsD,MAClBZ,EAAN1C,EAAAxE,OACAK,EAAcmE,EAAGA,MACjB4D,EAAiB5D,EAAAA,OACjB6D,EAAkB7D,EAAlB8D,YACAC,EAAAA,EAAmB/D,MACnBgE,EAAkBhE,EAAAA,YAClBiE,EAAAA,EAAmBjE,cAEnBW,EAAeX,EAAAyC,OACfyB,EAAA,IACAF,EAAAA,KAAiBhE,SACjBiE,EAAiBjE,EAAOmE,IAAxBxD,cACAkD,EAAAhB,MACAmB,EAAAhB,EACAa,EAAeK,EAEfD,OAAAA,KAAAA,IAAAA,aACA,KAAA,SACAA,GAAAC,EAAAvD,EACAkD,MAEAG,KAAAA,EACEH,GAAAK,EAAAvD,EAdFoD,GAAAG,EAAAvD,SAiBI9E,MAEAgI,KAAAA,EACAE,GAAcK,EAAIF,EAClBD,GAAAA,EAAAA,EAgBJD,GAAAE,EAAAvD,SAdE9E,EAAAZ,OAAAwD,SAAA4F,eAAArJ,KAAAmG,IAAA,WAIEmD,EAAAA,KAAAjB,EAAAA,MAAAA,CADwBkB,GAkB1BX,EAAAA,MAAcQ,KAAQ,YAdxBvI,UAASZ,IAKPqJ,EAAAA,OAASf,EAAAA,MAAAA,CADTgB,UAAAA,IAIF1I,EAAAA,MAASE,EAAAA,KAAAA,CAaoBuI,UAbUV,GAGvC/H,CAAAA,EAASG,OAAAA,CAHTsI,UAG8BV,MAGd/H,EAOhBI,SAAA2H,EAAA,MAAA,CAHyC/H,UAAA0H,IAAzC1H,EAGqC+H,KAAAA,EAGrB,MAAA,CACZU,UAAWE,GACV,CAECF,EAAWZ,OAAAA,CALdY,UAFH5B,GAGEkB,CAFAU,EAcEA,IAAAA,mBAGEA,EAAAA,KAAS3B,EAAAA,MAAAA,CAJS2B,UAAAX,GAYxB9H,CAAAA,EAAgB+H,OAAAA,CAHhB/H,UAASO,GAGT,CAAAwH,EAAA,IAAA,CAHqC/H,UAArCS,QAGqCT,EAArCU,KAAqCqH,EAArCA,MAAA,CAGA/H,UAASS,IAA6BT,EAAtCmD,KAAsC4E,EAAtC,MAAA,CAGA/H,UAASU,qBAGTV,UAAAA,IAA8BA,EAA9BA,OAAAA,EAAAA,MAAAA,CAOAA,UAASW,IAA6BX,EAHC+H,MAAvCA,EAAA,MAAA,CAGA/H,UAASW,IAGYX,EAHrBoE,OAAA2D,EAAA,MAAA,CAWA/H,UAAAA,IAA6BA,EAIzByI,MAAWG,EAAAA,MAAAA,CADAH,UAGXV,GACEU,CAFDV,EALL,IAAA,CAYAU,UAAAE,GAReC,CAJcb,EAA7B/H,OAAAA,CAYAyI,UAAAE,QAGF3I,EAAAP,KAAAsI,EAAA,MAAA,uEAaI,CAGAzF,IAAAA,eACEA,MAAAA,gFACAa,EAAAhE,KAAA+F,WADA5C,EAAKnD,KAAGI,UAEV+C,EAAA,GACEA,OAAAA,KAAAA,IAAAA,aACAA,KAAAA,EATJA,EAAA/C,EAAAuC,SAAAf,EAAA,IAAA5B,KAAA2C,YAAAT,SAGI,MAWJwH,KAAAC,EAGFxG,EAAA/C,EAAA4F,QAAApE,EAAAqE,YAAAhE,KAFC,+DAeC,CAGE2H,IAAAA,cACAzG,MAAA,WACEmG,IAAAA,EAAAA,KAAAA,IAAAA,UAD8BA,EAG9BV,EAAAA,IAFWU,EAEWV,EAHxBiB,QAUAC,EAASvG,EAAAA,KAVTqG,EAIIN,KAHFA,IAAAA,QASFQ,EAASvG,EAATgC,IAAAqD,cAXAkB,EAAArG,SAAAC,gCAcFkG,EAAK/E,QAAL,SAAmBtB,EAAAA,GAEnB,IAAA+F,EAAA,IAAAS,GAAAA,IAAAH,EAAA1G,OAAA,EAAA8G,EAAA,IAAAC,EAAAD,EACDE,EAAAtB,EAAA,MAAA,CAEDU,UAAAA,8FAmBE,CALAjH,IAAA,eAOAc,MAAAgH,qCAEAC,EAAAvI,EAAAwI,WAEAC,EAAID,SAAWD,yBAEdG,EAAAA,KAAA1I,UALG2I,EAAAA,KAAY3I,WAOhB4I,EAAAA,EAAA5I,EAAA,kCAHEyI,EAAAzI,EAAA,EAAA,EAAAD,EAAA,EAAAA,EAOF6I,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAGEX,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EACElI,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,sBAIA8I,GAAAA,GAGH7I,EAAA8I,IAFW,IAAA9I,IAHRqD,GAAK,GASPrD,EAAK,IAAEA,EAAAA,GAEP+I,IAAAA,yCAEAC,KAAAA,EAN0CjJ,MAA5CA,EAEEC,MAAOA,GAICsI,EAAA,GAGVjF,IAAIuF,EACFX,QAJQ,EAKNlI,QAAI,KAIJ8I,EAAAA,YAAQ1K,KAAA8K,kBAAA,CACRD,KAAAA,EAN0CjJ,MAA5CC,EAQDA,MAAA,EALGqD,IAAAA,EAOJ0F,QAAK/F,EAEL6F,QAAO,KAJN,EAAAD,yCAED7I,KAAKiD,EAELhD,MAAA2I,EACDtF,MAAA,EAED0F,IAAAH,oEAeEpI,IAAA,iCAEA,IAAAsD,EAAA3F,KAAAmG,IAAA,UAAAsB,OACDlC,EAAAnF,EAAAmF,IAEDM,EAAA7F,KAAA6E,SAAAvD,0FAceO,CAAAA,IAAAA,oBADasB,MACCyH,SADD1K,OAAA,IACMwK,EADN1K,KAEpBkJ,EAAAA,EAANtH,KACMoD,EAAAA,EAAcmB,MACd4E,EAAAA,EAAW/F,MACXgG,EAAAA,EAAahG,IACbiG,EAAAA,EAAgBjG,OAChBkG,EAAAA,EAAclG,OACd2B,EAAAA,IACAwE,EAAAA,KAAAA,IAAgBnG,UAChBiF,EAAAA,EAAcjF,KACdwE,EAAWxE,EAAAA,UACXoG,EAAchL,EAASiL,UACvBC,EAAAA,EAAiBC,QACjB3C,EAAAA,EAAgBxI,OACtB0J,EAAqB1J,EAAAA,aACrBS,EAAMJ,EAAAA,QACNqB,EAAMnB,EAANwI,KACA7G,EAAemB,EAAAA,WACfgD,EAAoB5B,EAAAA,oCAlBPhD,EAAAA,EAAAA,aAqBbpB,EAAkBT,KAAHmG,IAAQY,mBAIrBpG,EAAgBP,KAASoL,IAAT,sBA1BQ1B,EAAA1J,SAAAqL,yBAyBxB5K,EAAI6K,KAAQ/K,SACZmB,EAAA6J,EAEArC,EAAYE,KAAAA,IAAAA,YADFpJ,EADVJ,KAAA+G,YAYA6E,EAAAC,WACA,IAAAC,EAASlK,EAAT,IAAAC,EAAA,IAAAC,EAAIuE,EAAKjG,EAIPoL,QAAAE,iBACAC,EAAU3I,EAAAA,EAAAA,YAAAA,EAAAA,GAAAA,GACRsG,EAAAA,CAAAA,EAAAA,OAAAA,CADmCqC,UAGnCI,GALJzC,CAAAA,KAEEA,EAAqC,GAArCqC,EASIvL,EAAAwC,QAAA8I,GAAAM,MAAA/J,KACD6J,OAAA,EAHHzF,OAAI5F,EA4DFgG,OArDEoF,mBAIFvC,UAAAyC,GACEF,CAAAA,SAGFF,IAQJtF,EAAQuC,MAPFU,EAAAA,EAASpG,mBAAEkI,GAAAA,OAAAA,SAAAA,GADwBS,OAAAA,EAGnCA,QAAAA,EAHmC1I,MAAAuI,eAczCG,EAAAjD,EAEO,GAAA3G,MAINqH,EAEDyB,KAAAA,EAFC,OAAA,cANGL,CAAAA,MAIApB,EAAAA,EAAmB,MAAG2B,CACvBgB,YAAAP,GAWFC,QAPGO,EASJ5C,GAAQhH,EAAR4I,cAOM5B,IACAzI,GAAAA,EAAAA,GAEFsL,IAAAnK,EAAAmK,OAAAT,IAAAU,EAAAA,gBAGA3F,gBAHA,IAAA4F,EAAAC,EAAA1J,UAAAX,cASCqH,GANDJ,EAAAkD,YAUF,MAKE,IAAA,iCACErJ,EAAAA,EAAAA,eAEAA,MAUIuG,IAAAA,QACD,IAAA,OACC,IAAAvG,EAEC,iBACFA,EAAA3C,EAAAmM,UAAAxJ,EAAA,GAAA0D,EAAA,KAfH6C,QAAAJ,SAAAvC,EAAAoD,GAmBET,IAFGJ,EAAAiC,EAAAA,GAGJ7B,OAAAA,EAnDP,IAAAS,GAAAA,IAAAhH,EAAAG,OAAA,GAiDUuD,GAAYvD,EAAZyD,EAQJ2C,GAAYA,EAAlB3C,GA3JwB,IAAAoD,GAAAA,IAAAhH,EAAAG,OAAA,cAiK3B,IAAAK,EAAA8C,SAhKcxE,GAAAA,EAAAA,GAgKdwE,EAAAiD,UAAAA,EAEDQ,EAAAvG,YAAA8C,6BAeE,CACAhE,IAAA,oBACAc,MAAAkD,WADA,IAAIR,EAAShF,KAAAA,IAASS,UAGtBkL,EAAa9K,EAALmE,wBAEJ2G,EAAAA,EAAYzK,IACVyD,EAAAA,EAAAA,SADFgH,EAAaC,EAAAA,YAGXjH,EAAAA,EAAIkB,yBAEHL,EAAAK,KAAAA,SAAA5E,KALH0D,EAAAA,EAAAgB,MAQAd,EAAAA,EAAAA,iBAAAA,IAAAA,GAGFA,OAAAA,KAAAW,KAAAtE,OAAA4E,QAGEQ,KAAAA,wBACE3B,EAAAgB,EAAAG,GAGEjB,EAASc,EAAAA,IACTd,EAASc,EAADkG,KAIZhH,EAAAA,EAASW,GAzBbX,MA4BA,KARQA,EAWVA,IAAAA,EAAAW,EAAAM,UAAA3G,KAAA0B,KAAAK,OAAA,GAAA/B,KAAA0B,KAAAK,OAAA,IA7BMyK,EAAAA,QAAAA,SAAAA,EAAAA,gDA2BL,EAAAzC,GAAAA,EAAA5C,EAAAjE,OAAA,IAEDwC,EAAAc,EAAAG,kCAgBE,CACAtE,IAAA,oBAFAc,MAAIqJ,WAKJA,IAAAA,EAAAA,KAAaC,IAAAA,UACXjH,EAAAA,EAAYgB,wBADdgG,EAAAA,EAAaC,IAMbtF,EAAOsF,EAAAA,YACLjH,EAAIgB,EAAAA,WAGFd,KAAAA,eACAA,EAASc,EAAAA,iBAAS2E,IAAAA,GACnBpJ,EAAM/B,KAAA6F,2CAGJH,EAAAc,QAAA,SAAAG,GACFjB,EAAAc,EAAA2E,GAVH3F,EAAAgB,EAAAG,KAgBFQ,EAAAsF,QAAA,SAAA1K,EAAAgI,GANK,IAAAvD,EAAAX,EAAA6G,cAAA,eAAA3K,EAAA,MAGI,EAAPgI,GAAAA,EAAA5C,EAAAjE,OAAA,GACDwC,EAAAc,EAAAG,GAEDjB,EAAAc,EAAA2E,2CAaE,CACA9I,IAAA,gBACAc,MAAMyF,WACN,IAAM+D,EAAAA,KAEF9L,EAAAA,KAAWsF,IAAKtB,UACpBiF,EAAWrG,EAAKuC,QAChBnF,EAAYT,EAAAA,OAEZI,EAAAwF,EAAOyG,MACLjL,EAAiBgG,EAAAA,WACjBhH,EAAI0L,EAAAA,KACJ1L,EAAA6L,KAAYlG,IAAIvE,kBAChBgH,EAAehH,EAAIgH,cACnB+D,EAAa/K,EAAGgL,aAChB9C,EAAUrG,SAAGmF,yBACX/H,EAAAb,KAAA4M,SADgChL,EAARwF,KAGxBwB,UACEU,EAAAA,EAAWE,kBADShJ,EAAtBoI,QAAAA,SAAciE,EAAQ9C,GAQxBT,IAAAA,EAAAE,EAAAA,oCAOEmD,EAAAA,IAAAA,EAAAA,MAAAA,IAAAA,EAAAA,MACDrD,EACI1H,EAAAsJ,EAGD5B,EAAAA,mCACAzI,CAAAA,EAAAA,OAAAA,CACDyI,UAAAE,GACFmD,CAAAA,MAID7C,IApCFR,GAAA,IAAA4B,GA4CF,IAAAnB,YAVI3C,EAAOkC,EAAYA,aAAnBiB,EAAA,IAAAsC,IAKMC,IAERxD,GAAA,IAAA3C,EAUA9F,EAAAgB,MAAAuF,oEAQA/E,IAAA,kCAEA,IAAAsD,EAAA3F,KAAAmG,IAAA,UAAAsB,OACDlC,EAAAnF,EAAAmF,IAUCD,EAAAtF,KAAA6E,SAAAtD,4FAcAuI,CACE5E,IAAAA,eAEAwF,MAAAA,WACAG,IAAAA,EAAAA,KAAAA,WAJ0CD,EAA5CmC,EAA4C7H,MAM5C4E,EAN4C9F,EAAA4G,IAO1C1F,EAAK8H,EAAA,EAJLtC,EAAAA,EAAAA,EAMAA,EAAAA,EAH0CuC,EAI1CpC,EAAAA,EAJ0C,EAAAD,EAAAnH,SAAAC,gCAO5CgH,EAAK7F,YAPuC7E,KAAAiN,kBAAA,CAS5CpC,MAAAqC,EANExC,IAAAA,EASJZ,QAAAvG,EAXI2B,QAAOiI,KAEPzC,EAAMnH,YASVvD,KAAAiN,kBAAA,CARIpC,MAAMmC,EAQVpC,IAAAwC,EALE1C,QAAK7F,EAELgG,QAAO,KAYPf,EAAAvG,YAAAvD,KAAAiN,kBAAA,iFAMA5K,IAAA,iCAEA,IAAAsD,EAAA3F,KAAAmG,IAAA,UAAAsB,OACDlC,EAAAnF,EAAAmF,IAEDK,EAAA5F,KAAA6E,SAAAb,0FAoBE,CACA3B,IAAA,oBACAc,MAAMyF,SAAN1I,GAwBS,IAvBT,IAAI4J,EAAAA,EAAWrG,MACX5C,EAAAA,EAAW+J,IACXnJ,EAAOvB,EAAQwB,OACfC,EAAAA,EAAeD,OACfE,EAAAA,KAAJuE,IAAAZ,UAJIuE,EAAWrG,EAAAA,KAMf5C,EAAAgE,EAAWwI,UACT5L,EAAcC,EAAGD,UACjBE,EAAIuK,EAAiBvK,QACrBC,EAAAoD,EAAAuB,oBAEAiD,EAASoB,EAAGhC,KAAqBA,EAC/ByD,EAAazK,IAECgH,cACZU,EAAAA,SAAWE,yBADS3I,EAHCb,KAAzBsN,SAAA7L,EAAYmH,KAAAA,KAAAA,QAUZjH,EAAA3B,KAAY4B,KAAAA,QAVaA,EAYxBgH,EAGEhH,GAfHgJ,EAAAhJ,GAAA,EAAA,sBAmBE0H,EAAAA,IAAAA,EAAAA,WAAAA,KACDA,EAAA1H,IAAA2L,EAAA3L,KADC0H,EAPKgE,EAUP/F,EAAAqB,EAAA,MAAA,CACEU,YAAS1H,GACTf,CAAAA,EAAAA,OAAAA,CACDyI,UAAAE,UAGCF,EACDA,GAAA,IAAAiE,EAEDhG,IAEAuC,GAASvG,IAAAA,GAIZ3B,IAED0H,GAAA,IAAAkE,GARIjG,IAEAuC,GAASvG,IAAYgE,EACtB1G,EAAAe,KAAA2F,IAGF3F,EAAAH,GAAAE,EAAAC,KAUC0H,GAAA,IAAAkE,6CAaE,qBAECrK,MAAAsK,WAPD,IASAjE,EATWxJ,KAAI0N,IAAJ,UASXC,KACEC,EAAK5N,KAAS4N,SACfC,EAAAhN,EAAAiN,MAAAA,cAAA,IAAAtE,iCAEDhI,EAAApB,EAAI2N,WACFA,EAAAA,4FAGF,IAAAH,EAAII,IAAJN,KACEM,EAAAA,EAAUJ,WACXG,EAAAzN,EAAA2N,8BAIDC,GAxBFC,aAAAD,GA4BA9N,EAAA,KAEAqN,EAAAA,IAAAA,GANES,EAAQE,KAhBPL,EAAA,IAAAA,GAoBH3N,EAAauM,KAEbc,EAAU,IAAAO,GAKZK,EAAA1E,UAAAiE,EAAA,IAAAG,EAAA,IAAAC,iCAeE3L,IAAA,cAEAc,MAAA,WAUA,IAAA9C,EAAAL,KAAAmG,IAAA,sBAGD9F,GAAA,2JA+BCgC,IAAA,aACEiM,MAAAA,SAAAC,GACD,IAEAxM,EAJDyM,EAEOD,EAAAE,eACLH,EAAQI,EAAI3M,aAAZ,qCAGFA,EAAO/B,KAAP+G,YACDuH,QAAAI,IAAA,+GAmBA,CAUCrM,IAAA,4LAkBA,CAGAA,IAAA,wLAMAiM,CAaAjM,IAAA,cAEAc,MAAA,WAEElB,IAAAA,EAAAA,KAAAA,+LAFK,CAAP,CAeAI,IAAA,UAGAR,MAAAA,SAAAA,mGAIEI,CACAC,IAAAA,WAHKiB,MAAP,SAAAwL,GAeA,IAAArO,EAAAqO,EAAA,IAAAjB,KAAAiB,GAAA,IAAAjB,KAEA9L,EAAAxB,EAAA4F,QAAA2I,mFAcD,CATCtM,IAAA,UACET,MAAAA,SADK+M,GAEL9M,IAAAA,EAAOA,EAFF,IAAA6L,KAAAiB,GAEQxL,IAFRuK,KAGL5L,EAAMA,EAHDkE,QAAA2I,GAIL3M,EAASmB,EAJJR,SAAAgM,GAKL1M,EAAMyJ,EALD9I,UAMLV,EAAQ9B,EAASqL,OAAMzJ,GACvBgK,EAAO5L,EAASwO,MAAAA,IAAalD,EAAtBvI,MAAA,IAAArB,EAPTG,EAAAJ,EAAAK,SAAAJ,EAAA,IAkBA,MAAA,CAEAF,KAAAA,EAAAuB,mGAKEjB,CAHKG,IAAP,SAaAc,MAAA,SAAAwL,GAGF,OAAAA,EAAA,IAAAjB,KAAAiB,GAAA,IAAAjB,mIAmBMN,CACDJ,IAAAA,WACCA,MAAAA,SAAAA,GACAI,IAHAA,EAGAA,EAAAA,QAAAA,GAAAA,MACDyB,EAAAC,EAAA7I,WAAA8I,MAAA,IACF/B,EAAApL,SAAAiN,EAAAA,EAAA3L,OAAA,GAAA,IALGkK,EAAWxL,EAIZwL,EAGI,SAIRA,EAFQA,IAALxC,GAFFoC,EAAApL,GAID,EAJQ,IAAPkN,GACE5J,EAAO8H,EADF,EAEAI,IAERJ,EAAApL,EAAAkN,EAEDlN,GAAA,EAAAkN,sBAiBE,CACAzM,IAAA,gBACAc,MAAA2C,SAAAxF,GACA,IAAA0O,EAAAA,EAAclN,SAAdpB,MACA0B,EAAaN,EAAbuI,WAHI4E,EAAAA,EAAJxD,OAAAnL,GAAA6C,MAMA+L,EAAI7E,EAAAA,MAAJ,KACE8E,EAAIC,SAAJC,EAAArN,GAAAmN,IACDxE,EAAAA,SAED0E,EAAA,GAAA,wBACEhF,EAAAA,EAAAzI,EAAAC,GACA8I,EAAAA,EACAqE,EAAAA,QAEA5M,EAAIuI,EACF7E,EAAAA,EACAkJ,EAAAA,GAAA,EAAAA,GACA5M,EAAS,SAETiI,EAAAzI,IAAA,IAAAC,IACAO,GAAAA,GADAA,EADK,IAGN4M,GAAA,KAIDE,EAAQrN,EAER8I,MAGA7H,GAAI6H,EACFsE,EAED,YAGI7O,EAASmM,GAAAA,GAFf4C,EAAArM,SAGFA,GAAAqM,+DAqBCG,CAEAC,IAAAA,YACAC,MAAAA,SAAAA,EAAAA,GAJAC,IAcFF,EANIpI,EACDuI,EAFDJ,EAAAK,GAECJ,EAAAK,EAAAH,MAAAI,KALDL,EAAS5E,EAAG0E,MAAQO,KAOpBH,EAAOvI,IAAAA,8FAAPmI,EAAOnI,eAAPiI,SAAAU,EAAA,GAAA,IAAAV,SAAAU,EAAA,GAAA,IAAA,EAAAV,SAAAU,EAAA,GAAA,KACDP,EAAAE,EAAAI,UAEDL,EAAAF,EAAAO,sBAd2BT,iLA6CvBW,yBADF5M,MAAI4M,SAAgBnO,EAAAmI,GAIpBiG,IAAAA,EAAAA,EAAAA,SAAAA,+BAIE/N,EAAI,IAAJA,KAAAA,eAAAA,EAAAA,MAAAA,IAAAA,EAAAA,GAAAA,KAAAA,GAEH8N,EAAAzP,EAAA2P,cAED9M,EAAA4M,EAAApN,kBAFCoN,EAAA,MAEDA,GAAA,8BAJezP,EAAI2B,4BAmFf,CAvCAI,IAAA,eAEAc,MAAA,SAAA7C,GACD,IA4FC4P,EA2BEpO,EApFFpB,gBAAAA,EAlCIyP,CAAAA,IAAW,IAAG,IAAdA,IAAAA,IAAAA,IAAe7P,IAAS,IAAA,IAAA,KA8LhC8P,EAhDeC,SAAAA,EAAAA,GACR,IAlBLzO,cAAA0O,cAyBEzO,EAAAA,GAtEI0O,KAAAC,OAAA5O,EAAA,MAAA,GAsEJC,MAAAA,GAFFuO,EAAO,MAAP,GArDQ5P,SAAAA,GAcN,IAAAE,EAAAN,EAAAoC,SAAA9B,oBAGAwP,EAAIrO,EAAKsN,cACPtN,EAAAA,EAAAA,WAAAA,EA3EFqO,EAAA5P,EAAAsC,iBA8EAlC,EAAA+L,QAAA,SAAA0C,EAAApF,GA/BMqG,EAAAA,EAAAA,IAnCRhQ,EAAAiK,WAAAzI,IAAA,IAAAmI,oBAoGElI,CAAAA,wBAEA4O,GAAQC,IAARD,EAKJ,OAAAH,EATE,IAAA5C,KAAA5L,GAAA+N,UALKnC,gBApDH0C,EAAA,GAEF,cACMO,EAAe,GAmFvB9O,OAAAuO,EAaAA,CAAA9P,GA7DMsQ,GAAAtQ,EAxCD2P,CAAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,MAEDC,GAAOE,IAAAA,MAAPH,cAAA,MArDc,IAHGtN,CAAAA,IAAL,IAAZ,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAG2BkO,EAAA,WAgFzB/O,GAAOwO,IAAAA,MAAX3N,WAAA,GAEc,IACVyN,EAAAA,8DASFA,EAAA,GACEA,EAtGKU,CAAAA,IAAAA,IAAeD,IAAO,IAAtB,IAA4BE,IAAAA,IAAAA,IAAiBF,IAAO,IAA3D,IAAA,MA7BF,IAAAnD,KAmIIpN,GAnIJ2P,cAAA,UAqIIhO,EAAA,GACF,OAAKH,GACHsO,KAAAA,GAEAA,EAAAnO,EAAA,WA8DLmO,KAAAA,YA1DK,MAEC,KAAA,YAED,cAGJA,EAAOnO,EAAAvB,EAAA6P,KAAAC,MAAA1O,EAAA,KAAApB,GAAAoB,EAAA,GAAA,KAAAA,EAAA,IA0DFU,KAAAA,MA1DEV,EAAA,MAAAA,EAAA,GAAA,IAAA,IA2DDG,EAAAmO,wRA8DJnO,4FAOF7B,EAhoFoB,UA0oFlByQ,EAAAA,SAAAA,CAFF5Q,OAAA,WAKEgC,KAAAA,GAKA4O,SAAAA,EAOA5O,SAAAA,SAIAA,iBA9EG,EAmFH4O,oBADA5O,EAGF4O,WAAA,KAHE5O,YAKA4O,KAEF5O,WAFE4O,KAGA5O,YAAM,KAHN4O,MAvFG,CAAA,CA8FH5O,KAAM,KACN4O,KAAM,GAGVG,CACE/O,KAAQ,KACR4O,KAAQ,OAER,CACA5O,KAAQ,KACR4O,KAAQ,OAER,CACA5O,KAAQ,KACR4O,KAAQ,OAER,CACA5O,KAAQ,KACR4O,KAAQ,OArIQ,CAwIlBrQ,KAAQ,KAkBJqQ,KAAE,QAuBN7L,CACEiM,KAAM,KACNC,KAAQ,QAERC,CACA1I,KAAM,KACN2I,KAAAA,QAEAC,CACAzJ,KAAM,KACNE,KAAM,QAENwJ,CACA5Q,KAAO,KACP6Q,KAAM,QAENlG,CACA7K,KAAQ,KACRqM,KAAO,QAEP3E,CACAsJ,KAAM,KACNnE,KAAAA,QAEAoE,CACA3I,KAAAA,KACA4I,KAAO,QAEPC,CACAxI,KAAM,KACNyI,KAAAA,QAEArG,CACAhF,KAAQ,KACRsL,KAAAA,QAEAC,CACArK,KAAQ,KArCFoJ,KAAA,QA/EN,CACE5O,KAAM,KACN4O,KAAM,QApGZ,CA8NAzQ,KAASyG,KACHgK,KADW,QAGb,CAHa5O,KAAA,KAKf8P,KAAU,QALK,CAQfC,KAAS,KACPnB,KAAIoB,QAEH,CACChQ,KAAA,KACD4O,KAAA,QAvKO,CA0KRG,KAAAA,KAhBaH,KAAA,QAkBfqB,CACEjQ,KAAA,KAnBa4O,KAAA,QAqBfsB,CACElQ,KAAA,KAtBa4O,KAAA,SAyBbG,UAAInK,CAEJA,OAAMuL,KAENC,OAAOC,MA7BMC,OAAA,MA+BfC,OAAM,MACJC,OAAOC,MAhCMC,OAAA,MA1JLC,OAAA,MA6LRpS,OAAA,MAkBAoJ,OAAM/C,MASNnG,OAAImG,MAeD7B,OAdD,MAeDiM,OAAA,MAzHDC,KAAQ,MA2HRjJ,KAAO4K,MArCI1B,KAAA,OAuCbC,OAAAA,CAAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAnBI,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GArGF9I,KAAI,CAAA,IAAE,IAAA,IAqGJ,IAAA,IAAA,IAAA,KApGF+I,MAAAA,CAAAA,GAAS,GAAE,GAAA,GAAA,GAAA,GAoGT,GAAA,GAAA,GAAA,GAAA,GAAA,IAnGFzJ,OAAM,CACNE,KAAM,SACN+B,OAAO,SACPyH,MAAK,YA0HP3E,SAAAA,eACE4E,KAAIuB,WAxHJC,UAAW,gBA0HX1H,KAAAA,WACE7K,UAAK,kBACHwS,KAAAA,SACAC,KAAAA,WAxHJ/K,QAAO,cAyHLsJ,IAAA,UACEnE,MAAAA,YACE2F,KAAAA,WACDvB,UAFD,gBAGEuB,UAAGrG,gBACJ+E,OAAA,aAvHLwB,MAAAA,YAwHIvB,WAAA,iBAtHJxI,MAAM,YAuHJyI,KAAAA,WACEoB,UAAAA,gBACAzH,UAAA,gBArHJhF,OAAQ,SAsHNsL,YAAA,cACEmB,MAAAA,YACAlB,YAAA,cAhBJrK,KAAA,WA7BE0B,KAAA,WAnENyI,WAAA,6HAtJMf,aAAAA,mBA0JNzQ,SAAA,eACEgS,OADe,eA6HbhS,EAAA6R,MAAOkB,CAlFIf,KAAA,EAhCVgB,SAAM,SAAAC,GAoHT,MAAAC,iBAAAC,GAjHCxB,SAdc,SAAAsB,GAefzM,MAAY,iBAAAyM,GAEXrB,QAjBc,SAAAqB,GAkBfnB,OAAAA,MAAWF,QAyBEC,MAAAuB,QAAAH,GAtBK,mBAATE,OAAAD,UAACZ,SAAQe,MAAAJ,IAsHfjK,WAAA,SAAAiK,GAlHD,MAAoB,mBAARjT,GAAZ,sBAAAmT,OAAAD,UAAArN,SAAAwN,MAAAJ,IAIAnB,UAAOI,SAASe,GA7BH,OAAAA,GAAAA,EAAAG,UAAAH,EAAAP,SAAA,IAAAO,EAAAK,UAgCbvB,QAAOO,SAAYA,GAhCN,OAAAtS,EAAAyG,MAAAuM,SAAAV,IAAA,KAAAA,GAmCbtJ,KAAA,SAAOkJ,GACR,IAAAzL,EAAAzG,EAAAyG,aAGHA,EAAAuL,MAAA,oGAIAhS,UAAA,SAAesS,GAoHXS,OAAAA,EAAAA,QAAAA,kBAAAA,MA3GFvK,EAAAA,IAAa,+BAUX,IAAI/B,EAAMmL,EAAQ2B,MAChBA,EAASlH,SAAQ7D,cAAWkK,kBAG1Bc,EAAU1B,eAAkB2B,IAC1BC,EAAAA,IAASnH,aAATkG,EAAAgB,EAAAD,EAAAC,WAKEC,EAAAA,QAASH,IAkHXI,EAAAA,QAAAA,SAAAA,GACJ,IAAAD,EA/GEjB,GAAAA,EAAQtP,UAAYuQ,GAbtBA,EAAAE,wCAmIGnB,IAAAA,EAAAhM,EAAAuM,SAAAY,GAAAnN,EAAA2L,KAAA3L,EAAAoN,UAAAD,IAAAA,EAAA/N,WAvJM6N,EAAArQ,SAAAyQ,eAAAjS,yBAsDP0K,aAAImG,SAAuBA,EAAOe,EAAK1Q,GACrC6P,IAAAA,EAAAA,EAAW7P,QAAXgR,cAEAnB,OAAEa,GACH,IAAA,0BACD,MACF,IAAK,QACY1Q,UAAZmG,GAAH,aAAAwJ,EAoEYE,EAAA7P,MAAAA,EA+ChB/C,EAAAA,aAAAA,EAAAA,GAbA,sBA/FF4S,EAAA1J,UAAAnG,6DAgIE6P,IAAAA,EAAAA,EAAAA,iEA/FDtN,SArGY,SAAAsN,EAAA1J,0FAqOX9D,YAAA,SAAAwN,EAAA1J,GArOJ,IAAA6J,EAAAH,EAAA1J,2GAoJM9E,GAAA,SAAIiK,EAAAA,EAAgB2F,EAAAhO,EAAAiO,EAAAC,EAEhBlQ,GACD,IAAAA,EAAAhE,EAAAgE,eAcP,eAAAgQ,GAAA,eAAAA,oDAbeG,SAAKF,EAAdG,GACD,IAAA/F,EAAArK,EAAAqQ,kBAAAzB,EAAAwB,EAAAE,OAAAC,IAmGFH,EAAA/F,eAAAA,MA/FC,IAAA6F,GACDlQ,EAAAU,IAAAkO,EAAAoB,EAAAL,GAGEa,EAAAA,KAAAA,GAAuBb,EAA1BS,+FAmCGK,EAAAA,yBAnEazO,EAAAA,EAAA0O,8EA2EhB9B,EAAA6B,oBAAyBT,EAAChQ,EAA1BkQ,IAAA,sCAUFS,EAAAA,gBArFkBxG,GAsFhBnK,EAAS4Q,eAATzG,gCAQF,IAAA0G,EAAAC,OAAAD,4CAKAD,EAAAA,cAnGkB,8BA4GlB,IAAAC,EAAAC,OAAAD,4DAiBER,kBAAA,SAAAzB,EAAA0B,EAAAC,GACD,KAAAD,GAAAA,IAAA1B,GAAA,CA9HH,GAAA5S,EAAAmF,IAAAmB,SAAAgO,EAAAC,EAAAQ,QAAA,IAAA","file":"calendar.min.js","sourcesContent":["/**\r\n * Calendar 类\r\n */\r\nclass Calendar {\r\n  /**\r\n   * 构造函数\r\n   * ========================================================================\r\n   * @constructor\r\n   * @param options\r\n   * @returns {Calendar}\r\n   */\r\n  constructor (options) {\r\n    /**\r\n     * Calendar 控件的配置属性\r\n     * ========================================================================\r\n     */\r\n    this.attributes = {\r\n      // 日历显示的位置（DOM 节点 ID）\r\n      parent: '',\r\n      // 日历初始化显示的时间\r\n      time: '',\r\n      // 日历的试图模式：\r\n      // 0 - 日期试图（默认值）\r\n      // 1 - 月份试图\r\n      // 2 - 年代试图\r\n      viewMode: 0,\r\n      // 日历的日期选择模式\r\n      // single - 单选模式（默认值）\r\n      // multiple - 多选模式\r\n      // range - 范围选择模式\r\n      // week - 星期选择模式\r\n      pickMode: 'single',\r\n      // 是否显示农历日期\r\n      // false - 不显示（默认值）\r\n      // true - 显示\r\n      isLunarCalendar: false,\r\n      // 是否显示节日（国际节日和农历节气）\r\n      // 目前只支持国际节日\r\n      isFestivalsDisplay: false,\r\n      onDatePick: null,\r\n      onMonthPick: null,\r\n      onYearPick: null,\r\n      onTodayPick: null,\r\n      // 月份常量\r\n      MONTHS: [],\r\n      // 星期常量\r\n      DAYS: [],\r\n      // 月份天数常量\r\n      DATES: [],\r\n      // 日历控件的样式常量\r\n      STYLES: {}\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的 DOM 节点属性\r\n     * ========================================================================\r\n     */\r\n    this.elements = {\r\n      // 显示日历控件的父节点\r\n      parent: null,\r\n      // 日历控件的根节点\r\n      wrap: null,\r\n      // 日历控件的头部节点\r\n      header: null,\r\n      // 日历控件的标题节点\r\n      title: null,\r\n      // 日历控件的切换器节点\r\n      switcher: null,\r\n      // 日历控件向上切换按钮节点\r\n      prev: null,\r\n      // 日历控件向下切换按钮节点\r\n      next: null,\r\n      // 日历控件的主体内容节点\r\n      body: null,\r\n      // 日历控件的星期栏节点\r\n      week: null,\r\n      // 日历控件的日期显示节点\r\n      dates: null,\r\n      // 日历控件的月份显示节点\r\n      months: null,\r\n      // 日历控件的年代显示节点\r\n      years: null,\r\n      // 日历控件的页脚节点\r\n      footer: null,\r\n      // 日历控件的当前日期显示节点\r\n      today: null,\r\n      // 日历控件的当前时间显示节点\r\n      time: null\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的数据属性\r\n     * ========================================================================\r\n     */\r\n    this.data = {\r\n      // 日历可以显示的最小年份\r\n      minYear: 0,\r\n      // 日历可以显示的最大年份\r\n      maxYear: 0,\r\n      // 当前选中日期的年份\r\n      year: 0,\r\n      // 当前选中日期的月份\r\n      month: 0,\r\n      // 选中的日期信息\r\n      date: {\r\n        // 年份\r\n        year: 0,\r\n        // 月份\r\n        month: 0,\r\n        // 日期\r\n        date: 0,\r\n        // 星期几\r\n        day: 0,\r\n        // 日期的英文表示（格式：2019-6-2）\r\n        text: '',\r\n        // 日期的完整中文表示（格式：2019年6月2日 星期日）\r\n        fullText: ''\r\n      },\r\n      // 多选（multiple/range/week）模式下，选中的日期数据\r\n      picked: []\r\n    }\r\n\r\n    // 执行初始化操作\r\n    // 绘制界面\r\n    // 绑定事件处理器\r\n    this.initialize(options)\r\n        .render()\r\n        .addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 初始化方法\r\n   * ========================================================================\r\n   * 1. 初始化配置信息；\r\n   * 2. 初始化数据信息；\r\n   * 3. 初始化 DOM 信息（创建控件相关的 DOM 节点）；\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  initialize (options) {\r\n    let year = Calendar.getYear().value\r\n    let pickMode\r\n    let time\r\n    let month\r\n    let monthText\r\n    let dateRanges\r\n    let startDate\r\n    let endDate\r\n\r\n    // 初始化配置\r\n    this.set(Calendar.defaults)\r\n        .set(options)\r\n\r\n    time = this.get('time')\r\n    pickMode = this.get('pickMode')\r\n    month = Calendar.getMonth(time)\r\n    monthText = month.text\r\n\r\n    // 初始化数据\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        ._setYears(time)\r\n\r\n    // 初始化（多选模式）选中的时间\r\n    switch (pickMode) {\r\n      case 'multiple':\r\n        this.data.picked.push(this.getDate().text)\r\n\r\n        break\r\n      case 'range':\r\n        startDate = monthText + '-' + 1\r\n        endDate = monthText + '-' + this.get('DATES')[month.value - 1]\r\n\r\n        this.data.picked.push(startDate)\r\n        this.data.picked.push(endDate)\r\n\r\n        break\r\n      case 'week':\r\n        dateRanges = Calendar.getWeekRanges(time)\r\n        startDate = dateRanges[0]\r\n        endDate = dateRanges[dateRanges.length - 1]\r\n\r\n        this.data.picked.push(startDate)\r\n        this.data.picked.push(endDate)\r\n\r\n        break\r\n    }\r\n\r\n    this.data.minYear = year - 100\r\n    this.data.maxYear = year + 100\r\n\r\n    // 创建控件相关的 DOM 节点\r\n    this._createElements()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件界面的方法\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  render () {\r\n    let elements = this.getEls()\r\n    let $wrap = elements.wrap\r\n    let $header = elements.header\r\n    let $switcher = elements.switcher\r\n    let $body = elements.body\r\n    let $footer = elements.footer\r\n    let $fragment = document.createDocumentFragment()\r\n\r\n    // 绘制头部\r\n    this._renderTitle()\r\n    $header.appendChild(elements.title)\r\n    $switcher.appendChild(elements.prev)\r\n    $switcher.appendChild(elements.next)\r\n    $header.appendChild($switcher)\r\n\r\n    // 绘制星期栏\r\n    this._renderDays()\r\n    $body.appendChild(elements.week)\r\n\r\n    // 绘制日期\r\n    this._renderDates()\r\n    $body.appendChild(elements.dates)\r\n\r\n    // 绘制月份\r\n    this._renderMonths()\r\n    $body.appendChild(elements.months)\r\n\r\n    // 绘制年代\r\n    this._renderYears()\r\n    $body.appendChild(elements.years)\r\n\r\n    // 绘制页脚\r\n    this._renderFooter()\r\n    $footer.appendChild(elements.today)\r\n    $footer.appendChild(elements.time)\r\n\r\n    // 将主体模块绘制出来\r\n    $wrap.appendChild($header)\r\n    $wrap.appendChild($body)\r\n    $wrap.appendChild($footer)\r\n    // 将控件零时保存在文档碎片中\r\n    $fragment.appendChild($wrap)\r\n\r\n    // 一次性绘制出整个日历控件\r\n    elements.parent.appendChild($fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 给日历控件相关的 DOM 节点绑定事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  addEventListeners () {\r\n    const DOT = '.'\r\n    const STYLES = this.get('STYLES')\r\n    const CLICK = 'click'\r\n    const selectorTitle = DOT + STYLES.TITLE\r\n    const selectorPrev = DOT + STYLES.PREV\r\n    const selectorNext = DOT + STYLES.NEXT\r\n    const selectorDate = DOT + STYLES.DATE\r\n    const selectorMonth = DOT + STYLES.MONTH\r\n    const selectorYear = DOT + STYLES.YEAR\r\n    const selectorToday = DOT + STYLES.TODAY\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    // 绑定点击标题的事件处理器\r\n    Delegate.on($wrap, selectorTitle, CLICK, this._titleClick, this)\r\n    // 绑定点击向上按钮的事件处理器\r\n    Delegate.on($wrap, selectorPrev, CLICK, this._prevClick, this)\r\n    // 绑定点击向下按钮的事件处理器\r\n    Delegate.on($wrap, selectorNext, CLICK, this._nextClick, this)\r\n    // 绑定点击日期的事件处理器\r\n    Delegate.on($wrap, selectorDate, CLICK, this._dateClick, this)\r\n    // 绑定点击月份的事件处理器\r\n    Delegate.on($wrap, selectorMonth, CLICK, this._monthClick, this)\r\n    // 绑定点击年份的事件处理器\r\n    Delegate.on($wrap, selectorYear, CLICK, this._yearClick, this)\r\n    // 绑定点击今天的事件处理器\r\n    Delegate.on($wrap, selectorToday, CLICK, this._todayClick, this)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有绑定的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  removeEventListeners () {\r\n    const CLICK = 'click'\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Delegate.off($wrap, CLICK, this._titleClick)\r\n    Delegate.off($wrap, CLICK, this._prevClick)\r\n    Delegate.off($wrap, CLICK, this._nextClick)\r\n    Delegate.off($wrap, CLICK, this._dateClick)\r\n    Delegate.off($wrap, CLICK, this._monthClick)\r\n    Delegate.off($wrap, CLICK, this._yearClick)\r\n    Delegate.off($wrap, CLICK, this._todayClick)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重启日历控件\r\n   * ========================================================================\r\n   * 1. 销毁日历控件：\r\n   *    1.1 移除所有的绑定的事件处理器\r\n   *    1.2 隐藏控件\r\n   *    1.3 移除所有 DOM 节点\r\n   *    1.4 重置所有属性\r\n   * 2. 初始化控件\r\n   * 3. 绘制控件\r\n   * 4. 绑定事件处理起\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  reload (options) {\r\n    this.destroy().initialize(options).render().addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁日历控件\r\n   * ========================================================================\r\n   * 1 移除所有的绑定的事件处理器\r\n   * 2 隐藏控件\r\n   * 3 移除所有 DOM 节点\r\n   * 4 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  destroy () {\r\n    this.removeEventListeners().hide().remove().reset()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  remove () {\r\n    let elements = this.getEls()\r\n\r\n    elements.parent.removeChild(elements.wrap)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  reset () {\r\n    this.attributes = {\r\n      parent: '',\r\n      time: '',\r\n      viewMode: 0,\r\n      pickMode: 'single',\r\n      isLunarCalendar: false,\r\n      MONTHS: [],\r\n      DAYS: [],\r\n      DATES: [],\r\n      STYLES: {}\r\n    }\r\n\r\n    this.elements = {\r\n      parent: null,\r\n      wrap: null,\r\n      header: null,\r\n      title: null,\r\n      switcher: null,\r\n      prev: null,\r\n      next: null,\r\n      body: null,\r\n      week: null,\r\n      dates: null,\r\n      months: null,\r\n      years: null,\r\n      footer: null,\r\n      today: null,\r\n      time: null,\r\n      year: null,\r\n      month: null,\r\n      date: null\r\n    }\r\n\r\n    this.data = {\r\n      minYear: 0,\r\n      maxYear: 0,\r\n      years: {\r\n        start: 0,\r\n        end: 0\r\n      },\r\n      year: 0,\r\n      month: 0,\r\n      date: {\r\n        year: 0,\r\n        month: 0,\r\n        date: 0,\r\n        day: 0,\r\n        text: '',\r\n        fullText: ''\r\n      },\r\n      picked: []\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取配置信息\r\n   * ========================================================================\r\n   * @param {String} attr - 配置属性名称\r\n   * @returns {*} - 返回对应属性的值\r\n   */\r\n  get (attr) {\r\n    return this.attributes[attr]\r\n  }\r\n\r\n  /**\r\n   * 设置配置信息\r\n   * ========================================================================\r\n   * @param {Object} [options] - 配置信息对象\r\n   * @returns {Calendar}\r\n   */\r\n  set (options = {}) {\r\n    // let config = JSON.parse(JSON.stringify(options))\r\n\r\n    Object.assign(this.attributes, options)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件所有相关的 DOM 节点的对象\r\n   * ========================================================================\r\n   * @see Calendar.elements\r\n   * @returns {Object}\r\n   */\r\n  getEls () {\r\n    return this.elements\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的年份\r\n   */\r\n  getYear () {\r\n    return this.data.year\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前的年份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或数字（默认值：今年）\r\n   *                                 字符串格式：'2019'、'2019-2' 或 '2019-2-2'\r\n   *                                 数字格式：  1546300800000\r\n   * @returns {Calendar}\r\n   */\r\n  setYear (time) {\r\n    this.data.year = Calendar.getYear(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得日历控件当前显示的月份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的月份\r\n   */\r\n  getMonth () {\r\n    return this.data.month\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前显示的月份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示月份的字符串或数字（默认值：本月）\r\n   * @returns {Calendar}\r\n   */\r\n  setMonth (time) {\r\n    this.data.month = Calendar.getMonth(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @returns {Object} - 返回日历控件当前选中的日期\r\n   */\r\n  getDate () {\r\n    return this.data.date\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {Calendar}\r\n   */\r\n  setDate (time) {\r\n    this.data.date = Calendar.getDate(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份所在的年代信息\r\n   * ========================================================================\r\n   * @returns {Object} - 返回当前所在年代信息\r\n   */\r\n  getYears () {\r\n    return this.data.years\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件在多选（multiple/range/week）模式下选中的日期信息\r\n   * ========================================================================\r\n   * @returns {Array} - 返回选中的日期信息\r\n   */\r\n  getPicked () {\r\n    return this.data.picked\r\n  }\r\n\r\n  /**\r\n   * 获取某个年份的所有农历节气信息\r\n   * @param {Number} year - 年份数值\r\n   * @returns {Array}\r\n   */\r\n  getLunarSolarTerms (year) {\r\n    const TERMS = this.get('TERMS')\r\n    let terms = []\r\n\r\n    TERMS.forEach((term, i) => {\r\n      terms.push(Calendar.getLunarSolarTerm(year, i))\r\n    })\r\n\r\n    return terms\r\n  }\r\n\r\n  /**\r\n   * 根据试图显示模式，切换日历控件的显示模式和显示内容\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值：\r\n   *                            0 - 日期显示模式（默认值）\r\n   *                            1 - 月份显示模式\r\n   *                            2 - 年代显示模式\r\n   * @returns {Calendar}\r\n   */\r\n  update (viewMode = 0) {\r\n    this.updateViewMode(viewMode).updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新试图显示模式的配置信息\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值（默认值：0）\r\n   * @see this.update\r\n   * @returns {Calendar}\r\n   */\r\n  updateViewMode (viewMode = 0) {\r\n    let mode = viewMode\r\n\r\n    if (mode > 2) {\r\n      mode = 2\r\n    } else {\r\n      if (mode < 0) {\r\n        mode = 0\r\n      }\r\n    }\r\n\r\n    this.set({\r\n      viewMode: mode\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新日历控件的显示内容\r\n   * ========================================================================\r\n   * 1. 更新标题内容\r\n   *    1.1 日期显示模式：显示年份和月份\r\n   *    1.2 月份显示模式：显示年份\r\n   *    1.3 年份显示模式：显示年代区间信息\r\n   * 2. 更细主体内容\r\n   *    2.1 日期显示模式：隐藏年份和月份的 DOM 节点，显示星期栏和日期信息\r\n   *    2.2 月份显示模式：隐藏年份、星期栏以及日期信息\r\n   *    2.3 年份显示模式：隐藏月份 DOM 节点、星期栏以及日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  updateView () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const DOM = Calendar.DOM\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    let elements = this.getEls()\r\n    let $week = elements.week\r\n    let $dates = elements.dates\r\n    let $months = elements.months\r\n    let $years = elements.years\r\n\r\n    this._renderTitle()\r\n\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        addClass($months, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($week, CLS_HIDDEN)\r\n        removeClass($dates, CLS_HIDDEN)\r\n\r\n        // 重新绘制日期\r\n        this._repaintDates()\r\n\r\n        break\r\n      // 月份显示模式\r\n      case 1:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($months, CLS_HIDDEN)\r\n\r\n        // 重新绘制月份\r\n        this._repaintMonths()\r\n\r\n        break\r\n      // 年份显示模式\r\n      case 2:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($months, CLS_HIDDEN)\r\n\r\n        removeClass($years, CLS_HIDDEN)\r\n\r\n        // 重新绘制年份\r\n        this._repaintYears()\r\n\r\n        break\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向上翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向上翻页，显示上一个月份的日期信息\r\n   * 2. 月份显示模式：向上翻页，显示上一年的月份信息\r\n   * 3. 年份显示模式：向上翻页，显示上一个年代（10前）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  prev () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let minYear = this.data.minYear\r\n    let time\r\n\r\n    // 针对显示模式，处理相应的翻页逻辑\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        // 切换月份\r\n        month -= 1\r\n\r\n        // 到了上一年，切换年份\r\n        if (month < 1) {\r\n          month = 12\r\n          year -= 1\r\n\r\n          // 确保不小于最小可以显示的年份\r\n          if (year < minYear) {\r\n            year = minYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        // 切换年份\r\n        year -= 1\r\n\r\n        if (year < minYear) {\r\n          year = minYear\r\n        }\r\n\r\n        this.setYear(year.toString())\r\n\r\n        break\r\n      case 2:\r\n        // 切换年代\r\n        startYear -= 10\r\n\r\n        if (startYear < minYear) {\r\n          startYear = minYear + 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    // 更新显示内容\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向下翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向下翻页，显示下一个月份的日期信息\r\n   * 2. 月份显示模式：向下翻页，显示下一年的月份信息\r\n   * 3. 年份显示模式：向下翻页，显示下一个年代（10后）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  next () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let maxYear = this.data.maxYear\r\n    let time\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        month += 1\r\n\r\n        if (month > 12) {\r\n          month = 1\r\n          year += 1\r\n\r\n          if (year > maxYear) {\r\n            year = maxYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        year += 1\r\n\r\n        if (year > maxYear) {\r\n          year = maxYear\r\n        }\r\n\r\n        this.setYear(year.toString())\r\n\r\n        break\r\n      case 2:\r\n        startYear += 10\r\n\r\n        if (startYear > maxYear) {\r\n          startYear = maxYear - 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择日期\r\n   * ========================================================================\r\n   * 1. 选择了选中状态的日期：\r\n   *    1.1 星期区间和单选模式：不做任何处理\r\n   *    1.2 多选模式：取消选中 DOM 节点的选中状态，并且将选中的日期在选中信息移除\r\n   *    1.3 日期区间选择模式下：取消之前选中区间的选中样式，将当前选中的日期 DOM 节点\r\n   *        设置为选中状态。移除之前选中日期信息，并将选中日期信息保存起来\r\n   * 2. 选择了未选中状态的日期：\r\n   *    2.1 单选模式：获取选中日期信息，并用这个信息替换之前选中的信息。移除之前选中样\r\n   *        式，并设置当前选中日期的选中样式\r\n   *    2.2 多选模式：获取选中的日期信息，然后保存到选中信息中，最后设置选中日期的样式\r\n   *    2.3 日期区间选择模式下：\r\n   *    2.4 星期区间选择模式：获取当前选择日期的星期区间信息，移除之前保存的区间信息将\r\n   *        新的区间信息保存起来，移除之前的区间选中样式，并设置当前选中区间的选中样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $date - 选中的日期 DOM 节点\r\n   * @returns {*}\r\n   */\r\n  pickDate ($date) {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    const isFunction = Calendar.Utils.isFunction\r\n    let pickMode = this.get('pickMode')\r\n    let elements = this.getEls()\r\n    let time = $date.getAttribute('data-date')\r\n    let callback = this.get('onDatePick')\r\n    let $picked = null\r\n    let pickedDates\r\n\r\n    // 选择了选中状态的日期\r\n    if (hasClass($date, CLS_PICKED)) {\r\n      switch (pickMode) {\r\n        // 单选/星期选择模式\r\n        case 'single':\r\n        case 'week':\r\n          return false\r\n        // 多选模式\r\n        case 'multiple':\r\n          // 取消选中样式\r\n          removeClass($date, CLS_PICKED)\r\n          // 移除选中的日期信息\r\n          this._removePicked(time)\r\n\r\n          pickedDates = this.getPicked()\r\n\r\n          this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n          if (isFunction(callback)) {\r\n            callback(pickedDates, $date, this)\r\n          }\r\n\r\n          break\r\n        case 'range':\r\n          // 清除之前选中的数据\r\n          this.data.picked = []\r\n          // 将当前选中的日期数据保存起来\r\n          this.data.picked.push(time)\r\n\r\n          this.setDate(time)\r\n\r\n          // 绘制选中样式\r\n          elements.date = $date\r\n          this._renderDateRanges()\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n      }\r\n    } else {\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n\r\n      // 选择了未选中状态的日期\r\n      switch (pickMode) {\r\n        case 'single':\r\n          $picked = elements.date\r\n\r\n          if ($picked) {\r\n            removeClass($picked, CLS_PICKED)\r\n          }\r\n\r\n          addClass($date, CLS_PICKED)\r\n          elements.date = $date\r\n\r\n          this.setDate(time)\r\n\r\n          if (isFunction(callback)) {\r\n            callback(time, $date, this)\r\n          }\r\n\r\n          break\r\n        case 'multiple':\r\n          this.data.picked.push(time)\r\n          this.data.picked.sort()\r\n\r\n          pickedDates = this.getPicked()\r\n\r\n          this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n          addClass($date, CLS_PICKED)\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n        case 'range':\r\n          switch (this.data.picked.length) {\r\n            case 0:\r\n            case 1:\r\n              this.data.picked.push(time)\r\n\r\n              if (this.data.picked.length === 2) {\r\n                this.data.picked.sort()\r\n              }\r\n\r\n              pickedDates = this.getPicked()\r\n              this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n              elements.date = $date\r\n              this._renderDateRanges()\r\n\r\n              if (isFunction(callback)) {\r\n                callback(pickedDates, $date, this)\r\n              }\r\n\r\n              break\r\n            case 2:\r\n              this.data.picked = []\r\n              this.data.picked.push(time)\r\n\r\n              elements.date = $date\r\n              this._renderDateRanges()\r\n\r\n              break\r\n          }\r\n\r\n          break\r\n        case 'week':\r\n          let ranges = Calendar.getWeekRanges(time)\r\n\r\n          this.data.picked = []\r\n          this.data.picked.push(ranges[0])\r\n          this.data.picked.push(ranges[ranges.length - 1])\r\n\r\n          this.setDate(ranges[ranges.length - 1])\r\n\r\n          elements.date = $date\r\n          this._renderWeekRanges()\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择月份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的月份：直接切换试图模式到日期试图模式\r\n   * 2. 选择了未选中状态的月份：移除之前选中的月份的选中样式，并当前选中的月份的选中\r\n   *    样式。然后更新选中年份和月份的数据，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $month - 选中的月份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickMonth ($month) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.month\r\n    let time = $month.getAttribute('data-month')\r\n    let callback = this.get('onMonthPick')\r\n\r\n    // 点击已经选中的年份\r\n    if (DOM.hasClass($month, CLS_PICKED)) {\r\n      // 切换到月份试图模式\r\n      this.update()\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($month, CLS_PICKED)\r\n      elements.month = $month\r\n\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n          .update()\r\n    }\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, $month, this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择年份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的年份：更新选中的年份信息，并切换到月份试图模式\r\n   * 2. 选择了未选中状态的年份：移除之前选中的年份的选中样式，将当前选中的年份设为选中\r\n   *    样式，并切换到月份试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $year - 选中的年份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickYear ($year) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.year\r\n    let time = $year.getAttribute('data-year')\r\n    let callback = this.get('onYearPick')\r\n\r\n    // 点击已经选中的月份\r\n    if (DOM.hasClass($year, CLS_PICKED)) {\r\n      // 切换到日期试图模式\r\n      this.setYear(time).update(1)\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($year, CLS_PICKED)\r\n      elements.year = $year\r\n\r\n      // 更新年份并切换到月份试图\r\n      this.setYear(time)\r\n          .update(1)\r\n    }\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, $year, this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择今天\r\n   * ========================================================================\r\n   * 将今天的年份、月份以及日期信息设置为当前选中日期，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  pickToday () {\r\n    let time = Calendar.getToday().value\r\n    let callback = this.get('onTodayPick')\r\n\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        .update()\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, this.getEls().dates.querySelector('[data-date=' + time + ']'), this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  hide () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.addClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 显示日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  show () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.removeClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏/显示之间切换\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  toggle () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n\r\n    let $wrap = this.getEls().wrap\r\n\r\n    if (Calendar.DOM.hasClass($wrap, CLS_HIDDEN)) {\r\n      this.show()\r\n    } else {\r\n      this.hide()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 设置当前的年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _setYears (time) {\r\n    this.data.years = Calendar.getYears(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （多选模式）移除选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _removePicked (time) {\r\n    let pickedDates = this.getPicked()\r\n    let index = pickedDates.indexOf(time)\r\n\r\n    if (index > -1) {\r\n      pickedDates.splice(index, 1)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的各个主要 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _createElements () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_WRAP = STYLES.WRAP\r\n    const CLS_HEADER = STYLES.HEADER\r\n    const CLS_TITLE = STYLES.TITLE\r\n    const CLS_SWITCHER = STYLES.SWITCHER\r\n    const CLS_PREV = STYLES.PREV\r\n    const CLS_ICON_PREV = STYLES.ICON_PREV\r\n    const CLS_NEXT = STYLES.NEXT\r\n    const CLS_ICON_NEXT = STYLES.ICON_NEXT\r\n    const CLS_BODY = STYLES.BODY\r\n    const CLS_WEEK = STYLES.WEEK\r\n    const CLS_DATES = STYLES.DATES\r\n    const CLS_MONTHS = STYLES.MONTHS\r\n    const CLS_YEARS = STYLES.YEARS\r\n    const CLS_FOOTER = STYLES.FOOTER\r\n    const CLS_FOOTER_DATE = STYLES.FOOTER_DATE\r\n    const CLS_TODAY = STYLES.TODAY\r\n    const CLS_FOOTER_TIME = STYLES.FOOTER_TIME\r\n    const CLS_TIME = STYLES.TIME\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const SPACE = ' '\r\n    let elements = this.getEls()\r\n    let createElement = Calendar.DOM.createElement\r\n    let weekClassName = CLS_WEEK\r\n    let datesClassName = CLS_DATES\r\n    let monthsClassName = CLS_MONTHS\r\n    let yearsClassName = CLS_YEARS\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 1:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 2:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n    }\r\n\r\n    elements.parent = document.getElementById(this.get('parent'))\r\n\r\n    // wrap\r\n    elements.wrap = createElement('div', {\r\n      id: Calendar.Utils.guid('calendar'),\r\n      className: CLS_WRAP\r\n    })\r\n    // header\r\n    elements.header = createElement('div', {\r\n      className: CLS_HEADER\r\n    })\r\n    elements.title = createElement('h4', {\r\n      className: CLS_TITLE\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      })\r\n    ])\r\n    elements.switcher = createElement('div', {\r\n      className: CLS_SWITCHER\r\n    })\r\n    elements.prev = createElement('div', {\r\n      className: CLS_PREV\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      }, [\r\n        createElement('i', {\r\n          className: CLS_ICON_PREV\r\n        })\r\n      ])\r\n    ])\r\n    elements.next = createElement('div', {\r\n      className: CLS_NEXT\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      }, [\r\n        createElement('i', {\r\n          className: CLS_ICON_NEXT\r\n        })\r\n      ])\r\n    ])\r\n    // body\r\n    elements.body = createElement('div', {\r\n      className: CLS_BODY\r\n    })\r\n    elements.week = createElement('div', {\r\n      className: weekClassName\r\n    })\r\n    elements.dates = createElement('div', {\r\n      className: datesClassName\r\n    })\r\n    elements.months = createElement('div', {\r\n      className: monthsClassName\r\n    })\r\n    elements.years = createElement('div', {\r\n      className: yearsClassName\r\n    })\r\n    // footer\r\n    elements.footer = createElement('div', {\r\n      className: CLS_FOOTER\r\n    })\r\n    elements.today = createElement('div', {\r\n      className: CLS_FOOTER_DATE\r\n    }, [\r\n      createElement('p', {\r\n        className: CLS_TODAY\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        })\r\n      ])\r\n    ])\r\n    elements.time = createElement('div', {\r\n      className: CLS_FOOTER_TIME\r\n    }, [\r\n      createElement('p', {\r\n        className: CLS_TIME\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        })\r\n      ])\r\n    ])\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的标题\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderTitle () {\r\n    let $title = this.getEls().title.querySelector('.' + this.get('STYLES').TEXT)\r\n    let years = this.getYears()\r\n    let year = this.getYear()\r\n    let value = ''\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        value = Calendar.getMonth(year + '-' + this.getMonth()).fullText\r\n        break\r\n      case 1:\r\n        value = Calendar.getYear(year.toString()).text\r\n        break\r\n      case 2:\r\n        value = years.start + ' - ' + years.end\r\n        break\r\n    }\r\n\r\n    $title.innerHTML = value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的星期栏\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDays () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DAY = STYLES.DAY\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DAYS = this.get('DAYS')\r\n    const createElement = Calendar.DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    DAYS.forEach((day, i) => {\r\n      let className = i === 0 || i === DAYS.length - 1 ? CLS_DAY + ' ' + CLS_WEEKEND : CLS_DAY\r\n      let $day = createElement('div', {\r\n        className: className\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          day\r\n        ])\r\n      ])\r\n\r\n      fragment.appendChild($day)\r\n    })\r\n\r\n    this.getEls().week.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDates () {\r\n    const DATES = this.get('DATES')\r\n    const isLeapYear = Calendar.isLeapYear\r\n    // fragments\r\n    let fragment = document.createDocumentFragment()\r\n    // current month\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let days = DATES[month - 1]\r\n    let firstDateDay = Calendar.getDay(year + '-' + month + '-' + 1).value\r\n    // prev month\r\n    let prevYear = month - 2 < 0 ? year - 1 : year\r\n    let prevMonth = month - 2 < 0 ? 12 : month - 1\r\n    let prevDays = DATES[prevMonth - 1]\r\n    // next month\r\n    let nextYear = month === 12 ? year + 1 : year\r\n    let nextMonth = month === 12 ? 1 : month + 1\r\n    let nextDays\r\n\r\n    if (isLeapYear(prevYear) && prevMonth === 2) {\r\n      prevDays += 1\r\n    }\r\n\r\n    if (isLeapYear(year) && month === 2) {\r\n      days += 1\r\n    }\r\n\r\n    nextDays = 42 - (firstDateDay + days)\r\n\r\n    if (firstDateDay !== 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: prevYear,\r\n        month: prevMonth,\r\n        start: prevDays - (firstDateDay - 1),\r\n        end: prevDays,\r\n        isPrev: true,\r\n        isNext: false\r\n      }))\r\n    }\r\n\r\n    fragment.appendChild(this._getDatesFragment({\r\n      year: year,\r\n      month: month,\r\n      start: 1,\r\n      end: days,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n\r\n    if (nextDays > 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: nextYear,\r\n        month: nextMonth,\r\n        start: 1,\r\n        end: nextDays,\r\n        isPrev: false,\r\n        isNext: true\r\n      }))\r\n    }\r\n\r\n    this.getEls().dates.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintDates () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $dates = this.getEls().dates\r\n\r\n    DOM.addClass($dates, CLS_HIDDEN)\r\n    $dates.innerHTML = ''\r\n    DOM.removeClass($dates, CLS_HIDDEN)\r\n\r\n    this._renderDates()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得绘制日期信息时的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.year - 年份\r\n   * @param {Number} options.month - 月份\r\n   * @param {Number} options.start - 开始的日期\r\n   * @param {Number} options.end - 结束的日期\r\n   * @param {Boolean} options.isPrev - 是否为上个月的日期\r\n   * @param {Boolean} options.isNext - 是否为下个月的日期\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getDatesFragment (options) {\r\n    const {year, month, start, end, isPrev, isNext} = options\r\n    const SPACE = ' '\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DATE = STYLES.DATE\r\n    const CLS_DATE_PREV = STYLES.DATE_PREV\r\n    const CLS_DATE_NEXT = STYLES.DATE_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const CLS_LUNAR_TEXT = STYLES.LUNAR_TEXT\r\n    const CLS_FESTIVAL_TEXT = STYLES.FESTIVAL_TEXT\r\n    const createElement = Calendar.DOM.createElement\r\n    const isDatesEqual = Calendar.isDatesEqual\r\n    const isLunarCalendar = this.get('isLunarCalendar')\r\n    const isFestivalsDisplay = this.get('isFestivalsDisplay')\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let date = start\r\n    let pickMode = this.get('pickMode')\r\n    let pickedDates = this.getPicked()\r\n\r\n    for (; date <= end; date += 1) {\r\n      let fullDate = year + '-' + month + '-' + date\r\n      let isCurrent = Calendar.isToday(fullDate)\r\n      let day = Calendar.getDay(fullDate)\r\n      let festival = isFestivalsDisplay ? Calendar.getFestival(month, date) : ''\r\n      let $children = [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          date\r\n        ])\r\n      ]\r\n      let className = ''\r\n      let lunarText = Calendar.getDate(fullDate).lunar.text\r\n      let solarTerm\r\n      let $date\r\n\r\n      // 显示节日\r\n      if (festival) {\r\n        // 显示节日时，就不显示该日的农历日期了\r\n        $children.push(createElement('span', {\r\n          className: CLS_FESTIVAL_TEXT\r\n        }, [\r\n          festival\r\n        ]))\r\n      } else {\r\n        // 显示农历日期\r\n        if (isLunarCalendar) {\r\n          solarTerm = this.getLunarSolarTerms(year).filter((term) => {\r\n            return Calendar.isEqual(term.value, fullDate)\r\n          })\r\n\r\n          // 有公历的节日，显示公历节日\r\n          if (festival) {\r\n            lunarText = festival\r\n          }\r\n\r\n          // 有农历节气，显示农历节气（如果公历节日和农历节气在同一天，目前显示农历节气）\r\n          if (solarTerm.length > 0) {\r\n            lunarText = solarTerm[0].text\r\n          }\r\n\r\n          $children.push(createElement('span', {\r\n            className: CLS_LUNAR_TEXT\r\n          }, [\r\n            lunarText\r\n          ]))\r\n        }\r\n      }\r\n\r\n      $date = createElement('div', {\r\n        'data-date': fullDate\r\n      }, $children)\r\n\r\n      className += CLS_DATE\r\n\r\n      if (isPrev) {\r\n        className += (SPACE + CLS_DATE_PREV)\r\n      } else {\r\n        if (isNext) {\r\n          className += (SPACE + CLS_DATE_NEXT)\r\n        }\r\n      }\r\n\r\n      // 当前（今天）的日期\r\n      if (isCurrent) {\r\n        className += (SPACE + CLS_CURRENT)\r\n      }\r\n\r\n      // 周末\r\n      if (day.value === 0 || day.value === 6) {\r\n        className += (SPACE + CLS_WEEKEND)\r\n      }\r\n\r\n      switch (pickMode) {\r\n        // 单选模式\r\n        case 'single':\r\n          let pickedDate = this.getDate().text\r\n          let isPickedDate = isDatesEqual(fullDate, pickedDate)\r\n\r\n          if (isPickedDate) {\r\n            className += (SPACE + CLS_PICKED)\r\n            elements.date = $date\r\n          }\r\n          break\r\n        // 多选模式\r\n        case 'multiple':\r\n          pickedDates.forEach((picked) => {\r\n            let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n            if (isPicked) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          })\r\n\r\n          break\r\n        // 区间模式\r\n        case 'range':\r\n        case 'week':\r\n          let dateRanges = []\r\n\r\n          // 只有选中了两个节点，才绘制选中日期区间的样式\r\n          if (pickedDates.length === 2) {\r\n            dateRanges = Calendar.getRanges(pickedDates[0], pickedDates[1])\r\n\r\n            dateRanges.forEach((picked, i) => {\r\n              let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n              if (!isPicked) {\r\n                return false\r\n              }\r\n\r\n              // 设置中间日期的样式\r\n              if (i !== 0 && i !== (dateRanges.length - 1)) {\r\n                className += (SPACE + CLS_PICKED)\r\n                className += (SPACE + CLS_PICKED_RANGE)\r\n              } else {\r\n                if (i === 0 || i === dateRanges.length - 1) {\r\n                  className += (SPACE + CLS_PICKED)\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            if (pickedDates.length === 1) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          }\r\n\r\n          break\r\n      }\r\n\r\n      $date.className = className\r\n\r\n      fragment.appendChild($date)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的日期区间选中样式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDateRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $date = this.elements.date\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n\r\n    switch (this.data.picked.length) {\r\n      case 1:\r\n        $pickedDates.forEach(($picked) => {\r\n          removeClass($picked, CLS_PICKED)\r\n\r\n          if (hasClass($picked, CLS_PICKED_RANGE)) {\r\n            removeClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        addClass($date, CLS_PICKED)\r\n\r\n        break\r\n      case 2:\r\n        let ranges = Calendar.getRanges(this.data.picked[0], this.data.picked[1])\r\n\r\n        ranges.forEach((picked, i) => {\r\n          let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n          if (i > 0 && i < ranges.length - 1) {\r\n            addClass($picked, CLS_PICKED)\r\n            addClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        addClass($date, CLS_PICKED)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的星期区间\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderWeekRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n    let picked = this.getPicked()\r\n    let ranges = Calendar.getWeekRanges(picked[0])\r\n\r\n    // 移除之前选中区域的样式\r\n    $pickedDates.forEach(($picked) => {\r\n      removeClass($picked, CLS_PICKED_RANGE)\r\n      removeClass($picked, CLS_PICKED)\r\n    })\r\n\r\n    // 设置新的选中区域的样式\r\n    ranges.forEach((picked, i) => {\r\n      let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n      if (i > 0 && i < ranges.length - 1) {\r\n        addClass($picked, CLS_PICKED)\r\n        addClass($picked, CLS_PICKED_RANGE)\r\n      } else {\r\n        if (i === 0 || i === ranges.length - 1) {\r\n          addClass($picked, CLS_PICKED)\r\n        }\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderMonths () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_MONTH = STYLES.MONTH\r\n    const CLS_MONTH_NEXT = STYLES.MONTH_NEXT\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const MONTHS = this.get('MONTHS')\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    const setAttribute = DOM.setAttribute\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let year = this.getYear()\r\n    let today = Calendar.getToday()\r\n\r\n    MONTHS.forEach((MONTH, i) => {\r\n      let pickedDate = this.getDate()\r\n      let isCurrent = (year === today.year && MONTH === today.month)\r\n      let isPicked = (year === pickedDate.year && MONTH === pickedDate.month)\r\n      let nextYear = year + 1\r\n      let className = CLS_MONTH\r\n      let $month = createElement('div', {\r\n        'data-month': year + '-' + MONTH\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          MONTH\r\n        ])\r\n      ])\r\n\r\n      // 当前（今天）的年份\r\n      if (isCurrent) {\r\n        className += ' ' + CLS_CURRENT\r\n      }\r\n\r\n      // 下一年的月份\r\n      if (i >= 12) {\r\n        className += ' ' + CLS_MONTH_NEXT\r\n        setAttribute($month, 'data-month', nextYear + '-' + MONTH)\r\n      }\r\n      else {\r\n        // 选中的月份\r\n        if (isPicked) {\r\n          className += ' ' + CLS_PICKED\r\n          elements.month = $month\r\n        }\r\n      }\r\n\r\n      $month.className = className\r\n\r\n      fragment.appendChild($month)\r\n    })\r\n\r\n    elements.months.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintMonths () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $months = this.getEls().months\r\n\r\n    DOM.addClass($months, CLS_HIDDEN)\r\n    $months.innerHTML = ''\r\n    DOM.removeClass($months, CLS_HIDDEN)\r\n\r\n    this._renderMonths()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderYears () {\r\n    let years = this.getYears()\r\n    let yearsStart = years.start\r\n    let yearsEnd = years.end\r\n    let prevStartYear = yearsStart - 3\r\n    let prevEndYear = yearsStart - 1\r\n    let nextStartYear = yearsEnd + 1\r\n    let nextEndYear = yearsEnd + 3\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: prevStartYear,\r\n      end: prevEndYear,\r\n      isPrev: true,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: yearsStart,\r\n      end: yearsEnd,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: nextStartYear,\r\n      end: nextEndYear,\r\n      isPrev: false,\r\n      isNext: true\r\n    }))\r\n\r\n    this.getEls().years.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintYears () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $years = this.getEls().years\r\n\r\n    DOM.addClass($years, CLS_HIDDEN)\r\n    $years.innerHTML = ''\r\n    DOM.removeClass($years, CLS_HIDDEN)\r\n\r\n    this._renderYears()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取绘制年份信息的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.start - 开始年份\r\n   * @param {Number} options.end - 结束年份\r\n   * @param {Boolean} options.isPrev - 是否为上个年代的年份\r\n   * @param {Boolean} options.isNext - 是否为下个年带的年份\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getYearsFragment (options) {\r\n    const {start, end, isPrev, isNext} = options\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_YEAR = STYLES.YEAR\r\n    const CLS_YEAR_PREV = STYLES.YEAR_PREV\r\n    const CLS_YEAR_NEXT = STYLES.YEAR_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_DISABLED = STYLES.DISABLED\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let minYear = this.data.minYear\r\n    let maxYear = this.data.maxYear\r\n    let year = start\r\n\r\n    for (; year <= end; year += 1) {\r\n      let pickedDate = this.getDate()\r\n      let isCurrent = (year === Calendar.getToday().year)\r\n      let isPicked = (year === pickedDate.year)\r\n      let className = CLS_YEAR\r\n      let $year = createElement('div', {\r\n        'data-year': year\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          year\r\n        ])\r\n      ])\r\n\r\n      if (isPrev) {\r\n        className += ' ' + CLS_YEAR_PREV\r\n      } else {\r\n        if (isNext) {\r\n          className += ' ' + CLS_YEAR_NEXT\r\n        }\r\n      }\r\n\r\n      if (isCurrent) {\r\n        className += ' ' + CLS_CURRENT\r\n      }\r\n\r\n      if (isPicked) {\r\n        className += ' ' + CLS_PICKED\r\n        elements.year = $year\r\n      }\r\n\r\n      if (year < minYear || year > maxYear) {\r\n        className += ' ' + CLS_DISABLED\r\n      }\r\n\r\n      $year.className = className\r\n\r\n      fragment.appendChild($year)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的页脚\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderFooter () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_TEXT = STYLES.TEXT\r\n    let elements = this.getEls()\r\n    let $today = elements.today.querySelector('.' + CLS_TEXT)\r\n    let $time = elements.time.querySelector('.' + CLS_TEXT)\r\n    let today = Calendar.getToday()\r\n    let timer = null\r\n\r\n    let renderTime = () => {\r\n      let time = new Date()\r\n      let hours = time.getHours()\r\n      let minutes = time.getMinutes()\r\n      let seconds = time.getSeconds()\r\n\r\n      if (timer) {\r\n        clearTimeout(timer)\r\n      }\r\n\r\n      if (hours < 10) {\r\n        hours = '0' + hours\r\n      }\r\n\r\n      if (minutes < 10) {\r\n        minutes = '0' + minutes\r\n      }\r\n\r\n      if (seconds < 10) {\r\n        seconds = '0' + seconds\r\n      }\r\n\r\n      $time.innerHTML = hours + ':' + minutes + ':' + seconds\r\n\r\n      timer = setTimeout(renderTime, 1000)\r\n    }\r\n\r\n    $today.innerHTML = '今天：' + today.text\r\n    Calendar.DOM.setAttribute($today, 'data-date', today.value)\r\n\r\n    renderTime()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击标题的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _titleClick () {\r\n    let viewMode = this.get('viewMode')\r\n\r\n    viewMode += 1\r\n\r\n    if (viewMode > 2) {\r\n      viewMode = 2\r\n    }\r\n\r\n    this.update(viewMode)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向上翻页的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _prevClick () {\r\n    this.prev()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向下翻页的事件处理起\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _nextClick () {\r\n    this.next()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击日期的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _dateClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-date')\r\n    let picked\r\n\r\n    this.pickDate($el)\r\n\r\n    picked = this.getPicked()\r\n\r\n    console.log('------------- _dateClick -------------')\r\n    if (this.get('pickMode') === 'single') {\r\n      console.log(time)\r\n    } else {\r\n      console.log(picked)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击月份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _monthClick (evt) {\r\n    let $month = evt.delegateTarget\r\n    let time = $month.getAttribute('data-month')\r\n\r\n    this.pickMonth($month)\r\n\r\n    console.log('------------- _monthClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击年份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _yearClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-year')\r\n\r\n    this.pickYear($el)\r\n\r\n    console.log('------------- _yearClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击今天的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _todayClick () {\r\n    let elements = this.getEls()\r\n    let time = Calendar.getToday().text\r\n\r\n    this.pickToday()\r\n\r\n    // 触发日期选择逻辑\r\n    this.pickDate(elements.dates.querySelector('[data-date=\"' + time + '\"]'))\r\n\r\n    console.log('------------- _todayClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得年份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{value: (Number|{value, text, fullText}), text: string, fullText: string}}\r\n   */\r\n  static getYear (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = time.getFullYear()\r\n\r\n    return {\r\n      value: year,\r\n      text: year.toString(),\r\n      fullText: year + '年'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取月份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示月份的字符串或者数字（默认值：本月）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getMonth (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = Calendar.getYear(val)\r\n    let month = time.getMonth()\r\n\r\n    month += 1\r\n\r\n    return {\r\n      value: month,\r\n      text: year.text + '-' + month,\r\n      fullText: year.fullText + month + '月'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getDate (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = Calendar.getYear(val)\r\n    let month = Calendar.getMonth(val)\r\n    let date = time.getDate()\r\n    let day = Calendar.getDay(val)\r\n    let fullDate = year.value + '-' + month.value + '-' + date\r\n    let text = month.fullText + date + '日'\r\n\r\n    return {\r\n      year: year.value,\r\n      month: month.value,\r\n      date: date,\r\n      day: day.value,\r\n      text: fullDate,\r\n      fullText: text + ' ' + day.fullText,\r\n      lunar: Calendar.getLunarDate(fullDate)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取星期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getDay (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let day = time.getDay()\r\n    let text = Calendar.defaults.DAYS[day]\r\n\r\n    return {\r\n      value: day,\r\n      text: text,\r\n      fullText: '星期' + text\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取今天的日期信息\r\n   * ========================================================================\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getToday () {\r\n    return Calendar.getDate()\r\n  }\r\n\r\n  /**\r\n   * 获取年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{start: (number|Number|{value, text}), end: (*|number)}}\r\n   */\r\n  static getYears (val) {\r\n    let year = Calendar.getYear(val).value\r\n    let numbers = year.toString().split('')\r\n    let lastNumber = parseInt(numbers[numbers.length - 1], 10)\r\n    let yearsStart = 0\r\n    let yearsEnd = 0\r\n\r\n    if (lastNumber === 0) {\r\n      yearsStart = year\r\n      yearsEnd = year + 9\r\n    } else {\r\n      if (lastNumber === 9) {\r\n        yearsStart = year - 9\r\n        yearsEnd = year\r\n      } else {\r\n        yearsStart = year - lastNumber\r\n        yearsEnd = year + (9 - lastNumber)\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: yearsStart,\r\n      end: yearsEnd\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期所属的整个星期的日期区间信息\r\n   * ========================================================================\r\n   * @param {String} time - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getWeekRanges (time) {\r\n    const DATES = Calendar.defaults.DATES\r\n    const isLeapYear = Calendar.isLeapYear\r\n    let day = Calendar.getDay(time).value\r\n    let begins = time.split('-')\r\n    let year = parseInt(begins[0], 10)\r\n    let month = parseInt(begins[1], 10)\r\n    let date = parseInt(begins[2], 10)\r\n    let days = DATES[month - 1]\r\n    let startYear = year\r\n    let startMonth = month\r\n    let startDate = date - day\r\n    let endYear = year\r\n    let endMonth = month\r\n    let endDate = date + (6 - day)\r\n    let prevMonth = 0\r\n\r\n    // 闰年2月为29天，默认值为28天，所以需要+1天\r\n    if (isLeapYear(year) && month === 2) {\r\n      days += 1\r\n    }\r\n\r\n    if (startDate < 1) {\r\n      // 上一个月\r\n      prevMonth = month - 2\r\n      startMonth -= 1\r\n\r\n      if (prevMonth < 0) {\r\n        startYear -= 1\r\n        startMonth = 12\r\n        startDate = DATES[11] + startDate\r\n      } else {\r\n        // 开始日期\r\n        startDate = DATES[prevMonth] + startDate\r\n      }\r\n    }\r\n\r\n    if (endDate > days) {\r\n      endMonth += 1\r\n\r\n      // 结束日期\r\n      endDate = endDate - days\r\n\r\n      if (prevMonth > 11) {\r\n        endYear += 1\r\n        endMonth = 1\r\n      }\r\n    }\r\n\r\n    return Calendar.getRanges((startYear + '-' + startMonth + '-' + startDate), (endYear + '-' + endMonth + '-' + endDate))\r\n  }\r\n\r\n  /**\r\n   * 获取两个日期之间的所有日期信息\r\n   * ========================================================================\r\n   * @param {String} begin - 表示日期的字符串\r\n   * @param {String} end - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getRanges (begin, end) {\r\n    const ONE_DAY_TO_SECONDS = 24 * 60 * 60 * 1000\r\n    let ranges = []\r\n    let begins = begin.split('-')\r\n    let ends = end.split('-')\r\n    let beginTime = new Date()\r\n    let endTime = new Date()\r\n    let beginNumber\r\n    let endNumber\r\n    let timeNumber\r\n\r\n    beginTime.setUTCFullYear(parseInt(begins[0], 10), parseInt(begins[1], 10) - 1, parseInt(begins[2], 10))\r\n    endTime.setUTCFullYear(parseInt(ends[0], 10), parseInt(ends[1], 10) - 1, parseInt(ends[2], 10))\r\n\r\n    beginNumber = beginTime.getTime()\r\n    endNumber = endTime.getTime()\r\n    timeNumber = beginNumber\r\n\r\n    for (; timeNumber <= endNumber; timeNumber += ONE_DAY_TO_SECONDS) {\r\n      ranges.push(Calendar.getDate(timeNumber).text)\r\n    }\r\n\r\n    return ranges\r\n  }\r\n\r\n  /**\r\n   * 获取日期的节日文本\r\n   * ========================================================================\r\n   * @param {Number} month - 月份的数值\r\n   * @param {Number} date - 日期的数值\r\n   * @returns {String}\r\n   */\r\n  static getFestival (month, date) {\r\n    let monthProp = month < 10 ? '0' + month : month.toString()\r\n    let dateProp = date < 10 ? '0' + date : date.toString()\r\n\r\n    return Calendar.defaults.FESTIVALS[monthProp + dateProp] || ''\r\n  }\r\n\r\n  /**\r\n   * 获取某年的第几个农历节气信息\r\n   * ========================================================================\r\n   * @param {Number} year - 年份信息\r\n   * @param {Number} i - 第几个节气（0 ~ 23）\r\n   * @returns {{value: string, text: *}}\r\n   */\r\n  static getLunarSolarTerm (year, i) {\r\n    const TERMS = Calendar.defaults.TERMS\r\n    // 已知 1900年 小寒时刻为 1 月 6 日 02:05:00\r\n    const BASE = Date.UTC(1900, 0, 6, 2, 5)\r\n    let time = new Date((31556925974.7 * (year - 1900) + TERMS[i].diff * 60000) + BASE)\r\n    let fullYear = time.getFullYear()\r\n    let fullMonth = time.getMonth()\r\n    let fullDate = time.getDate()\r\n\r\n    if (fullYear < 100) {\r\n      fullYear += 1900\r\n    }\r\n\r\n    fullMonth += 1\r\n\r\n    return {\r\n      value: fullYear + '-' + fullMonth + '-' + fullDate,\r\n      text: TERMS[i].text\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取公历日期的农历日期\r\n   * ========================================================================\r\n   * @param time\r\n   */\r\n  static getLunarDate (time) {\r\n    const DATES = {\r\n      PREFIX: [\r\n        '初',\r\n        '十',\r\n        '廿'\r\n      ],\r\n      NUMBERS: [\r\n        '一',\r\n        '二',\r\n        '三',\r\n        '四',\r\n        '五',\r\n        '六',\r\n        '七',\r\n        '八',\r\n        '九',\r\n        '十'\r\n      ]\r\n    }\r\n    const toLunarZodiac = (time) => {\r\n      const ZODIAC = [\r\n        '鼠',\r\n        '牛',\r\n        '虎',\r\n        '兔',\r\n        '龙',\r\n        '蛇',\r\n        '马',\r\n        '羊',\r\n        '猴',\r\n        '鸡',\r\n        '狗',\r\n        '猪'\r\n      ]\r\n      let diff = new Date(time).getFullYear() - 1864\r\n\r\n      return ZODIAC[diff % 12]\r\n    }\r\n    const toLunarYear = (time) => {\r\n      const HEAVENLY_STEMS = [\r\n        '甲',\r\n        '乙',\r\n        '丙',\r\n        '丁',\r\n        '戊',\r\n        '己',\r\n        '庚',\r\n        '辛',\r\n        '壬',\r\n        '癸'\r\n      ]\r\n      const EARTHLY_BRANCHES = [\r\n        '子',\r\n        '丑',\r\n        '寅',\r\n        '卯',\r\n        '辰',\r\n        '巳',\r\n        '午',\r\n        '未',\r\n        '申',\r\n        '酉',\r\n        '戌',\r\n        '亥'\r\n      ]\r\n      let diff = new Date(time).getFullYear() - 1864\r\n\r\n      return HEAVENLY_STEMS[diff % 10] + EARTHLY_BRANCHES[diff % 12]\r\n    }\r\n    const getDuringDays = (date) => {\r\n      const DATES = Calendar.defaults.DATES\r\n      let time = new Date(date)\r\n      let year = time.getFullYear()\r\n      let month = time.getMonth() + 1\r\n      let total = time.getDate()\r\n\r\n      DATES.forEach((days, i) => {\r\n        if (i < month - 1) {\r\n          if (Calendar.isLeapYear(year) && i === 1) {\r\n            days += 1\r\n          }\r\n\r\n          total += days\r\n        }\r\n      })\r\n\r\n      return total\r\n    }\r\n    /**\r\n     * 算法公式：\r\n     * ========================================================================\r\n     * 设：公元年数 － 1977（或1901）＝ 4Q ＋ R\r\n     * 则：阴历日期 = 14Q + 10.6(R+1) + 年内日期序数 - 29.5n\r\n     * （注:式中Q、R、n均为自然数，R<4）\r\n     * 例：1994年5月7日的阴历日期为：\r\n     * 1994 － 1977 ＝ 17 ＝ 4×4＋1\r\n     * 故：Q ＝ 4，R ＝ 1 则：5月7日的阴历日期为：\r\n     * 14 × 4 + 10.6(1 + 1) + (31 + 28 + 31 + 30 + 7) - 29.5n\r\n     * = 204.2- 29.5n\r\n     * 然后用 204.2 去除 29.5 得商数 6 余 27.2，6 即是 n 值，余数 27 即是阴历二十七日\r\n     * ========================================================================\r\n     * @param date\r\n     * @returns {number}\r\n     */\r\n    const toLunarDate = (date) => {\r\n      const ONE_DAY_TO_SECONDS = 24 * 60 * 60 * 1000\r\n      let time = new Date(date)\r\n      let year = time.getFullYear()\r\n      let Q = Math.floor((year - 1977) / 4)\r\n      let R = (year - 1977) % 4\r\n      let days = (14 * Q) + (10.6 * (R + 1)) + getDuringDays(date)\r\n      let lunarDate = Math.floor(days % 29.5)\r\n\r\n      if (lunarDate === 0) {\r\n        let dateBefore = new Date(date).getTime() - ONE_DAY_TO_SECONDS\r\n\r\n        // 农历只有 29 和 30 两种月份最大值\r\n        switch (toLunarDate(dateBefore)) {\r\n          case 28:\r\n            lunarDate = 29\r\n\r\n            break\r\n          case 29:\r\n            lunarDate = 30\r\n\r\n            break\r\n        }\r\n      }\r\n\r\n      return lunarDate\r\n    }\r\n    // todo: 初略计算月份，没有处理农历闰月\r\n    const toLunarMonth = (time) => {\r\n      const MONTHS = [\r\n        '正',\r\n        '二',\r\n        '三',\r\n        '四',\r\n        '五',\r\n        '六',\r\n        '七',\r\n        '八',\r\n        '九',\r\n        '十',\r\n        '冬',\r\n        '腊'\r\n      ]\r\n      let month = new Date(time).getMonth() - 1\r\n\r\n      // 到了上一年的腊月\r\n      if (month < 0) {\r\n        month = 11\r\n      }\r\n\r\n      return MONTHS[month] + '月'\r\n    }\r\n    let date = toLunarDate(time)\r\n    let lunarYear = toLunarYear(time)\r\n    let lunarMonth = toLunarMonth(time)\r\n    let lunarDate = ''\r\n    let lunarZodiac = toLunarZodiac(time)\r\n    let text = ''\r\n\r\n    switch (date) {\r\n      case 10:\r\n        lunarDate = text = '初十'\r\n\r\n        break\r\n      case 20:\r\n        lunarDate = text = '二十'\r\n\r\n        break\r\n      case 30:\r\n        lunarDate = text = '三十'\r\n\r\n        break\r\n      default:\r\n        lunarDate = text = DATES.PREFIX[Math.floor(date / 10)] + DATES.NUMBERS[(date - 1) % 10] || date\r\n\r\n        if (Math.floor(date / 10) === 0 && ((date - 1) % 10) === 0) {\r\n          text = lunarMonth\r\n        }\r\n\r\n        break\r\n    }\r\n\r\n    return {\r\n      year: lunarYear,\r\n      month: lunarMonth,\r\n      date: lunarDate,\r\n      zodiac: lunarZodiac,\r\n      text: text\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 判断是否为闰年\r\n   * ========================================================================\r\n   * @param {Number} year - 年份数值\r\n   * @returns {boolean}\r\n   */\r\n  static isLeapYear (year) {\r\n    return ((year % 4 === 0) || (year % 400 === 0)) && (year % 100 !== 0)\r\n  }\r\n\r\n  /**\r\n   * 判断是否为今天\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {*}\r\n   */\r\n  static isToday (time) {\r\n    return Calendar.isDatesEqual(time)\r\n  }\r\n\r\n  /**\r\n   * 判断两个日期是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} dateOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} [dateTwo] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {boolean}\r\n   */\r\n  static isDatesEqual (dateOne, dateTwo) {\r\n    const getDate = Calendar.getDate\r\n\r\n    return Calendar.isEqual(getDate(dateOne).text, getDate(dateTwo).text)\r\n  }\r\n\r\n  /**\r\n   * 判断两个时间是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} timeOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} timeTwo - 表示日期的字符串或者数字\r\n   * @returns {boolean}\r\n   */\r\n  static isEqual (timeOne, timeTwo) {\r\n    return new Date(timeOne).getTime() === new Date(timeTwo).getTime()\r\n  }\r\n}\r\n\r\n/**\r\n * 日历控件默认的配置信息\r\n * ========================================================================\r\n */\r\nCalendar.defaults = {\r\n  parent: 'calendar',\r\n  time: '',\r\n  // 0 - 日期显示模式（默认值）\r\n  // 1 - 月份显示模式\r\n  // 2 - 年代显示模式\r\n  viewMode: 0,\r\n  // single - 单选（默认值）\r\n  // multiple - 多选\r\n  // range - 范围多选\r\n  // week - 整个星期选择\r\n  pickMode: 'single',\r\n  // 是否显示农历日期\r\n  isLunarCalendar: false,\r\n  // 是否显示节日（国际节日和农历节气）\r\n  // 目前只支持国际节日\r\n  isFestivalsDisplay: false,\r\n  onDatePick: null,\r\n  onMonthPick: null,\r\n  onYearPick: null,\r\n  onTodayPick: null,\r\n  TERMS: [\r\n    {\r\n      text: '小寒',\r\n      diff: 0\r\n    },\r\n    {\r\n      text: '大寒',\r\n      diff: 21208\r\n    },\r\n    {\r\n      text: '立春',\r\n      diff: 42467\r\n    },\r\n    {\r\n      text: '雨水',\r\n      diff: 63836\r\n    },\r\n    {\r\n      text: '惊蛰',\r\n      diff: 85337\r\n    },\r\n    {\r\n      text: '春分',\r\n      diff: 107014\r\n    },\r\n    {\r\n      text: '清明',\r\n      diff: 128867\r\n    },\r\n    {\r\n      text: '谷雨',\r\n      diff: 150921\r\n    },\r\n    {\r\n      text: '立夏',\r\n      diff: 173149\r\n    },\r\n    {\r\n      text: '小满',\r\n      diff: 195551\r\n    },\r\n    {\r\n      text: '芒种',\r\n      diff: 218072\r\n    },\r\n    {\r\n      text: '夏至',\r\n      diff: 240693\r\n    },\r\n    {\r\n      text: '小暑',\r\n      diff: 263343\r\n    },\r\n    {\r\n      text: '大暑',\r\n      diff: 285989\r\n    },\r\n    {\r\n      text: '立秋',\r\n      diff: 308563\r\n    },\r\n    {\r\n      text: '处暑',\r\n      diff: 331033\r\n    },\r\n    {\r\n      text: '白露',\r\n      diff: 353350\r\n    },\r\n    {\r\n      text: '秋分',\r\n      diff: 375494\r\n    },\r\n    {\r\n      text: '寒露',\r\n      diff: 397447\r\n    },\r\n    {\r\n      text: '霜降',\r\n      diff: 419210\r\n    },\r\n    {\r\n      text: '立冬',\r\n      diff: 440795\r\n    },\r\n    {\r\n      text: '小雪',\r\n      diff: 462224\r\n    },\r\n    {\r\n      text: '大雪',\r\n      diff: 483532\r\n    },\r\n    {\r\n      text: '冬至',\r\n      diff: 504758\r\n    }\r\n  ],\r\n  FESTIVALS: {\r\n    '0101': '元旦',\r\n    '0214': '情人节',\r\n    '0308': '妇女节',\r\n    '0312': '植树节',\r\n    '0401': '愚人节',\r\n    '0501': '劳动节',\r\n    '0504': '青年节',\r\n    '0512': '护士节',\r\n    '0601': '儿童节',\r\n    '0701': '建党节',\r\n    '0801': '建军节',\r\n    '0910': '教师节',\r\n    '1001': '国庆节',\r\n    '1224': '平安夜',\r\n    '1225': '圣诞节'\r\n  },\r\n  MONTHS: [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n  ],\r\n  DAYS: [\r\n    '日',\r\n    '一',\r\n    '二',\r\n    '三',\r\n    '四',\r\n    '五',\r\n    '六'\r\n  ],\r\n  DATES: [\r\n    31,\r\n    28,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31\r\n  ],\r\n  STYLES: {\r\n    WRAP: 'cal-md',\r\n    HEADER: 'cal-hd',\r\n    TITLE: 'cal-title',\r\n    SWITCHER: 'cal-switcher',\r\n    PREV: 'cal-prev',\r\n    ICON_PREV: 'icon-angle-up',\r\n    NEXT: 'cal-next',\r\n    ICON_NEXT: 'icon-angle-down',\r\n    BODY: 'cal-bd',\r\n    WEEK: 'cal-week',\r\n    WEEKEND: 'cal-weekend',\r\n    DAY: 'cal-day',\r\n    DATES: 'cal-dates',\r\n    DATE: 'cal-date',\r\n    DATE_PREV: 'cal-date-prev',\r\n    DATE_NEXT: 'cal-date-next',\r\n    MONTHS: 'cal-months',\r\n    MONTH: 'cal-month',\r\n    MONTH_NEXT: 'cal-month-next',\r\n    YEARS: 'cal-years',\r\n    YEAR: 'cal-year',\r\n    YEAR_PREV: 'cal-year-prev',\r\n    YEAR_NEXT: 'cal-year-next',\r\n    FOOTER: 'cal-ft',\r\n    FOOTER_DATE: 'cal-ft-date',\r\n    TODAY: 'cal-today',\r\n    FOOTER_TIME: 'cal-ft-time',\r\n    TIME: 'cal-time',\r\n    TEXT: 'cal-text',\r\n    LUNAR_TEXT: 'cal-lunar-text',\r\n    FESTIVAL_TEXT: 'cal-festival-text',\r\n    CURRENT: 'cal-current',\r\n    PICKED: 'cal-picked',\r\n    PICKED_RANGE: 'cal-picked-range',\r\n    PICKED_POINT: 'cal-picked-point',\r\n    DISABLED: 'cal-disabled',\r\n    HIDDEN: 'cal-hidden'\r\n  }\r\n}\r\n\r\n/**\r\n * 常用的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.Utils = {\r\n  uuid: 0,\r\n  isString: (o) => {\r\n    return typeof o === 'string'\r\n  },\r\n  isNumber: (o) => {\r\n    return typeof o === 'number'\r\n  },\r\n  isArray: (o) => {\r\n    if (Array.isArray) {\r\n      return Array.isArray(o)\r\n    } else {\r\n      return Object.prototype.toString.apply(o) === '[object Array]'\r\n    }\r\n  },\r\n  isFunction: (o) => {\r\n    return (typeof o === 'function') || Object.prototype.toString.apply(o) === '[object Function]'\r\n  },\r\n  isElement: (o) => {\r\n    return o && o.nodeName && o.tagName && o.nodeType === 1\r\n  },\r\n  isEmpty: (str) => {\r\n    return Calendar.Utils.isString(str) && str === ''\r\n  },\r\n  guid: (prefix) => {\r\n    let Utils = Calendar.Utils\r\n\r\n    Utils.uuid += 1\r\n\r\n    return prefix ? prefix + '-' + Utils.uuid : 'guid-' + Utils.uuid\r\n  },\r\n  trim: (str) => {\r\n    return str.replace(/^\\s+/g, '').replace(/\\s+$/g, '')\r\n  },\r\n  stripTags: (str) => {\r\n    return str.replace(/<\\/?[^>]+(>|$)/g, '')\r\n  }\r\n}\r\n\r\n/**\r\n * DOM 操作相关的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.DOM = {\r\n  /**\r\n   * 创建 DOM 节点，并添加属性和子节点\r\n   * ========================================================================\r\n   * @param {String} tagName - 标签名称\r\n   * @param {Object} attributes - 属性对象\r\n   * @param {Array} children - 子节点数组\r\n   * @returns {HTMLElement}\r\n   */\r\n  createElement: (tagName, attributes, children) => {\r\n    const Utils = Calendar.Utils\r\n    let element = document.createElement(tagName)\r\n\r\n    for (let attr in attributes) {\r\n      if (attributes.hasOwnProperty(attr)) {\r\n        Calendar.DOM.setAttribute(element, attr, attributes[attr])\r\n      }\r\n    }\r\n\r\n    if (Utils.isArray(children)) {\r\n      children.forEach((child) => {\r\n        let childNode\r\n\r\n        if (Utils.isElement(child)) {\r\n          childNode = child\r\n        } else {\r\n          if (Utils.isString(child) || Utils.isNumber(child)) {\r\n            let text = Utils.isString(child) ? Utils.trim(Utils.stripTags(child)) : child.toString()\r\n\r\n            childNode = document.createTextNode(text)\r\n          }\r\n        }\r\n\r\n        element.appendChild(childNode)\r\n      })\r\n    }\r\n\r\n    return element\r\n  },\r\n  /**\r\n   * 给 DOM 节点设置属性/值\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} attr - 属性名称\r\n   * @param {String|Number|Boolean} value - 属性值\r\n   */\r\n  setAttribute: (el, attr, value) => {\r\n    let tagName = el.tagName.toLowerCase()\r\n\r\n    switch (attr) {\r\n      case 'style':\r\n        el.style.cssText = value\r\n        break\r\n      case 'value':\r\n        if (tagName === 'input' || tagName === 'textarea') {\r\n          el.value = value\r\n        } else {\r\n          el.setAttribute(attr, value)\r\n        }\r\n        break\r\n      case 'className':\r\n        el.className = value\r\n        break\r\n      default:\r\n        el.setAttribute(attr, value)\r\n        break\r\n    }\r\n  },\r\n  /**\r\n   * 检测 DOM 节点是否包含名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {*}\r\n   */\r\n  hasClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass) {\r\n      return false\r\n    }\r\n\r\n    return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\r\n  },\r\n  /**\r\n   * 给 DOM 节点添加名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  addClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n\r\n    el.className = allClass\r\n  },\r\n  /**\r\n   * 移除 DOM 节点的 className 样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  removeClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass || !Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass = Calendar.Utils.trim(allClass.replace(className, ''))\r\n\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\n/**\r\n * 代理事件\r\n * ========================================================\r\n * 说明：代码修改至 Nicolas Gallagher 的 delegate.js\r\n * 项目 GitHub 地址：https://github.com/necolas/delegate.js\r\n * ========================================================\r\n */\r\nCalendar.Delegate = {\r\n  /**\r\n   * 绑定代理事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   * @param {Boolean} [once] - 是否只触发一次（默认值：false - 事件冒泡）\r\n   */\r\n  on (el, selector, type, callback, context, capture, /* private */ once) {\r\n    const Delegate = Calendar.Delegate\r\n    const wrapper = function (e) {\r\n      let delegateTarget = Delegate.getDelegateTarget(el, e.target, selector)\r\n\r\n      e.delegateTarget = delegateTarget\r\n\r\n      if (delegateTarget) {\r\n        if (once === true) {\r\n          Delegate.off(el, type, wrapper)\r\n        }\r\n        callback.call(context || el, e)\r\n      }\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    callback._delegateWrapper = callback\r\n    el.addEventListener(type, wrapper, capture || false)\r\n\r\n    return callback\r\n  },\r\n  /**\r\n   * 绑定只触发一次的事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  once (el, type, selector, callback, context, capture) {\r\n    Calendar.Delegate.on(el, type, selector, callback, context, capture, true)\r\n  },\r\n  /**\r\n   * 取消事件绑定\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 取消绑定（代理）事件的 DOM 节点\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  off (el, type, callback, capture) {\r\n    if (callback._delegateWrapper) {\r\n      callback = callback._delegateWrapper\r\n      delete callback._delegateWrapper\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    el.removeEventListener(type, callback, capture || false)\r\n  },\r\n  /**\r\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stop (evt) {\r\n    const Delegate = Calendar.Delegate\r\n\r\n    Delegate.stopPropagation(evt)\r\n    Delegate.preventDefault(evt)\r\n  },\r\n  /**\r\n   * 终止事件在传播过程的捕获或冒泡\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stopPropagation (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.stopPropagation) {\r\n      evt.stopPropagation()\r\n    } else {\r\n      event.cancelBubble = true\r\n    }\r\n  },\r\n  /**\r\n   * 阻止事件的默认行为\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  preventDefault (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault()\r\n    } else {\r\n      event.returnValue = false\r\n    }\r\n  },\r\n  /**\r\n   * 通过 className 获得事件代理节点的事件代理目标节点\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定事件代理的节点\r\n   * @param target - （触发事件后）事件的目标对象\r\n   * @param selector - 目标节点的类选择器\r\n   * @returns {HTMLElement|Null}\r\n   */\r\n  getDelegateTarget (el, target, selector) {\r\n    while (target && target !== el) {\r\n      if (Calendar.DOM.hasClass(target, selector.replace('.', ''))) {\r\n        return target\r\n      }\r\n\r\n      target = target.parentElement\r\n    }\r\n\r\n    return null\r\n  }\r\n}\r\n"]}