{"version":3,"sources":["calendar.js"],"names":["this","parent","options","_classCallCheck","Calendar","viewMode","time","onMonthPick","MONTHS","isLunarCalendar","DATES","isFestivalsDisplay","onYearPick","elements","wrap","header","title","switcher","prev","next","body","week","dates","months","today","minYear","data","maxYear","year","month","date","picked","day","text","fullText","onTodayPick","_createClass","startDate","key","pickMode","monthText","defaults","set","setYear","getMonth","getDate","_setYears","endDate","dateRanges","push","_createElements","length","value","_renderTitle","$header","$switcher","appendChild","$fragment","document","createDocumentFragment","$body","_renderDates","$footer","$wrap","_renderYears","years","selectorMonth","selectorYear","selectorToday","Delegate","selectorTitle","selectorPrev","selectorNext","on","selectorDate","CLICK","_nextClick","_dateClick","getEls","off","_titleClick","STYLES","footer","start","mode","arguments","undefined","$months","DOM","removeClass","addClass","CLS_HIDDEN","$week","$years","$dates","getYears","getYear","startYear","setMonth","toString","updateView","get","callback","$date","getAttribute","PICKED","$picked","pickedDates","hasClass","CLS_PICKED","getPicked","setDate","isFunction","_renderDateRanges","ranges","$month","update","$year","Utils","getToday","HIDDEN","SPACE","BODY","createElement","weekClassName","CLS_WEEK","datesClassName","CLS_DATES","monthsClassName","yearsClassName","CLS_YEARS","CLS_TODAY","NEXT","CLS_FOOTER_TIME","CLS_TIME","TIME","TEXT","CLS_MONTHS","id","className","guid","CLS_TEXT","CLS_PREV","CLS_BODY","CLS_ICON_NEXT","CLS_NEXT","CLS_FOOTER","fragment","DAYS","$title","innerHTML","WEEKEND","prevYear","nextDays","prevDays","i","CLS_DAY","CLS_WEEKEND","$day","end","prevMonth","isNext","nextMonth","isPrev","firstDateDay","days","fullDate","CLS_DATE_PREV","CLS_DATE_NEXT","CLS_CURRENT","CLS_PICKED_RANGE","lunarText","CLS_LUNAR_TEXT","CLS_FESTIVAL_TEXT","DATE","isDatesEqual","DATE_NEXT","CURRENT","$children","festival","LUNAR_TEXT","isToday","getDay","solarTerm","lunar","term","CLS_DATE","isCurrent","isPickedDate","pickedDate","_this","getRanges","$pickedDates","forEach","querySelectorAll","getWeekRanges","CLS_MONTH_NEXT","MONTH_NEXT","setAttribute","isPicked","CLS_MONTH","MONTH","nextYear","yearsStart","yearsEnd","_getYearsFragment","prevStartYear","prevEndYear","nextStartYear","CLS_YEAR","CLS_YEAR_PREV","getHours","clearTimeout","timer","CLS_DISABLED","renderTime","Date","$today","getSeconds","hours","minutes","seconds","setTimeout","$time","console","evt","$el","delegateTarget","log","val","Astronomical","getLunarDate","numbers","split","startMonth","isLeapYear","lastNumber","endMonth","endYear","begins","ONE_DAY_TO_SECONDS","beginNumber","beginTime","endTime","getTime","timeNumber","begin","setUTCFullYear","endNumber","parseInt","ends","TITLE","SWITCHER","PREV","ICON_PREV","ICON_NEXT","WEEK","DAY","0504","PICKED_RANGE","WRAP","HEADER","JD","Z","Math","F","DATE_PREV","A","YEARS","YEAR","YEAR_PREV","a","FOOTER","TODAY","FOOTER_TIME","B","C","D","E","PICKED_POINT","convertJD2CE","convertCE2JD","ce","Y","M","floor","ZODIAC","getLunarYear","HEAVENLY_STEMS","getLunarMonth","includes","getDuringDays","getLunarZodiac","lunarDate","zodiac","lunarMonth","toLunarDate","diff","total","BASE","lunarYear","isString","isArray","o","trim","element","TERMS","tagName","el","style","allClass","Array","uuid","prototype","Object","isElement","nodeName","apply","prefix","nodeType","e","str","replace","addEventListener","children","attributes","selector","childNode","child","attr","stopPropagation","type","context","capture","call","getDelegateTarget","target","wrapper","removeEventListener","_delegateWrapper","preventDefault","event","window"],"mappings":"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","file":"calendar.min.js","sourcesContent":["/**\r\n * Calendar 类\r\n */\r\nclass Calendar {\r\n  /**\r\n   * 构造函数\r\n   * ========================================================================\r\n   * @constructor\r\n   * @param options\r\n   * @returns {Calendar}\r\n   */\r\n  constructor (options) {\r\n    /**\r\n     * Calendar 控件的配置属性\r\n     * ========================================================================\r\n     */\r\n    this.attributes = {\r\n      // 日历显示的位置（DOM 节点 ID）\r\n      parent: '',\r\n      // 日历初始化显示的时间\r\n      time: '',\r\n      // 日历的试图模式：\r\n      // 0 - 日期试图（默认值）\r\n      // 1 - 月份试图\r\n      // 2 - 年代试图\r\n      viewMode: 0,\r\n      // 日历的日期选择模式\r\n      // single - 单选模式（默认值）\r\n      // multiple - 多选模式\r\n      // range - 范围选择模式\r\n      // week - 星期选择模式\r\n      pickMode: 'single',\r\n      // 是否显示农历日期\r\n      // false - 不显示（默认值）\r\n      // true - 显示\r\n      isLunarCalendar: false,\r\n      // 是否显示节日（国际节日和农历节气）\r\n      // 目前只支持国际节日\r\n      isFestivalsDisplay: false,\r\n      onDatePick: null,\r\n      onMonthPick: null,\r\n      onYearPick: null,\r\n      onTodayPick: null,\r\n      // 月份常量\r\n      MONTHS: [],\r\n      // 星期常量\r\n      DAYS: [],\r\n      // 月份天数常量\r\n      DATES: [],\r\n      // 日历控件的样式常量\r\n      STYLES: {}\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的 DOM 节点属性\r\n     * ========================================================================\r\n     */\r\n    this.elements = {\r\n      // 显示日历控件的父节点\r\n      parent: null,\r\n      // 日历控件的根节点\r\n      wrap: null,\r\n      // 日历控件的头部节点\r\n      header: null,\r\n      // 日历控件的标题节点\r\n      title: null,\r\n      // 日历控件的切换器节点\r\n      switcher: null,\r\n      // 日历控件向上切换按钮节点\r\n      prev: null,\r\n      // 日历控件向下切换按钮节点\r\n      next: null,\r\n      // 日历控件的主体内容节点\r\n      body: null,\r\n      // 日历控件的星期栏节点\r\n      week: null,\r\n      // 日历控件的日期显示节点\r\n      dates: null,\r\n      // 日历控件的月份显示节点\r\n      months: null,\r\n      // 日历控件的年代显示节点\r\n      years: null,\r\n      // 日历控件的页脚节点\r\n      footer: null,\r\n      // 日历控件的当前日期显示节点\r\n      today: null,\r\n      // 日历控件的当前时间显示节点\r\n      time: null\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的数据属性\r\n     * ========================================================================\r\n     */\r\n    this.data = {\r\n      // 日历可以显示的最小年份\r\n      minYear: 0,\r\n      // 日历可以显示的最大年份\r\n      maxYear: 0,\r\n      // 当前选中日期的年份\r\n      year: 0,\r\n      // 当前选中日期的月份\r\n      month: 0,\r\n      // 选中的日期信息\r\n      date: {\r\n        // 年份\r\n        year: 0,\r\n        // 月份\r\n        month: 0,\r\n        // 日期\r\n        date: 0,\r\n        // 星期几\r\n        day: 0,\r\n        // 日期的英文表示（格式：2019-6-2）\r\n        text: '',\r\n        // 日期的完整中文表示（格式：2019年6月2日 星期日）\r\n        fullText: ''\r\n      },\r\n      // 多选（multiple/range/week）模式下，选中的日期数据\r\n      picked: []\r\n    }\r\n\r\n    // 执行初始化操作\r\n    // 绘制界面\r\n    // 绑定事件处理器\r\n    this.initialize(options)\r\n        .render()\r\n        .addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 初始化方法\r\n   * ========================================================================\r\n   * 1. 初始化配置信息；\r\n   * 2. 初始化数据信息；\r\n   * 3. 初始化 DOM 信息（创建控件相关的 DOM 节点）；\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  initialize (options) {\r\n    let year = Calendar.getYear().value\r\n    let pickMode\r\n    let time\r\n    let month\r\n    let monthText\r\n    let dateRanges\r\n    let startDate\r\n    let endDate\r\n\r\n    // 初始化配置\r\n    this.set(Calendar.defaults)\r\n        .set(options)\r\n\r\n    time = this.get('time')\r\n    pickMode = this.get('pickMode')\r\n    month = Calendar.getMonth(time)\r\n    monthText = month.text\r\n\r\n    // 初始化数据\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        ._setYears(time)\r\n\r\n    // 初始化（多选模式）选中的时间\r\n    switch (pickMode) {\r\n      case 'multiple':\r\n        this.data.picked.push(this.getDate().text)\r\n\r\n        break\r\n      case 'range':\r\n        startDate = monthText + '-' + 1\r\n        endDate = monthText + '-' + this.get('DATES')[month.value - 1]\r\n\r\n        this.data.picked.push(startDate)\r\n        this.data.picked.push(endDate)\r\n\r\n        break\r\n      case 'week':\r\n        dateRanges = Calendar.getWeekRanges(time)\r\n        startDate = dateRanges[0]\r\n        endDate = dateRanges[dateRanges.length - 1]\r\n\r\n        this.data.picked.push(startDate)\r\n        this.data.picked.push(endDate)\r\n\r\n        break\r\n    }\r\n\r\n    this.data.minYear = year - 100\r\n    this.data.maxYear = year + 100\r\n\r\n    // 创建控件相关的 DOM 节点\r\n    this._createElements()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件界面的方法\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  render () {\r\n    let elements = this.getEls()\r\n    let $wrap = elements.wrap\r\n    let $header = elements.header\r\n    let $switcher = elements.switcher\r\n    let $body = elements.body\r\n    let $footer = elements.footer\r\n    let $fragment = document.createDocumentFragment()\r\n\r\n    // 绘制头部\r\n    this._renderTitle()\r\n    $header.appendChild(elements.title)\r\n    $switcher.appendChild(elements.prev)\r\n    $switcher.appendChild(elements.next)\r\n    $header.appendChild($switcher)\r\n\r\n    // 绘制星期栏\r\n    this._renderDays()\r\n    $body.appendChild(elements.week)\r\n\r\n    // 绘制日期\r\n    this._renderDates()\r\n    $body.appendChild(elements.dates)\r\n\r\n    // 绘制月份\r\n    this._renderMonths()\r\n    $body.appendChild(elements.months)\r\n\r\n    // 绘制年代\r\n    this._renderYears()\r\n    $body.appendChild(elements.years)\r\n\r\n    // 绘制页脚\r\n    this._renderFooter()\r\n    $footer.appendChild(elements.today)\r\n    $footer.appendChild(elements.time)\r\n\r\n    // 将主体模块绘制出来\r\n    $wrap.appendChild($header)\r\n    $wrap.appendChild($body)\r\n    $wrap.appendChild($footer)\r\n    // 将控件零时保存在文档碎片中\r\n    $fragment.appendChild($wrap)\r\n\r\n    // 一次性绘制出整个日历控件\r\n    elements.parent.appendChild($fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 给日历控件相关的 DOM 节点绑定事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  addEventListeners () {\r\n    const DOT = '.'\r\n    const STYLES = this.get('STYLES')\r\n    const CLICK = 'click'\r\n    const selectorTitle = DOT + STYLES.TITLE\r\n    const selectorPrev = DOT + STYLES.PREV\r\n    const selectorNext = DOT + STYLES.NEXT\r\n    const selectorDate = DOT + STYLES.DATE\r\n    const selectorMonth = DOT + STYLES.MONTH\r\n    const selectorYear = DOT + STYLES.YEAR\r\n    const selectorToday = DOT + STYLES.TODAY\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    // 绑定点击标题的事件处理器\r\n    Delegate.on($wrap, selectorTitle, CLICK, this._titleClick, this)\r\n    // 绑定点击向上按钮的事件处理器\r\n    Delegate.on($wrap, selectorPrev, CLICK, this._prevClick, this)\r\n    // 绑定点击向下按钮的事件处理器\r\n    Delegate.on($wrap, selectorNext, CLICK, this._nextClick, this)\r\n    // 绑定点击日期的事件处理器\r\n    Delegate.on($wrap, selectorDate, CLICK, this._dateClick, this)\r\n    // 绑定点击月份的事件处理器\r\n    Delegate.on($wrap, selectorMonth, CLICK, this._monthClick, this)\r\n    // 绑定点击年份的事件处理器\r\n    Delegate.on($wrap, selectorYear, CLICK, this._yearClick, this)\r\n    // 绑定点击今天的事件处理器\r\n    Delegate.on($wrap, selectorToday, CLICK, this._todayClick, this)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有绑定的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  removeEventListeners () {\r\n    const CLICK = 'click'\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Delegate.off($wrap, CLICK, this._titleClick)\r\n    Delegate.off($wrap, CLICK, this._prevClick)\r\n    Delegate.off($wrap, CLICK, this._nextClick)\r\n    Delegate.off($wrap, CLICK, this._dateClick)\r\n    Delegate.off($wrap, CLICK, this._monthClick)\r\n    Delegate.off($wrap, CLICK, this._yearClick)\r\n    Delegate.off($wrap, CLICK, this._todayClick)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重启日历控件\r\n   * ========================================================================\r\n   * 1. 销毁日历控件：\r\n   *    1.1 移除所有的绑定的事件处理器\r\n   *    1.2 隐藏控件\r\n   *    1.3 移除所有 DOM 节点\r\n   *    1.4 重置所有属性\r\n   * 2. 初始化控件\r\n   * 3. 绘制控件\r\n   * 4. 绑定事件处理起\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  reload (options) {\r\n    this.destroy().initialize(options).render().addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁日历控件\r\n   * ========================================================================\r\n   * 1 移除所有的绑定的事件处理器\r\n   * 2 隐藏控件\r\n   * 3 移除所有 DOM 节点\r\n   * 4 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  destroy () {\r\n    this.removeEventListeners().hide().remove().reset()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  remove () {\r\n    let elements = this.getEls()\r\n\r\n    elements.parent.removeChild(elements.wrap)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  reset () {\r\n    this.attributes = {\r\n      parent: '',\r\n      time: '',\r\n      viewMode: 0,\r\n      pickMode: 'single',\r\n      isLunarCalendar: false,\r\n      MONTHS: [],\r\n      DAYS: [],\r\n      DATES: [],\r\n      STYLES: {}\r\n    }\r\n\r\n    this.elements = {\r\n      parent: null,\r\n      wrap: null,\r\n      header: null,\r\n      title: null,\r\n      switcher: null,\r\n      prev: null,\r\n      next: null,\r\n      body: null,\r\n      week: null,\r\n      dates: null,\r\n      months: null,\r\n      years: null,\r\n      footer: null,\r\n      today: null,\r\n      time: null,\r\n      year: null,\r\n      month: null,\r\n      date: null\r\n    }\r\n\r\n    this.data = {\r\n      minYear: 0,\r\n      maxYear: 0,\r\n      years: {\r\n        start: 0,\r\n        end: 0\r\n      },\r\n      year: 0,\r\n      month: 0,\r\n      date: {\r\n        year: 0,\r\n        month: 0,\r\n        date: 0,\r\n        day: 0,\r\n        text: '',\r\n        fullText: ''\r\n      },\r\n      picked: []\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取配置信息\r\n   * ========================================================================\r\n   * @param {String} attr - 配置属性名称\r\n   * @returns {*} - 返回对应属性的值\r\n   */\r\n  get (attr) {\r\n    return this.attributes[attr]\r\n  }\r\n\r\n  /**\r\n   * 设置配置信息\r\n   * ========================================================================\r\n   * @param {Object} [options] - 配置信息对象\r\n   * @returns {Calendar}\r\n   */\r\n  set (options = {}) {\r\n    // let config = JSON.parse(JSON.stringify(options))\r\n\r\n    Object.assign(this.attributes, options)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件所有相关的 DOM 节点的对象\r\n   * ========================================================================\r\n   * @see Calendar.elements\r\n   * @returns {Object}\r\n   */\r\n  getEls () {\r\n    return this.elements\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的年份\r\n   */\r\n  getYear () {\r\n    return this.data.year\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前的年份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或数字（默认值：今年）\r\n   *                                 字符串格式：'2019'、'2019-2' 或 '2019-2-2'\r\n   *                                 数字格式：  1546300800000\r\n   * @returns {Calendar}\r\n   */\r\n  setYear (time) {\r\n    this.data.year = Calendar.getYear(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得日历控件当前显示的月份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的月份\r\n   */\r\n  getMonth () {\r\n    return this.data.month\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前显示的月份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示月份的字符串或数字（默认值：本月）\r\n   * @returns {Calendar}\r\n   */\r\n  setMonth (time) {\r\n    this.data.month = Calendar.getMonth(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @returns {Object} - 返回日历控件当前选中的日期\r\n   */\r\n  getDate () {\r\n    return this.data.date\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {Calendar}\r\n   */\r\n  setDate (time) {\r\n    this.data.date = Calendar.getDate(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份所在的年代信息\r\n   * ========================================================================\r\n   * @returns {Object} - 返回当前所在年代信息\r\n   */\r\n  getYears () {\r\n    return this.data.years\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件在多选（multiple/range/week）模式下选中的日期信息\r\n   * ========================================================================\r\n   * @returns {Array} - 返回选中的日期信息\r\n   */\r\n  getPicked () {\r\n    return this.data.picked\r\n  }\r\n\r\n  /**\r\n   * 获取某个年份的所有农历节气信息\r\n   * @param {Number} year - 年份数值\r\n   * @returns {Array}\r\n   */\r\n  getLunarSolarTerms (year) {\r\n    let TERMS = [\r\n      0,\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      5,\r\n      6,\r\n      7,\r\n      8,\r\n      9,\r\n      10,\r\n      11,\r\n      12,\r\n      13,\r\n      14,\r\n      15,\r\n      16,\r\n      17,\r\n      18,\r\n      19,\r\n      20,\r\n      21,\r\n      22,\r\n      23\r\n    ]\r\n    let terms = []\r\n\r\n    TERMS.forEach((term, i) => {\r\n      terms.push(Calendar.Astronomical.getLunarSolarTerm(year, i))\r\n    })\r\n\r\n    return terms\r\n  }\r\n\r\n  /**\r\n   * 根据试图显示模式，切换日历控件的显示模式和显示内容\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值：\r\n   *                            0 - 日期显示模式（默认值）\r\n   *                            1 - 月份显示模式\r\n   *                            2 - 年代显示模式\r\n   * @returns {Calendar}\r\n   */\r\n  update (viewMode = 0) {\r\n    this.updateViewMode(viewMode).updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新试图显示模式的配置信息\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值（默认值：0）\r\n   * @see this.update\r\n   * @returns {Calendar}\r\n   */\r\n  updateViewMode (viewMode = 0) {\r\n    let mode = viewMode\r\n\r\n    if (mode > 2) {\r\n      mode = 2\r\n    } else {\r\n      if (mode < 0) {\r\n        mode = 0\r\n      }\r\n    }\r\n\r\n    this.set({\r\n      viewMode: mode\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新日历控件的显示内容\r\n   * ========================================================================\r\n   * 1. 更新标题内容\r\n   *    1.1 日期显示模式：显示年份和月份\r\n   *    1.2 月份显示模式：显示年份\r\n   *    1.3 年份显示模式：显示年代区间信息\r\n   * 2. 更细主体内容\r\n   *    2.1 日期显示模式：隐藏年份和月份的 DOM 节点，显示星期栏和日期信息\r\n   *    2.2 月份显示模式：隐藏年份、星期栏以及日期信息\r\n   *    2.3 年份显示模式：隐藏月份 DOM 节点、星期栏以及日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  updateView () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const DOM = Calendar.DOM\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    let elements = this.getEls()\r\n    let $week = elements.week\r\n    let $dates = elements.dates\r\n    let $months = elements.months\r\n    let $years = elements.years\r\n\r\n    this._renderTitle()\r\n\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        addClass($months, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($week, CLS_HIDDEN)\r\n        removeClass($dates, CLS_HIDDEN)\r\n\r\n        // 重新绘制日期\r\n        this._repaintDates()\r\n\r\n        break\r\n      // 月份显示模式\r\n      case 1:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($months, CLS_HIDDEN)\r\n\r\n        // 重新绘制月份\r\n        this._repaintMonths()\r\n\r\n        break\r\n      // 年份显示模式\r\n      case 2:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($months, CLS_HIDDEN)\r\n\r\n        removeClass($years, CLS_HIDDEN)\r\n\r\n        // 重新绘制年份\r\n        this._repaintYears()\r\n\r\n        break\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向上翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向上翻页，显示上一个月份的日期信息\r\n   * 2. 月份显示模式：向上翻页，显示上一年的月份信息\r\n   * 3. 年份显示模式：向上翻页，显示上一个年代（10前）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  prev () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let minYear = this.data.minYear\r\n    let time\r\n\r\n    // 针对显示模式，处理相应的翻页逻辑\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        // 切换月份\r\n        month -= 1\r\n\r\n        // 到了上一年，切换年份\r\n        if (month < 1) {\r\n          month = 12\r\n          year -= 1\r\n\r\n          // 确保不小于最小可以显示的年份\r\n          if (year < minYear) {\r\n            year = minYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        // 切换年份\r\n        year -= 1\r\n\r\n        if (year < minYear) {\r\n          year = minYear\r\n        }\r\n\r\n        this.setYear(year.toString())\r\n\r\n        break\r\n      case 2:\r\n        // 切换年代\r\n        startYear -= 10\r\n\r\n        if (startYear < minYear) {\r\n          startYear = minYear + 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    // 更新显示内容\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向下翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向下翻页，显示下一个月份的日期信息\r\n   * 2. 月份显示模式：向下翻页，显示下一年的月份信息\r\n   * 3. 年份显示模式：向下翻页，显示下一个年代（10后）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  next () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let maxYear = this.data.maxYear\r\n    let time\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        month += 1\r\n\r\n        if (month > 12) {\r\n          month = 1\r\n          year += 1\r\n\r\n          if (year > maxYear) {\r\n            year = maxYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        year += 1\r\n\r\n        if (year > maxYear) {\r\n          year = maxYear\r\n        }\r\n\r\n        this.setYear(year.toString())\r\n\r\n        break\r\n      case 2:\r\n        startYear += 10\r\n\r\n        if (startYear > maxYear) {\r\n          startYear = maxYear - 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择日期\r\n   * ========================================================================\r\n   * 1. 选择了选中状态的日期：\r\n   *    1.1 星期区间和单选模式：不做任何处理\r\n   *    1.2 多选模式：取消选中 DOM 节点的选中状态，并且将选中的日期在选中信息移除\r\n   *    1.3 日期区间选择模式下：取消之前选中区间的选中样式，将当前选中的日期 DOM 节点\r\n   *        设置为选中状态。移除之前选中日期信息，并将选中日期信息保存起来\r\n   * 2. 选择了未选中状态的日期：\r\n   *    2.1 单选模式：获取选中日期信息，并用这个信息替换之前选中的信息。移除之前选中样\r\n   *        式，并设置当前选中日期的选中样式\r\n   *    2.2 多选模式：获取选中的日期信息，然后保存到选中信息中，最后设置选中日期的样式\r\n   *    2.3 日期区间选择模式下：\r\n   *    2.4 星期区间选择模式：获取当前选择日期的星期区间信息，移除之前保存的区间信息将\r\n   *        新的区间信息保存起来，移除之前的区间选中样式，并设置当前选中区间的选中样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $date - 选中的日期 DOM 节点\r\n   * @returns {*}\r\n   */\r\n  pickDate ($date) {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    const isFunction = Calendar.Utils.isFunction\r\n    let pickMode = this.get('pickMode')\r\n    let elements = this.getEls()\r\n    let time = $date.getAttribute('data-date')\r\n    let callback = this.get('onDatePick')\r\n    let $picked = null\r\n    let pickedDates\r\n\r\n    // 选择了选中状态的日期\r\n    if (hasClass($date, CLS_PICKED)) {\r\n      switch (pickMode) {\r\n        // 单选/星期选择模式\r\n        case 'single':\r\n        case 'week':\r\n          return false\r\n        // 多选模式\r\n        case 'multiple':\r\n          // 取消选中样式\r\n          removeClass($date, CLS_PICKED)\r\n          // 移除选中的日期信息\r\n          this._removePicked(time)\r\n\r\n          pickedDates = this.getPicked()\r\n\r\n          this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n          if (isFunction(callback)) {\r\n            callback(pickedDates, $date, this)\r\n          }\r\n\r\n          break\r\n        case 'range':\r\n          // 清除之前选中的数据\r\n          this.data.picked = []\r\n          // 将当前选中的日期数据保存起来\r\n          this.data.picked.push(time)\r\n\r\n          this.setDate(time)\r\n\r\n          // 绘制选中样式\r\n          elements.date = $date\r\n          this._renderDateRanges()\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n      }\r\n    } else {\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n\r\n      // 选择了未选中状态的日期\r\n      switch (pickMode) {\r\n        case 'single':\r\n          $picked = elements.date\r\n\r\n          if ($picked) {\r\n            removeClass($picked, CLS_PICKED)\r\n          }\r\n\r\n          addClass($date, CLS_PICKED)\r\n          elements.date = $date\r\n\r\n          this.setDate(time)\r\n\r\n          if (isFunction(callback)) {\r\n            callback(time, $date, this)\r\n          }\r\n\r\n          break\r\n        case 'multiple':\r\n          this.data.picked.push(time)\r\n          this.data.picked.sort()\r\n\r\n          pickedDates = this.getPicked()\r\n\r\n          this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n          addClass($date, CLS_PICKED)\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n        case 'range':\r\n          switch (this.data.picked.length) {\r\n            case 0:\r\n            case 1:\r\n              this.data.picked.push(time)\r\n\r\n              if (this.data.picked.length === 2) {\r\n                this.data.picked.sort()\r\n              }\r\n\r\n              pickedDates = this.getPicked()\r\n              this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n              elements.date = $date\r\n              this._renderDateRanges()\r\n\r\n              if (isFunction(callback)) {\r\n                callback(pickedDates, $date, this)\r\n              }\r\n\r\n              break\r\n            case 2:\r\n              this.data.picked = []\r\n              this.data.picked.push(time)\r\n\r\n              elements.date = $date\r\n              this._renderDateRanges()\r\n\r\n              break\r\n          }\r\n\r\n          break\r\n        case 'week':\r\n          let ranges = Calendar.getWeekRanges(time)\r\n\r\n          this.data.picked = []\r\n          this.data.picked.push(ranges[0])\r\n          this.data.picked.push(ranges[ranges.length - 1])\r\n\r\n          this.setDate(ranges[ranges.length - 1])\r\n\r\n          elements.date = $date\r\n          this._renderWeekRanges()\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择月份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的月份：直接切换试图模式到日期试图模式\r\n   * 2. 选择了未选中状态的月份：移除之前选中的月份的选中样式，并当前选中的月份的选中\r\n   *    样式。然后更新选中年份和月份的数据，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $month - 选中的月份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickMonth ($month) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.month\r\n    let time = $month.getAttribute('data-month')\r\n    let callback = this.get('onMonthPick')\r\n\r\n    // 点击已经选中的年份\r\n    if (DOM.hasClass($month, CLS_PICKED)) {\r\n      // 切换到月份试图模式\r\n      this.update()\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($month, CLS_PICKED)\r\n      elements.month = $month\r\n\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n          .update()\r\n    }\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, $month, this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择年份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的年份：更新选中的年份信息，并切换到月份试图模式\r\n   * 2. 选择了未选中状态的年份：移除之前选中的年份的选中样式，将当前选中的年份设为选中\r\n   *    样式，并切换到月份试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $year - 选中的年份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickYear ($year) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.year\r\n    let time = $year.getAttribute('data-year')\r\n    let callback = this.get('onYearPick')\r\n\r\n    // 点击已经选中的月份\r\n    if (DOM.hasClass($year, CLS_PICKED)) {\r\n      // 切换到日期试图模式\r\n      this.setYear(time).update(1)\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($year, CLS_PICKED)\r\n      elements.year = $year\r\n\r\n      // 更新年份并切换到月份试图\r\n      this.setYear(time)\r\n          .update(1)\r\n    }\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, $year, this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择今天\r\n   * ========================================================================\r\n   * 将今天的年份、月份以及日期信息设置为当前选中日期，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  pickToday () {\r\n    let time = Calendar.getToday().value\r\n    let callback = this.get('onTodayPick')\r\n\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        .update()\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, this.getEls().dates.querySelector('[data-date=' + time + ']'), this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  hide () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.addClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 显示日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  show () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.removeClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏/显示之间切换\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  toggle () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n\r\n    let $wrap = this.getEls().wrap\r\n\r\n    if (Calendar.DOM.hasClass($wrap, CLS_HIDDEN)) {\r\n      this.show()\r\n    } else {\r\n      this.hide()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 设置当前的年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _setYears (time) {\r\n    this.data.years = Calendar.getYears(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （多选模式）移除选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _removePicked (time) {\r\n    let pickedDates = this.getPicked()\r\n    let index = pickedDates.indexOf(time)\r\n\r\n    if (index > -1) {\r\n      pickedDates.splice(index, 1)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的各个主要 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _createElements () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_WRAP = STYLES.WRAP\r\n    const CLS_HEADER = STYLES.HEADER\r\n    const CLS_TITLE = STYLES.TITLE\r\n    const CLS_SWITCHER = STYLES.SWITCHER\r\n    const CLS_PREV = STYLES.PREV\r\n    const CLS_ICON_PREV = STYLES.ICON_PREV\r\n    const CLS_NEXT = STYLES.NEXT\r\n    const CLS_ICON_NEXT = STYLES.ICON_NEXT\r\n    const CLS_BODY = STYLES.BODY\r\n    const CLS_WEEK = STYLES.WEEK\r\n    const CLS_DATES = STYLES.DATES\r\n    const CLS_MONTHS = STYLES.MONTHS\r\n    const CLS_YEARS = STYLES.YEARS\r\n    const CLS_FOOTER = STYLES.FOOTER\r\n    const CLS_FOOTER_DATE = STYLES.FOOTER_DATE\r\n    const CLS_TODAY = STYLES.TODAY\r\n    const CLS_FOOTER_TIME = STYLES.FOOTER_TIME\r\n    const CLS_TIME = STYLES.TIME\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const SPACE = ' '\r\n    let elements = this.getEls()\r\n    let createElement = Calendar.DOM.createElement\r\n    let weekClassName = CLS_WEEK\r\n    let datesClassName = CLS_DATES\r\n    let monthsClassName = CLS_MONTHS\r\n    let yearsClassName = CLS_YEARS\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 1:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 2:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n    }\r\n\r\n    elements.parent = document.getElementById(this.get('parent'))\r\n\r\n    // wrap\r\n    elements.wrap = createElement('div', {\r\n      id: Calendar.Utils.guid('calendar'),\r\n      className: CLS_WRAP\r\n    })\r\n    // header\r\n    elements.header = createElement('div', {\r\n      className: CLS_HEADER\r\n    })\r\n    elements.title = createElement('h4', {\r\n      className: CLS_TITLE\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      })\r\n    ])\r\n    elements.switcher = createElement('div', {\r\n      className: CLS_SWITCHER\r\n    })\r\n    elements.prev = createElement('div', {\r\n      className: CLS_PREV\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      }, [\r\n        createElement('i', {\r\n          className: CLS_ICON_PREV\r\n        })\r\n      ])\r\n    ])\r\n    elements.next = createElement('div', {\r\n      className: CLS_NEXT\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      }, [\r\n        createElement('i', {\r\n          className: CLS_ICON_NEXT\r\n        })\r\n      ])\r\n    ])\r\n    // body\r\n    elements.body = createElement('div', {\r\n      className: CLS_BODY\r\n    })\r\n    elements.week = createElement('div', {\r\n      className: weekClassName\r\n    })\r\n    elements.dates = createElement('div', {\r\n      className: datesClassName\r\n    })\r\n    elements.months = createElement('div', {\r\n      className: monthsClassName\r\n    })\r\n    elements.years = createElement('div', {\r\n      className: yearsClassName\r\n    })\r\n    // footer\r\n    elements.footer = createElement('div', {\r\n      className: CLS_FOOTER\r\n    })\r\n    elements.today = createElement('div', {\r\n      className: CLS_FOOTER_DATE\r\n    }, [\r\n      createElement('p', {\r\n        className: CLS_TODAY\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        })\r\n      ])\r\n    ])\r\n    elements.time = createElement('div', {\r\n      className: CLS_FOOTER_TIME\r\n    }, [\r\n      createElement('p', {\r\n        className: CLS_TIME\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        })\r\n      ])\r\n    ])\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的标题\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderTitle () {\r\n    let $title = this.getEls().title.querySelector('.' + this.get('STYLES').TEXT)\r\n    let years = this.getYears()\r\n    let year = this.getYear()\r\n    let value = ''\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        value = Calendar.getMonth(year + '-' + this.getMonth()).fullText\r\n        break\r\n      case 1:\r\n        value = Calendar.getYear(year.toString()).text\r\n        break\r\n      case 2:\r\n        value = years.start + ' - ' + years.end\r\n        break\r\n    }\r\n\r\n    $title.innerHTML = value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的星期栏\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDays () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DAY = STYLES.DAY\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DAYS = this.get('DAYS')\r\n    const createElement = Calendar.DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    DAYS.forEach((day, i) => {\r\n      let className = i === 0 || i === DAYS.length - 1 ? CLS_DAY + ' ' + CLS_WEEKEND : CLS_DAY\r\n      let $day = createElement('div', {\r\n        className: className\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          day\r\n        ])\r\n      ])\r\n\r\n      fragment.appendChild($day)\r\n    })\r\n\r\n    this.getEls().week.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDates () {\r\n    const DATES = this.get('DATES')\r\n    const isLeapYear = Calendar.isLeapYear\r\n    // fragments\r\n    let fragment = document.createDocumentFragment()\r\n    // current month\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let days = DATES[month - 1]\r\n    let firstDateDay = Calendar.getDay(year + '-' + month + '-' + 1).value\r\n    // prev month\r\n    let prevYear = month - 2 < 0 ? year - 1 : year\r\n    let prevMonth = month - 2 < 0 ? 12 : month - 1\r\n    let prevDays = DATES[prevMonth - 1]\r\n    // next month\r\n    let nextYear = month === 12 ? year + 1 : year\r\n    let nextMonth = month === 12 ? 1 : month + 1\r\n    let nextDays\r\n\r\n    if (isLeapYear(prevYear) && prevMonth === 2) {\r\n      prevDays += 1\r\n    }\r\n\r\n    if (isLeapYear(year) && month === 2) {\r\n      days += 1\r\n    }\r\n\r\n    nextDays = 42 - (firstDateDay + days)\r\n\r\n    if (firstDateDay !== 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: prevYear,\r\n        month: prevMonth,\r\n        start: prevDays - (firstDateDay - 1),\r\n        end: prevDays,\r\n        isPrev: true,\r\n        isNext: false\r\n      }))\r\n    }\r\n\r\n    fragment.appendChild(this._getDatesFragment({\r\n      year: year,\r\n      month: month,\r\n      start: 1,\r\n      end: days,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n\r\n    if (nextDays > 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: nextYear,\r\n        month: nextMonth,\r\n        start: 1,\r\n        end: nextDays,\r\n        isPrev: false,\r\n        isNext: true\r\n      }))\r\n    }\r\n\r\n    this.getEls().dates.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintDates () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $dates = this.getEls().dates\r\n\r\n    DOM.addClass($dates, CLS_HIDDEN)\r\n    $dates.innerHTML = ''\r\n    DOM.removeClass($dates, CLS_HIDDEN)\r\n\r\n    this._renderDates()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得绘制日期信息时的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.year - 年份\r\n   * @param {Number} options.month - 月份\r\n   * @param {Number} options.start - 开始的日期\r\n   * @param {Number} options.end - 结束的日期\r\n   * @param {Boolean} options.isPrev - 是否为上个月的日期\r\n   * @param {Boolean} options.isNext - 是否为下个月的日期\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getDatesFragment (options) {\r\n    const {year, month, start, end, isPrev, isNext} = options\r\n    const SPACE = ' '\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DATE = STYLES.DATE\r\n    const CLS_DATE_PREV = STYLES.DATE_PREV\r\n    const CLS_DATE_NEXT = STYLES.DATE_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const CLS_LUNAR_TEXT = STYLES.LUNAR_TEXT\r\n    const CLS_FESTIVAL_TEXT = STYLES.FESTIVAL_TEXT\r\n    const createElement = Calendar.DOM.createElement\r\n    const isDatesEqual = Calendar.isDatesEqual\r\n    const isLunarCalendar = this.get('isLunarCalendar')\r\n    const isFestivalsDisplay = this.get('isFestivalsDisplay')\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let date = start\r\n    let pickMode = this.get('pickMode')\r\n    let pickedDates = this.getPicked()\r\n\r\n    for (; date <= end; date += 1) {\r\n      let fullDate = year + '-' + month + '-' + date\r\n      let isCurrent = Calendar.isToday(fullDate)\r\n      let day = Calendar.getDay(fullDate)\r\n      let festival = isFestivalsDisplay ? Calendar.getFestival(month, date) : ''\r\n      let $children = [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          date\r\n        ])\r\n      ]\r\n      let className = ''\r\n      let lunarText = Calendar.getDate(fullDate).lunar.text\r\n      let solarTerm\r\n      let $date\r\n\r\n      // 显示节日\r\n      if (festival) {\r\n        // 显示节日时，就不显示该日的农历日期了\r\n        $children.push(createElement('span', {\r\n          className: CLS_FESTIVAL_TEXT\r\n        }, [\r\n          festival\r\n        ]))\r\n      } else {\r\n        // 显示农历日期\r\n        if (isLunarCalendar) {\r\n          solarTerm = this.getLunarSolarTerms(year).filter((term) => {\r\n            return Calendar.isEqual(term.value, fullDate)\r\n          })\r\n\r\n          // 有公历的节日，显示公历节日\r\n          if (festival) {\r\n            lunarText = festival\r\n          }\r\n\r\n          // 有农历节气，显示农历节气（如果公历节日和农历节气在同一天，目前显示农历节气）\r\n          if (solarTerm.length > 0) {\r\n            lunarText = solarTerm[0].text\r\n          }\r\n\r\n          $children.push(createElement('span', {\r\n            className: CLS_LUNAR_TEXT\r\n          }, [\r\n            lunarText\r\n          ]))\r\n        }\r\n      }\r\n\r\n      $date = createElement('div', {\r\n        'data-date': fullDate\r\n      }, $children)\r\n\r\n      className += CLS_DATE\r\n\r\n      if (isPrev) {\r\n        className += (SPACE + CLS_DATE_PREV)\r\n      } else {\r\n        if (isNext) {\r\n          className += (SPACE + CLS_DATE_NEXT)\r\n        }\r\n      }\r\n\r\n      // 当前（今天）的日期\r\n      if (isCurrent) {\r\n        className += (SPACE + CLS_CURRENT)\r\n      }\r\n\r\n      // 周末\r\n      if (day.value === 0 || day.value === 6) {\r\n        className += (SPACE + CLS_WEEKEND)\r\n      }\r\n\r\n      switch (pickMode) {\r\n        // 单选模式\r\n        case 'single':\r\n          let pickedDate = this.getDate().text\r\n          let isPickedDate = isDatesEqual(fullDate, pickedDate)\r\n\r\n          if (isPickedDate) {\r\n            className += (SPACE + CLS_PICKED)\r\n            elements.date = $date\r\n          }\r\n          break\r\n        // 多选模式\r\n        case 'multiple':\r\n          pickedDates.forEach((picked) => {\r\n            let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n            if (isPicked) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          })\r\n\r\n          break\r\n        // 区间模式\r\n        case 'range':\r\n        case 'week':\r\n          let dateRanges = []\r\n\r\n          // 只有选中了两个节点，才绘制选中日期区间的样式\r\n          if (pickedDates.length === 2) {\r\n            dateRanges = Calendar.getRanges(pickedDates[0], pickedDates[1])\r\n\r\n            dateRanges.forEach((picked, i) => {\r\n              let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n              if (!isPicked) {\r\n                return false\r\n              }\r\n\r\n              // 设置中间日期的样式\r\n              if (i !== 0 && i !== (dateRanges.length - 1)) {\r\n                className += (SPACE + CLS_PICKED)\r\n                className += (SPACE + CLS_PICKED_RANGE)\r\n              } else {\r\n                if (i === 0 || i === dateRanges.length - 1) {\r\n                  className += (SPACE + CLS_PICKED)\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            if (pickedDates.length === 1) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          }\r\n\r\n          break\r\n      }\r\n\r\n      $date.className = className\r\n\r\n      fragment.appendChild($date)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的日期区间选中样式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDateRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $date = this.elements.date\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n\r\n    switch (this.data.picked.length) {\r\n      case 1:\r\n        $pickedDates.forEach(($picked) => {\r\n          removeClass($picked, CLS_PICKED)\r\n\r\n          if (hasClass($picked, CLS_PICKED_RANGE)) {\r\n            removeClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        addClass($date, CLS_PICKED)\r\n\r\n        break\r\n      case 2:\r\n        let ranges = Calendar.getRanges(this.data.picked[0], this.data.picked[1])\r\n\r\n        ranges.forEach((picked, i) => {\r\n          let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n          if (i > 0 && i < ranges.length - 1) {\r\n            addClass($picked, CLS_PICKED)\r\n            addClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        addClass($date, CLS_PICKED)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的星期区间\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderWeekRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n    let picked = this.getPicked()\r\n    let ranges = Calendar.getWeekRanges(picked[0])\r\n\r\n    // 移除之前选中区域的样式\r\n    $pickedDates.forEach(($picked) => {\r\n      removeClass($picked, CLS_PICKED_RANGE)\r\n      removeClass($picked, CLS_PICKED)\r\n    })\r\n\r\n    // 设置新的选中区域的样式\r\n    ranges.forEach((picked, i) => {\r\n      let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n      if (i > 0 && i < ranges.length - 1) {\r\n        addClass($picked, CLS_PICKED)\r\n        addClass($picked, CLS_PICKED_RANGE)\r\n      } else {\r\n        if (i === 0 || i === ranges.length - 1) {\r\n          addClass($picked, CLS_PICKED)\r\n        }\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderMonths () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_MONTH = STYLES.MONTH\r\n    const CLS_MONTH_NEXT = STYLES.MONTH_NEXT\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const MONTHS = this.get('MONTHS')\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    const setAttribute = DOM.setAttribute\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let year = this.getYear()\r\n    let today = Calendar.getToday()\r\n\r\n    MONTHS.forEach((MONTH, i) => {\r\n      let pickedDate = this.getDate()\r\n      let isCurrent = (year === today.year && MONTH === today.month)\r\n      let isPicked = (year === pickedDate.year && MONTH === pickedDate.month)\r\n      let nextYear = year + 1\r\n      let className = CLS_MONTH\r\n      let $month = createElement('div', {\r\n        'data-month': year + '-' + MONTH\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          MONTH\r\n        ])\r\n      ])\r\n\r\n      // 当前（今天）的年份\r\n      if (isCurrent) {\r\n        className += ' ' + CLS_CURRENT\r\n      }\r\n\r\n      // 下一年的月份\r\n      if (i >= 12) {\r\n        className += ' ' + CLS_MONTH_NEXT\r\n        setAttribute($month, 'data-month', nextYear + '-' + MONTH)\r\n      }\r\n      else {\r\n        // 选中的月份\r\n        if (isPicked) {\r\n          className += ' ' + CLS_PICKED\r\n          elements.month = $month\r\n        }\r\n      }\r\n\r\n      $month.className = className\r\n\r\n      fragment.appendChild($month)\r\n    })\r\n\r\n    elements.months.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintMonths () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $months = this.getEls().months\r\n\r\n    DOM.addClass($months, CLS_HIDDEN)\r\n    $months.innerHTML = ''\r\n    DOM.removeClass($months, CLS_HIDDEN)\r\n\r\n    this._renderMonths()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderYears () {\r\n    let years = this.getYears()\r\n    let yearsStart = years.start\r\n    let yearsEnd = years.end\r\n    let prevStartYear = yearsStart - 3\r\n    let prevEndYear = yearsStart - 1\r\n    let nextStartYear = yearsEnd + 1\r\n    let nextEndYear = yearsEnd + 3\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: prevStartYear,\r\n      end: prevEndYear,\r\n      isPrev: true,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: yearsStart,\r\n      end: yearsEnd,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: nextStartYear,\r\n      end: nextEndYear,\r\n      isPrev: false,\r\n      isNext: true\r\n    }))\r\n\r\n    this.getEls().years.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintYears () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $years = this.getEls().years\r\n\r\n    DOM.addClass($years, CLS_HIDDEN)\r\n    $years.innerHTML = ''\r\n    DOM.removeClass($years, CLS_HIDDEN)\r\n\r\n    this._renderYears()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取绘制年份信息的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.start - 开始年份\r\n   * @param {Number} options.end - 结束年份\r\n   * @param {Boolean} options.isPrev - 是否为上个年代的年份\r\n   * @param {Boolean} options.isNext - 是否为下个年带的年份\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getYearsFragment (options) {\r\n    const {start, end, isPrev, isNext} = options\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_YEAR = STYLES.YEAR\r\n    const CLS_YEAR_PREV = STYLES.YEAR_PREV\r\n    const CLS_YEAR_NEXT = STYLES.YEAR_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_DISABLED = STYLES.DISABLED\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let minYear = this.data.minYear\r\n    let maxYear = this.data.maxYear\r\n    let year = start\r\n\r\n    for (; year <= end; year += 1) {\r\n      let pickedDate = this.getDate()\r\n      let isCurrent = (year === Calendar.getToday().year)\r\n      let isPicked = (year === pickedDate.year)\r\n      let className = CLS_YEAR\r\n      let $year = createElement('div', {\r\n        'data-year': year\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          year\r\n        ])\r\n      ])\r\n\r\n      if (isPrev) {\r\n        className += ' ' + CLS_YEAR_PREV\r\n      } else {\r\n        if (isNext) {\r\n          className += ' ' + CLS_YEAR_NEXT\r\n        }\r\n      }\r\n\r\n      if (isCurrent) {\r\n        className += ' ' + CLS_CURRENT\r\n      }\r\n\r\n      if (isPicked) {\r\n        className += ' ' + CLS_PICKED\r\n        elements.year = $year\r\n      }\r\n\r\n      if (year < minYear || year > maxYear) {\r\n        className += ' ' + CLS_DISABLED\r\n      }\r\n\r\n      $year.className = className\r\n\r\n      fragment.appendChild($year)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的页脚\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderFooter () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_TEXT = STYLES.TEXT\r\n    let elements = this.getEls()\r\n    let $today = elements.today.querySelector('.' + CLS_TEXT)\r\n    let $time = elements.time.querySelector('.' + CLS_TEXT)\r\n    let today = Calendar.getToday()\r\n    let timer = null\r\n\r\n    let renderTime = () => {\r\n      let time = new Date()\r\n      let hours = time.getHours()\r\n      let minutes = time.getMinutes()\r\n      let seconds = time.getSeconds()\r\n\r\n      if (timer) {\r\n        clearTimeout(timer)\r\n      }\r\n\r\n      if (hours < 10) {\r\n        hours = '0' + hours\r\n      }\r\n\r\n      if (minutes < 10) {\r\n        minutes = '0' + minutes\r\n      }\r\n\r\n      if (seconds < 10) {\r\n        seconds = '0' + seconds\r\n      }\r\n\r\n      $time.innerHTML = hours + ':' + minutes + ':' + seconds\r\n\r\n      timer = setTimeout(renderTime, 1000)\r\n    }\r\n\r\n    $today.innerHTML = '今天：' + today.text\r\n    Calendar.DOM.setAttribute($today, 'data-date', today.value)\r\n\r\n    renderTime()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击标题的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _titleClick () {\r\n    let viewMode = this.get('viewMode')\r\n\r\n    viewMode += 1\r\n\r\n    if (viewMode > 2) {\r\n      viewMode = 2\r\n    }\r\n\r\n    this.update(viewMode)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向上翻页的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _prevClick () {\r\n    this.prev()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向下翻页的事件处理起\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _nextClick () {\r\n    this.next()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击日期的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _dateClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-date')\r\n    let picked\r\n\r\n    this.pickDate($el)\r\n\r\n    picked = this.getPicked()\r\n\r\n    console.log('------------- _dateClick -------------')\r\n    if (this.get('pickMode') === 'single') {\r\n      console.log(time)\r\n    } else {\r\n      console.log(picked)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击月份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _monthClick (evt) {\r\n    let $month = evt.delegateTarget\r\n    let time = $month.getAttribute('data-month')\r\n\r\n    this.pickMonth($month)\r\n\r\n    console.log('------------- _monthClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击年份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _yearClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-year')\r\n\r\n    this.pickYear($el)\r\n\r\n    console.log('------------- _yearClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击今天的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _todayClick () {\r\n    let elements = this.getEls()\r\n    let time = Calendar.getToday().text\r\n\r\n    this.pickToday()\r\n\r\n    // 触发日期选择逻辑\r\n    this.pickDate(elements.dates.querySelector('[data-date=\"' + time + '\"]'))\r\n\r\n    console.log('------------- _todayClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得年份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{value: (Number|{value, text, fullText}), text: string, fullText: string}}\r\n   */\r\n  static getYear (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = time.getFullYear()\r\n\r\n    return {\r\n      value: year,\r\n      text: year.toString(),\r\n      fullText: year + '年'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取月份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示月份的字符串或者数字（默认值：本月）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getMonth (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = Calendar.getYear(val)\r\n    let month = time.getMonth()\r\n\r\n    month += 1\r\n\r\n    return {\r\n      value: month,\r\n      text: year.text + '-' + month,\r\n      fullText: year.fullText + month + '月'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getDate (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = Calendar.getYear(val)\r\n    let month = Calendar.getMonth(val)\r\n    let date = time.getDate()\r\n    let day = Calendar.getDay(val)\r\n    let fullDate = year.value + '-' + month.value + '-' + date\r\n    let text = month.fullText + date + '日'\r\n\r\n    return {\r\n      year: year.value,\r\n      month: month.value,\r\n      date: date,\r\n      day: day.value,\r\n      text: fullDate,\r\n      fullText: text + ' ' + day.fullText,\r\n      lunar: Calendar.Astronomical.getLunarDate(fullDate)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取星期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getDay (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let day = time.getDay()\r\n    let text = Calendar.defaults.DAYS[day]\r\n\r\n    return {\r\n      value: day,\r\n      text: text,\r\n      fullText: '星期' + text\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取今天的日期信息\r\n   * ========================================================================\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getToday () {\r\n    return Calendar.getDate()\r\n  }\r\n\r\n  /**\r\n   * 获取年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{start: (number|Number|{value, text}), end: (*|number)}}\r\n   */\r\n  static getYears (val) {\r\n    let year = Calendar.getYear(val).value\r\n    let numbers = year.toString().split('')\r\n    let lastNumber = parseInt(numbers[numbers.length - 1], 10)\r\n    let yearsStart = 0\r\n    let yearsEnd = 0\r\n\r\n    if (lastNumber === 0) {\r\n      yearsStart = year\r\n      yearsEnd = year + 9\r\n    } else {\r\n      if (lastNumber === 9) {\r\n        yearsStart = year - 9\r\n        yearsEnd = year\r\n      } else {\r\n        yearsStart = year - lastNumber\r\n        yearsEnd = year + (9 - lastNumber)\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: yearsStart,\r\n      end: yearsEnd\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期所属的整个星期的日期区间信息\r\n   * ========================================================================\r\n   * @param {String} time - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getWeekRanges (time) {\r\n    const DATES = Calendar.defaults.DATES\r\n    const isLeapYear = Calendar.isLeapYear\r\n    let day = Calendar.getDay(time).value\r\n    let begins = time.split('-')\r\n    let year = parseInt(begins[0], 10)\r\n    let month = parseInt(begins[1], 10)\r\n    let date = parseInt(begins[2], 10)\r\n    let days = DATES[month - 1]\r\n    let startYear = year\r\n    let startMonth = month\r\n    let startDate = date - day\r\n    let endYear = year\r\n    let endMonth = month\r\n    let endDate = date + (6 - day)\r\n    let prevMonth = 0\r\n\r\n    // 闰年2月为29天，默认值为28天，所以需要+1天\r\n    if (isLeapYear(year) && month === 2) {\r\n      days += 1\r\n    }\r\n\r\n    if (startDate < 1) {\r\n      // 上一个月\r\n      prevMonth = month - 2\r\n      startMonth -= 1\r\n\r\n      if (prevMonth < 0) {\r\n        startYear -= 1\r\n        startMonth = 12\r\n        startDate = DATES[11] + startDate\r\n      } else {\r\n        // 开始日期\r\n        startDate = DATES[prevMonth] + startDate\r\n      }\r\n    }\r\n\r\n    if (endDate > days) {\r\n      endMonth += 1\r\n\r\n      // 结束日期\r\n      endDate = endDate - days\r\n\r\n      if (prevMonth > 11) {\r\n        endYear += 1\r\n        endMonth = 1\r\n      }\r\n    }\r\n\r\n    return Calendar.getRanges((startYear + '-' + startMonth + '-' + startDate), (endYear + '-' + endMonth + '-' + endDate))\r\n  }\r\n\r\n  /**\r\n   * 获取两个日期之间的所有日期信息\r\n   * ========================================================================\r\n   * @param {String} begin - 表示日期的字符串\r\n   * @param {String} end - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getRanges (begin, end) {\r\n    const ONE_DAY_TO_SECONDS = 24 * 60 * 60 * 1000\r\n    let ranges = []\r\n    let begins = begin.split('-')\r\n    let ends = end.split('-')\r\n    let beginTime = new Date()\r\n    let endTime = new Date()\r\n    let beginNumber\r\n    let endNumber\r\n    let timeNumber\r\n\r\n    beginTime.setUTCFullYear(parseInt(begins[0], 10), parseInt(begins[1], 10) - 1, parseInt(begins[2], 10))\r\n    endTime.setUTCFullYear(parseInt(ends[0], 10), parseInt(ends[1], 10) - 1, parseInt(ends[2], 10))\r\n\r\n    beginNumber = beginTime.getTime()\r\n    endNumber = endTime.getTime()\r\n    timeNumber = beginNumber\r\n\r\n    for (; timeNumber <= endNumber; timeNumber += ONE_DAY_TO_SECONDS) {\r\n      ranges.push(Calendar.getDate(timeNumber).text)\r\n    }\r\n\r\n    return ranges\r\n  }\r\n\r\n  /**\r\n   * 获取日期的节日文本\r\n   * ========================================================================\r\n   * @param {Number} month - 月份的数值\r\n   * @param {Number} date - 日期的数值\r\n   * @returns {String}\r\n   */\r\n  static getFestival (month, date) {\r\n    let monthProp = month < 10 ? '0' + month : month.toString()\r\n    let dateProp = date < 10 ? '0' + date : date.toString()\r\n\r\n    return Calendar.defaults.FESTIVALS[monthProp + dateProp] || ''\r\n  }\r\n\r\n  /**\r\n   * 判断是否为闰年\r\n   * ========================================================================\r\n   * @param {Number} year - 年份数值\r\n   * @returns {boolean}\r\n   */\r\n  static isLeapYear (year) {\r\n    return ((year % 4 === 0) || (year % 400 === 0)) && (year % 100 !== 0)\r\n  }\r\n\r\n  /**\r\n   * 判断是否为今天\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {*}\r\n   */\r\n  static isToday (time) {\r\n    return Calendar.isDatesEqual(time)\r\n  }\r\n\r\n  /**\r\n   * 判断两个日期是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} dateOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} [dateTwo] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {boolean}\r\n   */\r\n  static isDatesEqual (dateOne, dateTwo) {\r\n    const getDate = Calendar.getDate\r\n\r\n    return Calendar.isEqual(getDate(dateOne).text, getDate(dateTwo).text)\r\n  }\r\n\r\n  /**\r\n   * 判断两个时间是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} timeOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} timeTwo - 表示日期的字符串或者数字\r\n   * @returns {boolean}\r\n   */\r\n  static isEqual (timeOne, timeTwo) {\r\n    return new Date(timeOne).getTime() === new Date(timeTwo).getTime()\r\n  }\r\n}\r\n\r\n/**\r\n * 日历控件默认的配置信息\r\n * ========================================================================\r\n */\r\nCalendar.defaults = {\r\n  parent: 'calendar',\r\n  time: '',\r\n  // 0 - 日期显示模式（默认值）\r\n  // 1 - 月份显示模式\r\n  // 2 - 年代显示模式\r\n  viewMode: 0,\r\n  // single - 单选（默认值）\r\n  // multiple - 多选\r\n  // range - 范围多选\r\n  // week - 整个星期选择\r\n  pickMode: 'single',\r\n  // 是否显示农历日期\r\n  isLunarCalendar: false,\r\n  // 是否显示节日（国际节日和农历节气）\r\n  // 目前只支持国际节日\r\n  isFestivalsDisplay: false,\r\n  onDatePick: null,\r\n  onMonthPick: null,\r\n  onYearPick: null,\r\n  onTodayPick: null,\r\n  FESTIVALS: {\r\n    '0101': '元旦',\r\n    '0214': '情人节',\r\n    '0308': '妇女节',\r\n    '0312': '植树节',\r\n    '0401': '愚人节',\r\n    '0501': '劳动节',\r\n    '0504': '青年节',\r\n    '0512': '护士节',\r\n    '0601': '儿童节',\r\n    '0701': '建党节',\r\n    '0801': '建军节',\r\n    '0910': '教师节',\r\n    '1001': '国庆节',\r\n    '1224': '平安夜',\r\n    '1225': '圣诞节'\r\n  },\r\n  MONTHS: [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n  ],\r\n  DAYS: [\r\n    '日',\r\n    '一',\r\n    '二',\r\n    '三',\r\n    '四',\r\n    '五',\r\n    '六'\r\n  ],\r\n  DATES: [\r\n    31,\r\n    28,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31\r\n  ],\r\n  STYLES: {\r\n    WRAP: 'cal-md',\r\n    HEADER: 'cal-hd',\r\n    TITLE: 'cal-title',\r\n    SWITCHER: 'cal-switcher',\r\n    PREV: 'cal-prev',\r\n    ICON_PREV: 'icon-angle-up',\r\n    NEXT: 'cal-next',\r\n    ICON_NEXT: 'icon-angle-down',\r\n    BODY: 'cal-bd',\r\n    WEEK: 'cal-week',\r\n    WEEKEND: 'cal-weekend',\r\n    DAY: 'cal-day',\r\n    DATES: 'cal-dates',\r\n    DATE: 'cal-date',\r\n    DATE_PREV: 'cal-date-prev',\r\n    DATE_NEXT: 'cal-date-next',\r\n    MONTHS: 'cal-months',\r\n    MONTH: 'cal-month',\r\n    MONTH_NEXT: 'cal-month-next',\r\n    YEARS: 'cal-years',\r\n    YEAR: 'cal-year',\r\n    YEAR_PREV: 'cal-year-prev',\r\n    YEAR_NEXT: 'cal-year-next',\r\n    FOOTER: 'cal-ft',\r\n    FOOTER_DATE: 'cal-ft-date',\r\n    TODAY: 'cal-today',\r\n    FOOTER_TIME: 'cal-ft-time',\r\n    TIME: 'cal-time',\r\n    TEXT: 'cal-text',\r\n    LUNAR_TEXT: 'cal-lunar-text',\r\n    FESTIVAL_TEXT: 'cal-festival-text',\r\n    CURRENT: 'cal-current',\r\n    PICKED: 'cal-picked',\r\n    PICKED_RANGE: 'cal-picked-range',\r\n    PICKED_POINT: 'cal-picked-point',\r\n    DISABLED: 'cal-disabled',\r\n    HIDDEN: 'cal-hidden'\r\n  }\r\n}\r\n\r\n/**\r\n * 计算农历相关信息的（天文）算法\r\n * ========================================================================\r\n */\r\nCalendar.Astronomical = {\r\n  /**\r\n   * 将儒略日期转化为公历（格里高利历）日期\r\n   * ========================================================================\r\n   * @param {Number} JD - 表示儒略日期的数值\r\n   * @returns {{year: number, month: number, date: number}}\r\n   */\r\n  convertJD2CE: (JD) => {\r\n    let A\r\n    let B\r\n    let C\r\n    let D\r\n    let E\r\n    let F\r\n    let Z\r\n    let a\r\n    let year\r\n    let month\r\n    let date\r\n\r\n    // 由于儒略日的历元为正午12时，公历历元为半夜12时，为统一计算，将儒略历历元前推至0.5日。即为：JD = JD + 0.5\r\n    JD += 0.5\r\n\r\n    // 儒略日整数部分为日数，小数部分为时刻，只对整数部分进行运算\r\n    // Z即为所求日到-4712年0时的日数\r\n    Z = Math.floor(JD)\r\n    F = JD - Z\r\n\r\n    // 儒略历\r\n    // 由于儒略历和格里历的岁长不同，需分别处理。即自1582年10月15日0时前适用儒略历（岁长365.25），\r\n    // 此后适用格里历（岁长365.2425）。\r\n    if (Z < 2299161) {\r\n      A = Z\r\n    } else {\r\n      // 格里历\r\n      // 为统一计算，可将格里历转换为儒略历，即假设自-4712年1月1日0时起一直使用的是儒略历。\r\n      // 则针对格里历相对儒略历少置闰（400年3闰）的部分给予补上。由于格里历的历元符合新增置闰规则的年份，\r\n      // 可将历元推至符合400年置闰周期的近距，即1600年1月1日，根据儒略日计算公式，得该日的儒略日为2305447.5。\r\n      a = Math.floor((Z - 2305447.5) / 36524.25)\r\n      // 再补上1582年10月4日到10月15日跳过的10天，即为自-4712年1月1日0时到所求日以儒略历计算的总积日\r\n      A = Z + 10 + a - Math.floor(a / 4)\r\n    }\r\n\r\n    // 为避免对负数取整的情况，将历元前推至-4716年3月1日0时，需补上相差的日数，合1524日\r\n    B = A + 1524\r\n    // 对所得的积日（儒略历），除以岁长，即为积年（表达式C）\r\n    C = parseInt((B - 122.1) / 365.25)\r\n    // 其中整数部分为年的积日（表达式D）\r\n    D = parseInt(365.25 * C)\r\n    E = parseInt((B - D) / 30.6)\r\n    // 将B-D除以每月平均日数30.6为积月（表达式E），其中整数部分为月数，小数部分为日数（date）\r\n    date = Math.round(B - D - parseInt(30.6 * E) + F)\r\n\r\n    // 最后调整岁首的情况可得month和year\r\n    if (E < 14) {\r\n      month = E - 1\r\n    } else {\r\n      if (E < 16) {\r\n        month = E - 13\r\n      }\r\n    }\r\n\r\n    if (month > 2) {\r\n      year = C - 4716\r\n    } else {\r\n      if ([\r\n        1,\r\n        2\r\n      ].includes(month)) {\r\n        year = C - 4715\r\n      }\r\n    }\r\n\r\n    return {\r\n      year,\r\n      month,\r\n      date,\r\n      value: year + '-' + month + '-' + date,\r\n      text: year + '年' + month + '月' + date + '日'\r\n    }\r\n  },\r\n  /**\r\n   * 将公历（格里高利历）日期转化为儒略日期\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的数值\r\n   * @returns {number}\r\n   */\r\n  convertCE2JD: (time) => {\r\n    let ce = Calendar.getDate(time)\r\n    let year = ce.year\r\n    let month = ce.month\r\n    let date = ce.date\r\n    let M = 0\r\n    let Y = 0\r\n    let B = 0\r\n    let JD\r\n\r\n    if ([\r\n      1,\r\n      2\r\n    ].includes(month)) {\r\n      M = month + 12\r\n      Y = year - 1\r\n    } else {\r\n      Y = year\r\n      M = month\r\n    }\r\n\r\n    if (Y > 1582 || (Y === 1582 && M > 10) || (Y === 1582 && M === 10 && date >= 15)) {\r\n      // 公元1582年10月15日以后每400年减少3闰\r\n      B = 2 - parseInt(Y / 100) + parseInt(Y / 400)\r\n    }\r\n\r\n    JD = Math.floor(365.25 * (Y + 4716)) + parseInt(30.6 * (M + 1)) + date + B - 1524.5\r\n\r\n    return JD\r\n  },\r\n  /**\r\n   * 将公历年份转化为农历对应的生肖年\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示时间的字符串或者数值\r\n   * @returns {string}\r\n   */\r\n  getLunarZodiac: (time) => {\r\n    const ZODIAC = [\r\n      '鼠',\r\n      '牛',\r\n      '虎',\r\n      '兔',\r\n      '龙',\r\n      '蛇',\r\n      '马',\r\n      '羊',\r\n      '猴',\r\n      '鸡',\r\n      '狗',\r\n      '猪'\r\n    ]\r\n    let diff = new Date(time).getFullYear() - 1864\r\n\r\n    return ZODIAC[diff % 12]\r\n  },\r\n  /**\r\n   * 将公历年份转化为农历年份\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示时间的字符串或者数值\r\n   * @returns {string}\r\n   */\r\n  getLunarYear: (time) => {\r\n    const HEAVENLY_STEMS = [\r\n      '甲',\r\n      '乙',\r\n      '丙',\r\n      '丁',\r\n      '戊',\r\n      '己',\r\n      '庚',\r\n      '辛',\r\n      '壬',\r\n      '癸'\r\n    ]\r\n    const EARTHLY_BRANCHES = [\r\n      '子',\r\n      '丑',\r\n      '寅',\r\n      '卯',\r\n      '辰',\r\n      '巳',\r\n      '午',\r\n      '未',\r\n      '申',\r\n      '酉',\r\n      '戌',\r\n      '亥'\r\n    ]\r\n    let diff = new Date(time).getFullYear() - 1864\r\n\r\n    return HEAVENLY_STEMS[diff % 10] + EARTHLY_BRANCHES[diff % 12]\r\n  },\r\n\r\n  getLunarMonth: (time) => {\r\n    const MONTHS = [\r\n      '正',\r\n      '二',\r\n      '三',\r\n      '四',\r\n      '五',\r\n      '六',\r\n      '七',\r\n      '八',\r\n      '九',\r\n      '十',\r\n      '冬',\r\n      '腊'\r\n    ]\r\n    let month = new Date(time).getMonth() - 1\r\n\r\n    // 到了上一年的腊月\r\n    if (month < 0) {\r\n      month = 11\r\n    }\r\n\r\n    return MONTHS[month] + '月'\r\n  },\r\n  /**\r\n   * 获取公历日期的农历日期\r\n   * ========================================================================\r\n   * @param time\r\n   */\r\n  getLunarDate: (time) => {\r\n    const DATES = {\r\n      PREFIX: [\r\n        '初',\r\n        '十',\r\n        '廿'\r\n      ],\r\n      NUMBERS: [\r\n        '一',\r\n        '二',\r\n        '三',\r\n        '四',\r\n        '五',\r\n        '六',\r\n        '七',\r\n        '八',\r\n        '九',\r\n        '十'\r\n      ]\r\n    }\r\n    /**\r\n     * 获得年内日期序数\r\n     * ========================================================================\r\n     * @param {String} date - 表示日期的字符串\r\n     * @returns {number}\r\n     */\r\n    const getDuringDays = (date) => {\r\n      const DATES = Calendar.defaults.DATES\r\n      let time = new Date(date)\r\n      let year = time.getFullYear()\r\n      let month = time.getMonth() + 1\r\n      let total = time.getDate()\r\n\r\n      DATES.forEach((days, i) => {\r\n        if (i < month - 1) {\r\n          if (Calendar.isLeapYear(year) && i === 1) {\r\n            days += 1\r\n          }\r\n\r\n          total += days\r\n        }\r\n      })\r\n\r\n      return total\r\n    }\r\n    /**\r\n     * 算法公式：\r\n     * ========================================================================\r\n     * 设：公元年数 － 1977（或1901）＝ 4Q ＋ R\r\n     * 则：阴历日期 = 14Q + 10.6(R+1) + 年内日期序数 - 29.5n\r\n     * （注:式中Q、R、n均为自然数，R<4）\r\n     * 例：1994年5月7日的阴历日期为：\r\n     * 1994 － 1977 ＝ 17 ＝ 4×4＋1\r\n     * 故：Q ＝ 4，R ＝ 1 则：5月7日的阴历日期为：\r\n     * 14 × 4 + 10.6(1 + 1) + (31 + 28 + 31 + 30 + 7) - 29.5n\r\n     * = 204.2- 29.5n\r\n     * 然后用 204.2 去除 29.5 得商数 6 余 27.2，6 即是 n 值，余数 27 即是阴历二十七日\r\n     * ========================================================================\r\n     * @param date\r\n     * @returns {number}\r\n     */\r\n    const toLunarDate = (date) => {\r\n      const ONE_DAY_TO_SECONDS = 24 * 60 * 60 * 1000\r\n      let time = new Date(date)\r\n      let year = time.getFullYear()\r\n      let Q = Math.floor((year - 1977) / 4)\r\n      let R = (year - 1977) % 4\r\n      let days = (14 * Q) + (10.6 * (R + 1)) + getDuringDays(date)\r\n      let lunarDate = Math.floor(days % 29.5)\r\n\r\n      if (lunarDate === 0) {\r\n        let dateBefore = new Date(date).getTime() - ONE_DAY_TO_SECONDS\r\n\r\n        // 农历只有 29 和 30 两种月份最大值\r\n        switch (toLunarDate(dateBefore)) {\r\n          case 28:\r\n            lunarDate = 29\r\n\r\n            break\r\n          case 29:\r\n            lunarDate = 30\r\n\r\n            break\r\n        }\r\n      }\r\n\r\n      return lunarDate\r\n    }\r\n    const Astronomical = Calendar.Astronomical\r\n    let date = toLunarDate(time)\r\n    let lunarYear = Astronomical.getLunarYear(time)\r\n    let lunarZodiac = Astronomical.getLunarZodiac(time)\r\n    let lunarMonth = Astronomical.getLunarMonth(time)\r\n    let lunarDate = ''\r\n    let text = ''\r\n\r\n    switch (date) {\r\n      case 10:\r\n        lunarDate = text = '初十'\r\n\r\n        break\r\n      case 20:\r\n        lunarDate = text = '二十'\r\n\r\n        break\r\n      case 30:\r\n        lunarDate = text = '三十'\r\n\r\n        break\r\n      default:\r\n        lunarDate = text = DATES.PREFIX[Math.floor(date / 10)] + DATES.NUMBERS[(date - 1) % 10] || date\r\n\r\n        if (Math.floor(date / 10) === 0 && ((date - 1) % 10) === 0) {\r\n          text = lunarMonth\r\n        }\r\n\r\n        break\r\n    }\r\n\r\n    return {\r\n      year: lunarYear,\r\n      month: lunarMonth,\r\n      date: lunarDate,\r\n      zodiac: lunarZodiac,\r\n      text: text\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 获取某年的第几个农历节气信息\r\n   * ========================================================================\r\n   * 这种推算的方法是建立在地球回归年的长度是固定365.2422天、节气的间隔是绝对固定的、\r\n   * 朔望月长度是平均的29.5305天等假设之上的，由于天体运动的互相影响，这种假设不是绝对\r\n   * 成立的，因此这种推算方法的误差较大。但我采用的是2001年的小寒数据，所以对最近几十年\r\n   * 的节气计算还是比较准的，误差应该在2小时之内。\r\n   * ========================================================================\r\n   * @param {Number} year - 年份信息\r\n   * @param {Number} i - 第几个节气（0 ~ 23）\r\n   * @returns {{value: string, text: *}}\r\n   */\r\n  getLunarSolarTerm: (year, i) => {\r\n    // 二十四个节气就是黄道上的24各点，由于地球运动受其它天体的影响，\r\n    // 导致这些节气在每年的时间是不固定的，但是这些节气之间的间隔时间\r\n    // 基本上可以看作是固定的，下表就是二十四节气的时间间隔表\r\n    const TERMS = [\r\n      {\r\n        text: '小寒',\r\n        diff: 0\r\n      },\r\n      {\r\n        text: '大寒',\r\n        diff: 1272494.40\r\n      },\r\n      {\r\n        text: '立春',\r\n        diff: 2548020.60\r\n      },\r\n      {\r\n        text: '雨水',\r\n        diff: 3830143.80\r\n      },\r\n      {\r\n        text: '惊蛰',\r\n        diff: 5120226.60\r\n      },\r\n      {\r\n        text: '春分',\r\n        diff: 6420865.80\r\n      },\r\n      {\r\n        text: '清明',\r\n        diff: 7732018.80\r\n      },\r\n      {\r\n        text: '谷雨',\r\n        diff: 9055272.60\r\n      },\r\n      {\r\n        text: '立夏',\r\n        diff: 10388958.00\r\n      },\r\n      {\r\n        text: '小满',\r\n        diff: 11733065.40\r\n      },\r\n      {\r\n        text: '芒种',\r\n        diff: 13084292.40\r\n      },\r\n      {\r\n        text: '夏至',\r\n        diff: 14441592.00\r\n      },\r\n      {\r\n        text: '小暑',\r\n        diff: 15800560.80\r\n      },\r\n      {\r\n        text: '大暑',\r\n        diff: 17159347.20\r\n      },\r\n      {\r\n        text: '立秋',\r\n        diff: 18513766.20\r\n      },\r\n      {\r\n        text: '处暑',\r\n        diff: 19862002.20\r\n      },\r\n      {\r\n        text: '白露',\r\n        diff: 21201005.40\r\n      },\r\n      {\r\n        text: '秋分',\r\n        diff: 22529659.80\r\n      },\r\n      {\r\n        text: '寒露',\r\n        diff: 23846845.20\r\n      },\r\n      {\r\n        text: '霜降',\r\n        diff: 25152606.00\r\n      },\r\n      {\r\n        text: '立冬',\r\n        diff: 26447687.40\r\n      },\r\n      {\r\n        text: '小雪',\r\n        diff: 27733451.40\r\n      },\r\n      {\r\n        text: '大雪',\r\n        diff: 29011921.20\r\n      },\r\n      {\r\n        text: '冬至',\r\n        diff: 30285477.60\r\n      }\r\n    ]\r\n    const Astronomical = Calendar.Astronomical\r\n    // BASE 是 2001年 小寒时刻：1月5日 14:38:00，儒略日数：2451914.5\r\n    // 该数据是南京紫金山天文台提供的数据\r\n    const BASE = 2451914.5\r\n    let JD = (365.24219878 * (year - 2001) + TERMS[i].diff / 86400.0) + BASE\r\n    let date = Astronomical.convertJD2CE(JD)\r\n\r\n    return {\r\n      value: date.value,\r\n      text: TERMS[i].text\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 常用的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.Utils = {\r\n  uuid: 0,\r\n  isString: (o) => {\r\n    return typeof o === 'string'\r\n  },\r\n  isNumber: (o) => {\r\n    return typeof o === 'number'\r\n  },\r\n  isArray: (o) => {\r\n    if (Array.isArray) {\r\n      return Array.isArray(o)\r\n    } else {\r\n      return Object.prototype.toString.apply(o) === '[object Array]'\r\n    }\r\n  },\r\n  isFunction: (o) => {\r\n    return (typeof o === 'function') || Object.prototype.toString.apply(o) === '[object Function]'\r\n  },\r\n  isElement: (o) => {\r\n    return o && o.nodeName && o.tagName && o.nodeType === 1\r\n  },\r\n  guid: (prefix) => {\r\n    let Utils = Calendar.Utils\r\n\r\n    Utils.uuid += 1\r\n\r\n    return prefix ? prefix + '-' + Utils.uuid : 'guid-' + Utils.uuid\r\n  },\r\n  trim: (str) => {\r\n    return str.replace(/^\\s+/g, '').replace(/\\s+$/g, '')\r\n  },\r\n  stripTags: (str) => {\r\n    return str.replace(/<\\/?[^>]+(>|$)/g, '')\r\n  }\r\n}\r\n\r\n/**\r\n * DOM 操作相关的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.DOM = {\r\n  /**\r\n   * 创建 DOM 节点，并添加属性和子节点\r\n   * ========================================================================\r\n   * @param {String} tagName - 标签名称\r\n   * @param {Object} attributes - 属性对象\r\n   * @param {Array} children - 子节点数组\r\n   * @returns {HTMLElement}\r\n   */\r\n  createElement: (tagName, attributes, children) => {\r\n    const Utils = Calendar.Utils\r\n    let element = document.createElement(tagName)\r\n\r\n    for (let attr in attributes) {\r\n      if (attributes.hasOwnProperty(attr)) {\r\n        Calendar.DOM.setAttribute(element, attr, attributes[attr])\r\n      }\r\n    }\r\n\r\n    if (Utils.isArray(children)) {\r\n      children.forEach((child) => {\r\n        let childNode\r\n\r\n        if (Utils.isElement(child)) {\r\n          childNode = child\r\n        } else {\r\n          if (Utils.isString(child) || Utils.isNumber(child)) {\r\n            let text = Utils.isString(child) ? Utils.trim(Utils.stripTags(child)) : child.toString()\r\n\r\n            childNode = document.createTextNode(text)\r\n          }\r\n        }\r\n\r\n        element.appendChild(childNode)\r\n      })\r\n    }\r\n\r\n    return element\r\n  },\r\n  /**\r\n   * 给 DOM 节点设置属性/值\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} attr - 属性名称\r\n   * @param {String|Number|Boolean} value - 属性值\r\n   */\r\n  setAttribute: (el, attr, value) => {\r\n    let tagName = el.tagName.toLowerCase()\r\n\r\n    switch (attr) {\r\n      case 'style':\r\n        el.style.cssText = value\r\n        break\r\n      case 'value':\r\n        if (tagName === 'input' || tagName === 'textarea') {\r\n          el.value = value\r\n        } else {\r\n          el.setAttribute(attr, value)\r\n        }\r\n        break\r\n      case 'className':\r\n        el.className = value\r\n        break\r\n      default:\r\n        el.setAttribute(attr, value)\r\n        break\r\n    }\r\n  },\r\n  /**\r\n   * 检测 DOM 节点是否包含名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {*}\r\n   */\r\n  hasClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass) {\r\n      return false\r\n    }\r\n\r\n    return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\r\n  },\r\n  /**\r\n   * 给 DOM 节点添加名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  addClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n\r\n    el.className = allClass\r\n  },\r\n  /**\r\n   * 移除 DOM 节点的 className 样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  removeClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass || !Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass = Calendar.Utils.trim(allClass.replace(className, ''))\r\n\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\n/**\r\n * 代理事件\r\n * ========================================================\r\n * 说明：代码修改至 Nicolas Gallagher 的 delegate.js\r\n * 项目 GitHub 地址：https://github.com/necolas/delegate.js\r\n * ========================================================\r\n */\r\nCalendar.Delegate = {\r\n  /**\r\n   * 绑定代理事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   * @param {Boolean} [once] - 是否只触发一次（默认值：false - 事件冒泡）\r\n   */\r\n  on (el, selector, type, callback, context, capture, /* private */ once) {\r\n    const Delegate = Calendar.Delegate\r\n    const wrapper = function (e) {\r\n      let delegateTarget = Delegate.getDelegateTarget(el, e.target, selector)\r\n\r\n      e.delegateTarget = delegateTarget\r\n\r\n      if (delegateTarget) {\r\n        if (once === true) {\r\n          Delegate.off(el, type, wrapper)\r\n        }\r\n        callback.call(context || el, e)\r\n      }\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    callback._delegateWrapper = callback\r\n    el.addEventListener(type, wrapper, capture || false)\r\n\r\n    return callback\r\n  },\r\n  /**\r\n   * 绑定只触发一次的事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  once (el, type, selector, callback, context, capture) {\r\n    Calendar.Delegate.on(el, type, selector, callback, context, capture, true)\r\n  },\r\n  /**\r\n   * 取消事件绑定\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 取消绑定（代理）事件的 DOM 节点\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  off (el, type, callback, capture) {\r\n    if (callback._delegateWrapper) {\r\n      callback = callback._delegateWrapper\r\n      delete callback._delegateWrapper\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    el.removeEventListener(type, callback, capture || false)\r\n  },\r\n  /**\r\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stop (evt) {\r\n    const Delegate = Calendar.Delegate\r\n\r\n    Delegate.stopPropagation(evt)\r\n    Delegate.preventDefault(evt)\r\n  },\r\n  /**\r\n   * 终止事件在传播过程的捕获或冒泡\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stopPropagation (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.stopPropagation) {\r\n      evt.stopPropagation()\r\n    } else {\r\n      event.cancelBubble = true\r\n    }\r\n  },\r\n  /**\r\n   * 阻止事件的默认行为\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  preventDefault (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault()\r\n    } else {\r\n      event.returnValue = false\r\n    }\r\n  },\r\n  /**\r\n   * 通过 className 获得事件代理节点的事件代理目标节点\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定事件代理的节点\r\n   * @param target - （触发事件后）事件的目标对象\r\n   * @param selector - 目标节点的类选择器\r\n   * @returns {HTMLElement|Null}\r\n   */\r\n  getDelegateTarget (el, target, selector) {\r\n    while (target && target !== el) {\r\n      if (Calendar.DOM.hasClass(target, selector.replace('.', ''))) {\r\n        return target\r\n      }\r\n\r\n      target = target.parentElement\r\n    }\r\n\r\n    return null\r\n  }\r\n}\r\n"]}