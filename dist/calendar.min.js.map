{"version":3,"sources":["calendar.js"],"names":["this","parent","options","_classCallCheck","Calendar","viewMode","time","pickMode","DATES","elements","wrap","header","title","switcher","prev","next","body","week","dates","months","today","minYear","data","maxYear","year","month","date","picked","day","text","fullText","_createClass","startDate","key","monthText","defaults","set","setYear","getMonth","getDate","_setYears","endDate","dateRanges","push","_createElements","length","value","_renderTitle","$header","$switcher","appendChild","$fragment","document","createDocumentFragment","$body","_renderDates","$footer","$wrap","_renderYears","years","selectorMonth","selectorYear","selectorToday","Delegate","selectorTitle","selectorPrev","selectorNext","on","selectorDate","CLICK","_nextClick","_dateClick","getEls","off","_titleClick","MONTHS","attributes","STYLES","footer","start","mode","arguments","undefined","$months","DOM","removeClass","$week","addClass","CLS_HIDDEN","$years","$dates","startYear","getYears","getYear","toString","updateView","get","getAttribute","pickedDates","PICKED","hasClass","$date","CLS_PICKED","$picked","getPicked","setDate","sort","_renderDateRanges","ranges","getWeekRanges","$month","update","$year","HIDDEN","CLS_ICON_NEXT","BODY","CLS_WRAP","WRAP","CLS_HEADER","CLS_TITLE","TITLE","CLS_SWITCHER","CLS_PREV","CLS_ICON_PREV","CLS_NEXT","NEXT","CLS_BODY","CLS_WEEK","WEEK","CLS_DATES","CLS_MONTHS","createElement","weekClassName","CLS_FOOTER_DATE","FOOTER_DATE","datesClassName","monthsClassName","yearsClassName","SPACE","guid","getElementById","className","id","CLS_TEXT","CLS_TODAY","CLS_FOOTER","CLS_TIME","$title","innerHTML","fragment","$day","WEEKEND","DAYS","i","CLS_DAY","CLS_WEEKEND","firstDateDay","prevYear","isLeapYear","prevDays","prevMonth","nextYear","nextMonth","nextDays","end","isPrev","isNext","days","_getDatesFragment","CLS_DATE","CLS_DATE_NEXT","CLS_CURRENT","CLS_PICKED_RANGE","isDatesEqual","CURRENT","isToday","fullDate","_loop","getDay","isCurrent","isPickedDate","getRanges","$pickedDates","querySelectorAll","forEach","querySelector","setAttribute","MONTH","pickedDate","CLS_MONTH","isPicked","yearsEnd","yearsStart","_getYearsFragment","nextEndYear","prevStartYear","nextStartYear","getToday","CLS_YEAR_PREV","CLS_DISABLED","renderTime","clearTimeout","getHours","$today","getSeconds","hours","Date","minutes","getMinutes","$time","seconds","timer","setTimeout","console","evt","$el","delegateTarget","log","val","split","numbers","lastNumber","startMonth","endYear","endMonth","begins","timeNumber","begin","endTime","beginNumber","beginTime","endNumber","getTime","parseInt","ends","TEXT","DISABLED","ICON_NEXT","DAY","Utils","uuid","isString","isNumber","YEARS","YEAR","isArray","YEAR_NEXT","FOOTER","TODAY","FOOTER_TIME","TIME","isElement","isEmpty","PICKED_POINT","stripTags","Array","o","prototype","Object","apply","prefix","nodeName","tagName","nodeType","children","str","childNode","element","el","style","cssText","attr","child","createTextNode","toLowerCase","allClass","type","callback","context","capture","call","e","wrapper","addEventListener","removeEventListener","event","preventDefault","window","getDelegateTarget","target","selector"],"mappings":"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","file":"calendar.min.js","sourcesContent":["/**\r\n * Calendar 类\r\n */\r\nclass Calendar {\r\n  /**\r\n   * 构造函数\r\n   * ========================================================================\r\n   * @constructor\r\n   * @param options\r\n   * @returns {Calendar}\r\n   */\r\n  constructor (options) {\r\n    /**\r\n     * Calendar 控件的配置属性\r\n     * ========================================================================\r\n     */\r\n    this.attributes = {\r\n      // 日历显示的位置（DOM 节点 ID）\r\n      parent: '',\r\n      // 日历初始化显示的时间\r\n      time: '',\r\n      // 日历的试图模式：\r\n      // 0 - 日期试图（默认值）\r\n      // 1 - 月份试图\r\n      // 2 - 年代试图\r\n      viewMode: 0,\r\n      // 日历的日期选择模式\r\n      // single - 单选模式（默认值）\r\n      // multiple - 多选模式\r\n      // range - 范围选择模式\r\n      // week - 星期选择模式\r\n      pickMode: 'single',\r\n      // 月份常量\r\n      MONTHS: [],\r\n      // 星期常量\r\n      DAYS: [],\r\n      // 月份天数常量\r\n      DATES: [],\r\n      // 日历控件的样式常量\r\n      STYLES: {}\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的 DOM 节点属性\r\n     * ========================================================================\r\n     */\r\n    this.elements = {\r\n      // 显示日历控件的父节点\r\n      parent: null,\r\n      // 日历控件的根节点\r\n      wrap: null,\r\n      // 日历控件的头部节点\r\n      header: null,\r\n      // 日历控件的标题节点\r\n      title: null,\r\n      // 日历控件的切换器节点\r\n      switcher: null,\r\n      // 日历控件向上切换按钮节点\r\n      prev: null,\r\n      // 日历控件向下切换按钮节点\r\n      next: null,\r\n      // 日历控件的主体内容节点\r\n      body: null,\r\n      // 日历控件的星期栏节点\r\n      week: null,\r\n      // 日历控件的日期显示节点\r\n      dates: null,\r\n      // 日历控件的月份显示节点\r\n      months: null,\r\n      // 日历控件的年代显示节点\r\n      years: null,\r\n      // 日历控件的页脚节点\r\n      footer: null,\r\n      // 日历控件的当前日期显示节点\r\n      today: null,\r\n      // 日历控件的当前时间显示节点\r\n      time: null\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的数据属性\r\n     * ========================================================================\r\n     */\r\n    this.data = {\r\n      // 日历可以显示的最小年份\r\n      minYear: 0,\r\n      // 日历可以显示的最大年份\r\n      maxYear: 0,\r\n      // 当前选中日期的年份\r\n      year: 0,\r\n      // 当前选中日期的月份\r\n      month: 0,\r\n      // 选中的日期信息\r\n      date: {\r\n        // 年份\r\n        year: 0,\r\n        // 月份\r\n        month: 0,\r\n        // 日期\r\n        date: 0,\r\n        // 星期几\r\n        day: 0,\r\n        // 日期的英文表示（格式：2019-6-2）\r\n        text: '',\r\n        // 日期的完整中文表示（格式：2019年6月2日 星期日）\r\n        fullText: ''\r\n      },\r\n      // 多选（multiple/range/week）模式下，选中的日期数据\r\n      picked: []\r\n    }\r\n\r\n    // 执行初始化操作\r\n    // 绘制界面\r\n    // 绑定事件处理器\r\n    this.initialize(options)\r\n        .render()\r\n        .addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 初始化方法\r\n   * ========================================================================\r\n   * 1. 初始化配置信息；\r\n   * 2. 初始化数据信息；\r\n   * 3. 初始化 DOM 信息（创建控件相关的 DOM 节点）；\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  initialize (options) {\r\n    let year = Calendar.getYear().value\r\n    let pickMode\r\n    let time\r\n    let month\r\n    let monthText\r\n    let dateRanges\r\n    let startDate\r\n    let endDate\r\n\r\n    // 初始化配置\r\n    this.set(Calendar.defaults)\r\n        .set(options)\r\n\r\n    time = this.get('time')\r\n    pickMode = this.get('pickMode')\r\n    month = Calendar.getMonth(time)\r\n    monthText = month.text\r\n\r\n    // 初始化数据\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        ._setYears(time)\r\n\r\n    // 初始化（多选模式）选中的时间\r\n    switch (pickMode) {\r\n      case 'multiple':\r\n        this.data.picked.push(this.getDate().text)\r\n\r\n        break\r\n      case 'range':\r\n        startDate = monthText + '-' + 1\r\n        endDate = monthText + '-' + this.get('DATES')[month.value - 1]\r\n\r\n        this.data.picked.push(startDate)\r\n        this.data.picked.push(endDate)\r\n\r\n        break\r\n      case 'week':\r\n        dateRanges = Calendar.getWeekRanges(time)\r\n        startDate = dateRanges[0]\r\n        endDate = dateRanges[dateRanges.length - 1]\r\n\r\n        this.data.picked.push(startDate)\r\n        this.data.picked.push(endDate)\r\n\r\n        break\r\n    }\r\n\r\n    this.data.minYear = year - 100\r\n    this.data.maxYear = year + 100\r\n\r\n    // 创建控件相关的 DOM 节点\r\n    this._createElements()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件界面的方法\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  render () {\r\n    let elements = this.getEls()\r\n    let $wrap = elements.wrap\r\n    let $header = elements.header\r\n    let $switcher = elements.switcher\r\n    let $body = elements.body\r\n    let $footer = elements.footer\r\n    let $fragment = document.createDocumentFragment()\r\n\r\n    // 绘制头部\r\n    this._renderTitle()\r\n    $header.appendChild(elements.title)\r\n    $switcher.appendChild(elements.prev)\r\n    $switcher.appendChild(elements.next)\r\n    $header.appendChild($switcher)\r\n\r\n    // 绘制星期栏\r\n    this._renderDays()\r\n    $body.appendChild(elements.week)\r\n\r\n    // 绘制日期\r\n    this._renderDates()\r\n    $body.appendChild(elements.dates)\r\n\r\n    // 绘制月份\r\n    this._renderMonths()\r\n    $body.appendChild(elements.months)\r\n\r\n    // 绘制年代\r\n    this._renderYears()\r\n    $body.appendChild(elements.years)\r\n\r\n    // 绘制页脚\r\n    this._renderFooter()\r\n    $footer.appendChild(elements.today)\r\n    $footer.appendChild(elements.time)\r\n\r\n    // 将主体模块绘制出来\r\n    $wrap.appendChild($header)\r\n    $wrap.appendChild($body)\r\n    $wrap.appendChild($footer)\r\n    // 将控件零时保存在文档碎片中\r\n    $fragment.appendChild($wrap)\r\n\r\n    // 一次性绘制出整个日历控件\r\n    elements.parent.appendChild($fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 给日历控件相关的 DOM 节点绑定事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  addEventListeners () {\r\n    const DOT = '.'\r\n    const STYLES = this.get('STYLES')\r\n    const CLICK = 'click'\r\n    const selectorTitle = DOT + STYLES.TITLE\r\n    const selectorPrev = DOT + STYLES.PREV\r\n    const selectorNext = DOT + STYLES.NEXT\r\n    const selectorDate = DOT + STYLES.DATE\r\n    const selectorMonth = DOT + STYLES.MONTH\r\n    const selectorYear = DOT + STYLES.YEAR\r\n    const selectorToday = DOT + STYLES.TODAY\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    // 绑定点击标题的事件处理器\r\n    Delegate.on($wrap, selectorTitle, CLICK, this._titleClick, this)\r\n    // 绑定点击向上按钮的事件处理器\r\n    Delegate.on($wrap, selectorPrev, CLICK, this._prevClick, this)\r\n    // 绑定点击向下按钮的事件处理器\r\n    Delegate.on($wrap, selectorNext, CLICK, this._nextClick, this)\r\n    // 绑定点击日期的事件处理器\r\n    Delegate.on($wrap, selectorDate, CLICK, this._dateClick, this)\r\n    // 绑定点击月份的事件处理器\r\n    Delegate.on($wrap, selectorMonth, CLICK, this._monthClick, this)\r\n    // 绑定点击年份的事件处理器\r\n    Delegate.on($wrap, selectorYear, CLICK, this._yearClick, this)\r\n    // 绑定点击今天的事件处理器\r\n    Delegate.on($wrap, selectorToday, CLICK, this._todayClick, this)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有绑定的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  removeEventListeners () {\r\n    const CLICK = 'click'\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Delegate.off($wrap, CLICK, this._titleClick)\r\n    Delegate.off($wrap, CLICK, this._prevClick)\r\n    Delegate.off($wrap, CLICK, this._nextClick)\r\n    Delegate.off($wrap, CLICK, this._dateClick)\r\n    Delegate.off($wrap, CLICK, this._monthClick)\r\n    Delegate.off($wrap, CLICK, this._yearClick)\r\n    Delegate.off($wrap, CLICK, this._todayClick)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重启日历控件\r\n   * ========================================================================\r\n   * 1. 销毁日历控件：\r\n   *    1.1 移除所有的绑定的事件处理器\r\n   *    1.2 隐藏控件\r\n   *    1.3 移除所有 DOM 节点\r\n   *    1.4 重置所有属性\r\n   * 2. 初始化控件\r\n   * 3. 绘制控件\r\n   * 4. 绑定事件处理起\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  reload (options) {\r\n    this.destroy().initialize(options).render().addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁日历控件\r\n   * ========================================================================\r\n   * 1 移除所有的绑定的事件处理器\r\n   * 2 隐藏控件\r\n   * 3 移除所有 DOM 节点\r\n   * 4 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  destroy () {\r\n    this.removeEventListeners().hide().remove().reset()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  remove () {\r\n    let elements = this.getEls()\r\n\r\n    elements.parent.removeChild(elements.wrap)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  reset () {\r\n    this.attributes = {\r\n      parent: '',\r\n      time: '',\r\n      viewMode: 0,\r\n      pickMode: 'single',\r\n      MONTHS: [],\r\n      DAYS: [],\r\n      DATES: [],\r\n      STYLES: {}\r\n    }\r\n\r\n    this.elements = {\r\n      parent: null,\r\n      wrap: null,\r\n      header: null,\r\n      title: null,\r\n      switcher: null,\r\n      prev: null,\r\n      next: null,\r\n      body: null,\r\n      week: null,\r\n      dates: null,\r\n      months: null,\r\n      years: null,\r\n      footer: null,\r\n      today: null,\r\n      time: null,\r\n      year: null,\r\n      month: null,\r\n      date: null\r\n    }\r\n\r\n    this.data = {\r\n      minYear: 0,\r\n      maxYear: 0,\r\n      years: {\r\n        start: 0,\r\n        end: 0\r\n      },\r\n      year: 0,\r\n      month: 0,\r\n      date: {\r\n        year: 0,\r\n        month: 0,\r\n        date: 0,\r\n        day: 0,\r\n        text: '',\r\n        fullText: ''\r\n      },\r\n      picked: []\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取配置信息\r\n   * ========================================================================\r\n   * @param {String} attr - 配置属性名称\r\n   * @returns {*} - 返回对应属性的值\r\n   */\r\n  get (attr) {\r\n    return this.attributes[attr]\r\n  }\r\n\r\n  /**\r\n   * 设置配置信息\r\n   * ========================================================================\r\n   * @param {Object} [options] - 配置信息对象\r\n   * @returns {Calendar}\r\n   */\r\n  set (options = {}) {\r\n    let config = JSON.parse(JSON.stringify(options))\r\n\r\n    Object.assign(this.attributes, config)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件所有相关的 DOM 节点的对象\r\n   * ========================================================================\r\n   * @see Calendar.elements\r\n   * @returns {Object}\r\n   */\r\n  getEls () {\r\n    return this.elements\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的年份\r\n   */\r\n  getYear () {\r\n    return this.data.year\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前的年份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或数字（默认值：今年）\r\n   *                                 字符串格式：'2019'、'2019-2' 或 '2019-2-2'\r\n   *                                 数字格式：  1546300800000\r\n   * @returns {Calendar}\r\n   */\r\n  setYear (time) {\r\n    this.data.year = Calendar.getYear(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得日历控件当前显示的月份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的月份\r\n   */\r\n  getMonth () {\r\n    return this.data.month\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前显示的月份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示月份的字符串或数字（默认值：本月）\r\n   * @returns {Calendar}\r\n   */\r\n  setMonth (time) {\r\n    this.data.month = Calendar.getMonth(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @returns {Object} - 返回日历控件当前选中的日期\r\n   */\r\n  getDate () {\r\n    return this.data.date\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {Calendar}\r\n   */\r\n  setDate (time) {\r\n    this.data.date = Calendar.getDate(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份所在的年代信息\r\n   * ========================================================================\r\n   * @returns {Object} - 返回当前所在年代信息\r\n   */\r\n  getYears () {\r\n    return this.data.years\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件在多选（multiple/range/week）模式下选中的日期信息\r\n   * ========================================================================\r\n   * @returns {Array} - 返回选中的日期信息\r\n   */\r\n  getPicked () {\r\n    return this.data.picked\r\n  }\r\n\r\n  /**\r\n   * 根据试图显示模式，切换日历控件的显示模式和显示内容\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值：\r\n   *                            0 - 日期显示模式（默认值）\r\n   *                            1 - 月份显示模式\r\n   *                            2 - 年代显示模式\r\n   * @returns {Calendar}\r\n   */\r\n  update (viewMode = 0) {\r\n    this.updateViewMode(viewMode).updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新试图显示模式的配置信息\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值（默认值：0）\r\n   * @see this.update\r\n   * @returns {Calendar}\r\n   */\r\n  updateViewMode (viewMode = 0) {\r\n    let mode = viewMode\r\n\r\n    if (mode > 2) {\r\n      mode = 2\r\n    } else {\r\n      if (mode < 0) {\r\n        mode = 0\r\n      }\r\n    }\r\n\r\n    this.set({\r\n      viewMode: mode\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新日历控件的显示内容\r\n   * ========================================================================\r\n   * 1. 更新标题内容\r\n   *    1.1 日期显示模式：显示年份和月份\r\n   *    1.2 月份显示模式：显示年份\r\n   *    1.3 年份显示模式：显示年代区间信息\r\n   * 2. 更细主体内容\r\n   *    2.1 日期显示模式：隐藏年份和月份的 DOM 节点，显示星期栏和日期信息\r\n   *    2.2 月份显示模式：隐藏年份、星期栏以及日期信息\r\n   *    2.3 年份显示模式：隐藏月份 DOM 节点、星期栏以及日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  updateView () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const DOM = Calendar.DOM\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    let elements = this.getEls()\r\n    let $week = elements.week\r\n    let $dates = elements.dates\r\n    let $months = elements.months\r\n    let $years = elements.years\r\n\r\n    this._renderTitle()\r\n\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        addClass($months, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($week, CLS_HIDDEN)\r\n        removeClass($dates, CLS_HIDDEN)\r\n\r\n        // 重新绘制日期\r\n        this._repaintDates()\r\n\r\n        break\r\n      // 月份显示模式\r\n      case 1:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($months, CLS_HIDDEN)\r\n\r\n        // 重新绘制月份\r\n        this._repaintMonths()\r\n\r\n        break\r\n      // 年份显示模式\r\n      case 2:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($months, CLS_HIDDEN)\r\n\r\n        removeClass($years, CLS_HIDDEN)\r\n\r\n        // 重新绘制年份\r\n        this._repaintYears()\r\n\r\n        break\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向上翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向上翻页，显示上一个月份的日期信息\r\n   * 2. 月份显示模式：向上翻页，显示上一年的月份信息\r\n   * 3. 年份显示模式：向上翻页，显示上一个年代（10前）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  prev () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let minYear = this.data.minYear\r\n    let time\r\n\r\n    // 针对显示模式，处理相应的翻页逻辑\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        // 切换月份\r\n        month -= 1\r\n\r\n        // 到了上一年，切换年份\r\n        if (month < 1) {\r\n          month = 12\r\n          year -= 1\r\n\r\n          // 确保不小于最小可以显示的年份\r\n          if (year < minYear) {\r\n            year = minYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        // 切换年份\r\n        year -= 1\r\n\r\n        if (year < minYear) {\r\n          year = minYear\r\n        }\r\n\r\n        this.setYear(year.toString())\r\n\r\n        break\r\n      case 2:\r\n        // 切换年代\r\n        startYear -= 10\r\n\r\n        if (startYear < minYear) {\r\n          startYear = minYear + 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    // 更新显示内容\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向下翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向下翻页，显示下一个月份的日期信息\r\n   * 2. 月份显示模式：向下翻页，显示下一年的月份信息\r\n   * 3. 年份显示模式：向下翻页，显示下一个年代（10后）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  next () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let maxYear = this.data.maxYear\r\n    let time\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        month += 1\r\n\r\n        if (month > 12) {\r\n          month = 1\r\n          year += 1\r\n\r\n          if (year > maxYear) {\r\n            year = maxYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        year += 1\r\n\r\n        if (year > maxYear) {\r\n          year = maxYear\r\n        }\r\n\r\n        this.setYear(year.toString())\r\n\r\n        break\r\n      case 2:\r\n        startYear += 10\r\n\r\n        if (startYear > maxYear) {\r\n          startYear = maxYear - 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择日期\r\n   * ========================================================================\r\n   * 1. 选择了选中状态的日期：\r\n   *    1.1 星期区间和单选模式：不做任何处理\r\n   *    1.2 多选模式：取消选中 DOM 节点的选中状态，并且将选中的日期在选中信息移除\r\n   *    1.3 日期区间选择模式下：取消之前选中区间的选中样式，将当前选中的日期 DOM 节点\r\n   *        设置为选中状态。移除之前选中日期信息，并将选中日期信息保存起来\r\n   * 2. 选择了未选中状态的日期：\r\n   *    2.1 单选模式：获取选中日期信息，并用这个信息替换之前选中的信息。移除之前选中样\r\n   *        式，并设置当前选中日期的选中样式\r\n   *    2.2 多选模式：获取选中的日期信息，然后保存到选中信息中，最后设置选中日期的样式\r\n   *    2.3 日期区间选择模式下：\r\n   *    2.4 星期区间选择模式：获取当前选择日期的星期区间信息，移除之前保存的区间信息将\r\n   *        新的区间信息保存起来，移除之前的区间选中样式，并设置当前选中区间的选中样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $date - 选中的日期 DOM 节点\r\n   * @returns {*}\r\n   */\r\n  pickDate ($date) {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    let pickMode = this.get('pickMode')\r\n    let elements = this.getEls()\r\n    let time = $date.getAttribute('data-date')\r\n    let $picked = null\r\n    let pickedDates\r\n\r\n    // 选择了选中状态的日期\r\n    if (hasClass($date, CLS_PICKED)) {\r\n      switch (pickMode) {\r\n        // 单选/星期选择模式\r\n        case 'single':\r\n        case 'week':\r\n          return false\r\n        // 多选模式\r\n        case 'multiple':\r\n          // 取消选中样式\r\n          removeClass($date, CLS_PICKED)\r\n          // 移除选中的日期信息\r\n          this._removePicked(time)\r\n\r\n          pickedDates = this.getPicked()\r\n\r\n          this.setDate(pickedDates[pickedDates.length-1])\r\n\r\n          break\r\n        case 'range':\r\n          // 清除之前选中的数据\r\n          this.data.picked = []\r\n          // 将当前选中的日期数据保存起来\r\n          this.data.picked.push(time)\r\n\r\n          this.setDate(time)\r\n\r\n          // 绘制选中样式\r\n          elements.date = $date\r\n          this._renderDateRanges()\r\n\r\n          break\r\n      }\r\n    } else {\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n\r\n      // 选择了未选中状态的日期\r\n      switch (pickMode) {\r\n        case 'single':\r\n          $picked = elements.date\r\n\r\n          if ($picked) {\r\n            removeClass($picked, CLS_PICKED)\r\n          }\r\n\r\n          addClass($date, CLS_PICKED)\r\n          elements.date = $date\r\n\r\n          this.setDate(time)\r\n\r\n          break\r\n        case 'multiple':\r\n          this.data.picked.push(time)\r\n          this.data.picked.sort()\r\n\r\n          pickedDates = this.getPicked()\r\n\r\n          this.setDate(pickedDates[pickedDates.length-1])\r\n\r\n          addClass($date, CLS_PICKED)\r\n\r\n          break\r\n        case 'range':\r\n          switch (this.data.picked.length) {\r\n            case 0:\r\n            case 1:\r\n              this.data.picked.push(time)\r\n\r\n              if (this.data.picked.length === 2) {\r\n                this.data.picked.sort()\r\n              }\r\n\r\n              pickedDates = this.getPicked()\r\n              this.setDate(pickedDates[pickedDates.length-1])\r\n\r\n              elements.date = $date\r\n              this._renderDateRanges()\r\n\r\n              break\r\n            case 2:\r\n              this.data.picked = []\r\n              this.data.picked.push(time)\r\n\r\n              elements.date = $date\r\n              this._renderDateRanges()\r\n\r\n              break\r\n          }\r\n\r\n          break\r\n        case 'week':\r\n          let ranges = Calendar.getWeekRanges(time)\r\n\r\n          this.data.picked = []\r\n          this.data.picked.push(ranges[0])\r\n          this.data.picked.push(ranges[ranges.length - 1])\r\n\r\n          this.setDate(ranges[ranges.length - 1])\r\n\r\n          elements.date = $date\r\n          this._renderWeekRanges()\r\n\r\n          break\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择月份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的月份：直接切换试图模式到日期试图模式\r\n   * 2. 选择了未选中状态的月份：移除之前选中的月份的选中样式，并当前选中的月份的选中\r\n   *    样式。然后更新选中年份和月份的数据，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $month - 选中的月份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickMonth ($month) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.month\r\n    let time = $month.getAttribute('data-month')\r\n\r\n    // 点击已经选中的年份\r\n    if (DOM.hasClass($month, CLS_PICKED)) {\r\n      // 切换到月份试图模式\r\n      this.update()\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($month, CLS_PICKED)\r\n      elements.month = $month\r\n\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n          .update()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择年份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的年份：更新选中的年份信息，并切换到月份试图模式\r\n   * 2. 选择了未选中状态的年份：移除之前选中的年份的选中样式，将当前选中的年份设为选中\r\n   *    样式，并切换到月份试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $year - 选中的年份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickYear ($year) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.year\r\n    let time = $year.getAttribute('data-year')\r\n\r\n    // 点击已经选中的月份\r\n    if (DOM.hasClass($year, CLS_PICKED)) {\r\n      // 切换到日期试图模式\r\n      this.setYear(time).update(1)\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($year, CLS_PICKED)\r\n      elements.year = $year\r\n\r\n      // 更新年份并切换到月份试图\r\n      this.setYear(time)\r\n          .update(1)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择今天\r\n   * ========================================================================\r\n   * 将今天的年份、月份以及日期信息设置为当前选中日期，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  pickToday () {\r\n    let time = Calendar.getToday().value\r\n\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        .update()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  hide () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.addClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 显示日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  show () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.removeClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏/显示之间切换\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  toggle () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n\r\n    let $wrap = this.getEls().wrap\r\n\r\n    if (Calendar.DOM.hasClass($wrap, CLS_HIDDEN)) {\r\n      this.show()\r\n    } else {\r\n      this.hide()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 设置当前的年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _setYears (time) {\r\n    this.data.years = Calendar.getYears(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （多选模式）移除选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _removePicked (time) {\r\n    let pickedDates = this.getPicked()\r\n    let index = pickedDates.indexOf(time)\r\n\r\n    if (index > -1) {\r\n      pickedDates.splice(index, 1)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的各个主要 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _createElements () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_WRAP = STYLES.WRAP\r\n    const CLS_HEADER = STYLES.HEADER\r\n    const CLS_TITLE = STYLES.TITLE\r\n    const CLS_SWITCHER = STYLES.SWITCHER\r\n    const CLS_PREV = STYLES.PREV\r\n    const CLS_ICON_PREV = STYLES.ICON_PREV\r\n    const CLS_NEXT = STYLES.NEXT\r\n    const CLS_ICON_NEXT = STYLES.ICON_NEXT\r\n    const CLS_BODY = STYLES.BODY\r\n    const CLS_WEEK = STYLES.WEEK\r\n    const CLS_DATES = STYLES.DATES\r\n    const CLS_MONTHS = STYLES.MONTHS\r\n    const CLS_YEARS = STYLES.YEARS\r\n    const CLS_FOOTER = STYLES.FOOTER\r\n    const CLS_FOOTER_DATE = STYLES.FOOTER_DATE\r\n    const CLS_TODAY = STYLES.TODAY\r\n    const CLS_FOOTER_TIME = STYLES.FOOTER_TIME\r\n    const CLS_TIME = STYLES.TIME\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const SPACE = ' '\r\n    let elements = this.getEls()\r\n    let createElement = Calendar.DOM.createElement\r\n    let weekClassName = CLS_WEEK\r\n    let datesClassName = CLS_DATES\r\n    let monthsClassName = CLS_MONTHS\r\n    let yearsClassName = CLS_YEARS\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 1:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 2:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n    }\r\n\r\n    elements.parent = document.getElementById(this.get('parent'))\r\n\r\n    // wrap\r\n    elements.wrap = createElement('div', {\r\n      id: Calendar.Utils.guid('calendar'),\r\n      className: CLS_WRAP\r\n    })\r\n    // header\r\n    elements.header = createElement('div', {\r\n      className: CLS_HEADER\r\n    })\r\n    elements.title = createElement('h4', {\r\n      className: CLS_TITLE\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      })\r\n    ])\r\n    elements.switcher = createElement('div', {\r\n      className: CLS_SWITCHER\r\n    })\r\n    elements.prev = createElement('div', {\r\n      className: CLS_PREV\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      }, [\r\n        createElement('i', {\r\n          className: CLS_ICON_PREV\r\n        })\r\n      ])\r\n    ])\r\n    elements.next = createElement('div', {\r\n      className: CLS_NEXT\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      }, [\r\n        createElement('i', {\r\n          className: CLS_ICON_NEXT\r\n        })\r\n      ])\r\n    ])\r\n    // body\r\n    elements.body = createElement('div', {\r\n      className: CLS_BODY\r\n    })\r\n    elements.week = createElement('div', {\r\n      className: weekClassName\r\n    })\r\n    elements.dates = createElement('div', {\r\n      className: datesClassName\r\n    })\r\n    elements.months = createElement('div', {\r\n      className: monthsClassName\r\n    })\r\n    elements.years = createElement('div', {\r\n      className: yearsClassName\r\n    })\r\n    // footer\r\n    elements.footer = createElement('div', {\r\n      className: CLS_FOOTER\r\n    })\r\n    elements.today = createElement('div', {\r\n      className: CLS_FOOTER_DATE\r\n    }, [\r\n      createElement('p', {\r\n        className: CLS_TODAY\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        })\r\n      ])\r\n    ])\r\n    elements.time = createElement('div', {\r\n      className: CLS_FOOTER_TIME\r\n    }, [\r\n      createElement('p', {\r\n        className: CLS_TIME\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        })\r\n      ])\r\n    ])\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的标题\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderTitle () {\r\n    let $title = this.getEls().title.querySelector('.' + this.get('STYLES').TEXT)\r\n    let years = this.getYears()\r\n    let year = this.getYear()\r\n    let value = ''\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        value = Calendar.getMonth(year + '-' + this.getMonth()).fullText\r\n        break\r\n      case 1:\r\n        value = Calendar.getYear(year.toString()).text\r\n        break\r\n      case 2:\r\n        value = years.start + ' - ' + years.end\r\n        break\r\n    }\r\n\r\n    $title.innerHTML = value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的星期栏\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDays () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DAY = STYLES.DAY\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DAYS = this.get('DAYS')\r\n    const createElement = Calendar.DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    DAYS.forEach((day, i) => {\r\n      let className = i === 0 || i === DAYS.length - 1 ? CLS_DAY + ' ' + CLS_WEEKEND : CLS_DAY\r\n      let $day = createElement('div', {\r\n        className: className\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          day\r\n        ])\r\n      ])\r\n\r\n      fragment.appendChild($day)\r\n    })\r\n\r\n    this.getEls().week.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDates () {\r\n    const DATES = this.get('DATES')\r\n    const isLeapYear = Calendar.isLeapYear\r\n    // fragments\r\n    let fragment = document.createDocumentFragment()\r\n    // current month\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let days = DATES[month - 1]\r\n    let firstDateDay = Calendar.getDay(year + '-' + month + '-' + 1).value\r\n    // prev month\r\n    let prevYear = month - 2 < 0 ? year - 1 : year\r\n    let prevMonth = month - 2 < 0 ? 12 : month - 1\r\n    let prevDays = DATES[prevMonth - 1]\r\n    // next month\r\n    let nextYear = month === 12 ? year + 1 : year\r\n    let nextMonth = month === 12 ? 1 : month + 1\r\n    let nextDays\r\n\r\n    if (isLeapYear(prevYear) && prevMonth === 2) {\r\n      prevDays += 1\r\n    }\r\n\r\n    if (isLeapYear(year) && month === 2) {\r\n      days += 1\r\n    }\r\n\r\n    nextDays = 42 - (firstDateDay + days)\r\n\r\n    if (firstDateDay !== 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: prevYear,\r\n        month: prevMonth,\r\n        start: prevDays - (firstDateDay - 1),\r\n        end: prevDays,\r\n        isPrev: true,\r\n        isNext: false\r\n      }))\r\n    }\r\n\r\n    fragment.appendChild(this._getDatesFragment({\r\n      year: year,\r\n      month: month,\r\n      start: 1,\r\n      end: days,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n\r\n    if (nextDays > 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: nextYear,\r\n        month: nextMonth,\r\n        start: 1,\r\n        end: nextDays,\r\n        isPrev: false,\r\n        isNext: true\r\n      }))\r\n    }\r\n\r\n    this.getEls().dates.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintDates () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $dates = this.getEls().dates\r\n\r\n    DOM.addClass($dates, CLS_HIDDEN)\r\n    $dates.innerHTML = ''\r\n    DOM.removeClass($dates, CLS_HIDDEN)\r\n\r\n    this._renderDates()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得绘制日期信息时的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.year - 年份\r\n   * @param {Number} options.month - 月份\r\n   * @param {Number} options.start - 开始的日期\r\n   * @param {Number} options.end - 结束的日期\r\n   * @param {Boolean} options.isPrev - 是否为上个月的日期\r\n   * @param {Boolean} options.isNext - 是否为下个月的日期\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getDatesFragment (options) {\r\n    const {year, month, start, end, isPrev, isNext} = options\r\n    const SPACE = ' '\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DATE = STYLES.DATE\r\n    const CLS_DATE_PREV = STYLES.DATE_PREV\r\n    const CLS_DATE_NEXT = STYLES.DATE_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const createElement = Calendar.DOM.createElement\r\n    const isDatesEqual = Calendar.isDatesEqual\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let date = start\r\n    let pickMode = this.get('pickMode')\r\n    let pickedDates = this.getPicked()\r\n\r\n    for (; date <= end; date += 1) {\r\n      let fullDate = year + '-' + month + '-' + date\r\n      let isCurrent = Calendar.isToday(fullDate)\r\n      let $date = createElement('div', {\r\n        'data-date': fullDate\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          date\r\n        ])\r\n      ])\r\n      let day = Calendar.getDay(fullDate)\r\n      let className = ''\r\n\r\n      className += CLS_DATE\r\n\r\n      if (isPrev) {\r\n        className += (SPACE + CLS_DATE_PREV)\r\n      } else {\r\n        if (isNext) {\r\n          className += (SPACE + CLS_DATE_NEXT)\r\n        }\r\n      }\r\n\r\n      // 当前（今天）的日期\r\n      if (isCurrent) {\r\n        className += (SPACE + CLS_CURRENT)\r\n      }\r\n\r\n      // 周末\r\n      if (day.value === 0 || day.value === 6) {\r\n        className += (SPACE + CLS_WEEKEND)\r\n      }\r\n\r\n      switch (pickMode) {\r\n        // 单选模式\r\n        case 'single':\r\n          let pickedDate = this.getDate().text\r\n          let isPickedDate = isDatesEqual(fullDate, pickedDate)\r\n\r\n          if (isPickedDate) {\r\n            className += (SPACE + CLS_PICKED)\r\n            elements.date = $date\r\n          }\r\n          break\r\n        // 多选模式\r\n        case 'multiple':\r\n          pickedDates.forEach((picked) => {\r\n            let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n            if (isPicked) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          })\r\n\r\n          break\r\n        // 区间模式\r\n        case 'range':\r\n        case 'week':\r\n          let dateRanges = []\r\n\r\n          // 只有选中了两个节点，才绘制选中日期区间的样式\r\n          if (pickedDates.length === 2) {\r\n            dateRanges = Calendar.getRanges(pickedDates[0], pickedDates[1])\r\n\r\n            dateRanges.forEach((picked, i) => {\r\n              let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n              if (!isPicked) {\r\n                return false\r\n              }\r\n\r\n              // 设置中间日期的样式\r\n              if (i !== 0 && i !== (dateRanges.length - 1)) {\r\n                className += (SPACE + CLS_PICKED)\r\n                className += (SPACE + CLS_PICKED_RANGE)\r\n              } else {\r\n                if (i === 0 || i === dateRanges.length - 1) {\r\n                  className += (SPACE + CLS_PICKED)\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            if (pickedDates.length === 1) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          }\r\n\r\n          break\r\n      }\r\n\r\n      $date.className = className\r\n\r\n      fragment.appendChild($date)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的日期区间选中样式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDateRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $date = this.elements.date\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n\r\n    switch (this.data.picked.length) {\r\n      case 1:\r\n        $pickedDates.forEach(($picked) => {\r\n          removeClass($picked, CLS_PICKED)\r\n\r\n          if (hasClass($picked, CLS_PICKED_RANGE)) {\r\n            removeClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        addClass($date, CLS_PICKED)\r\n\r\n        break\r\n      case 2:\r\n        let ranges = Calendar.getRanges(this.data.picked[0], this.data.picked[1])\r\n\r\n        ranges.forEach((picked, i) => {\r\n          let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n          if (i > 0 && i < ranges.length - 1) {\r\n            addClass($picked, CLS_PICKED)\r\n            addClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        addClass($date, CLS_PICKED)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的星期区间\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderWeekRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n    let picked = this.getPicked()\r\n    let ranges = Calendar.getWeekRanges(picked[0])\r\n\r\n    // 移除之前选中区域的样式\r\n    $pickedDates.forEach(($picked) => {\r\n      removeClass($picked, CLS_PICKED_RANGE)\r\n      removeClass($picked, CLS_PICKED)\r\n    })\r\n\r\n    // 设置新的选中区域的样式\r\n    ranges.forEach((picked, i) => {\r\n      let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n      if (i > 0 && i < ranges.length - 1) {\r\n        addClass($picked, CLS_PICKED)\r\n        addClass($picked, CLS_PICKED_RANGE)\r\n      } else {\r\n        if (i === 0 || i === ranges.length - 1) {\r\n          addClass($picked, CLS_PICKED)\r\n        }\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderMonths () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_MONTH = STYLES.MONTH\r\n    const CLS_MONTH_NEXT = STYLES.MONTH_NEXT\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const MONTHS = this.get('MONTHS')\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    const setAttribute = DOM.setAttribute\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let year = this.getYear()\r\n    let today = Calendar.getToday()\r\n\r\n    MONTHS.forEach((MONTH, i) => {\r\n      let pickedDate = this.getDate()\r\n      let isCurrent = (year === today.year && MONTH === today.month)\r\n      let isPicked = (year === pickedDate.year && MONTH === pickedDate.month)\r\n      let nextYear = year + 1\r\n      let className = CLS_MONTH\r\n      let $month = createElement('div', {\r\n        'data-month': year + '-' + MONTH\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          MONTH\r\n        ])\r\n      ])\r\n\r\n      // 当前（今天）的年份\r\n      if (isCurrent) {\r\n        className += ' ' + CLS_CURRENT\r\n      }\r\n\r\n      // 下一年的月份\r\n      if (i >= 12) {\r\n        className += ' ' + CLS_MONTH_NEXT\r\n        setAttribute($month, 'data-month', nextYear + '-' + MONTH)\r\n      }\r\n      else {\r\n        // 选中的月份\r\n        if (isPicked) {\r\n          className += ' ' + CLS_PICKED\r\n          elements.month = $month\r\n        }\r\n      }\r\n\r\n      $month.className = className\r\n\r\n      fragment.appendChild($month)\r\n    })\r\n\r\n    elements.months.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintMonths () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $months = this.getEls().months\r\n\r\n    DOM.addClass($months, CLS_HIDDEN)\r\n    $months.innerHTML = ''\r\n    DOM.removeClass($months, CLS_HIDDEN)\r\n\r\n    this._renderMonths()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderYears () {\r\n    let years = this.getYears()\r\n    let yearsStart = years.start\r\n    let yearsEnd = years.end\r\n    let prevStartYear = yearsStart - 3\r\n    let prevEndYear = yearsStart - 1\r\n    let nextStartYear = yearsEnd + 1\r\n    let nextEndYear = yearsEnd + 3\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: prevStartYear,\r\n      end: prevEndYear,\r\n      isPrev: true,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: yearsStart,\r\n      end: yearsEnd,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: nextStartYear,\r\n      end: nextEndYear,\r\n      isPrev: false,\r\n      isNext: true\r\n    }))\r\n\r\n    this.getEls().years.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintYears () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $years = this.getEls().years\r\n\r\n    DOM.addClass($years, CLS_HIDDEN)\r\n    $years.innerHTML = ''\r\n    DOM.removeClass($years, CLS_HIDDEN)\r\n\r\n    this._renderYears()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取绘制年份信息的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.start - 开始年份\r\n   * @param {Number} options.end - 结束年份\r\n   * @param {Boolean} options.isPrev - 是否为上个年代的年份\r\n   * @param {Boolean} options.isNext - 是否为下个年带的年份\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getYearsFragment (options) {\r\n    const {start, end, isPrev, isNext} = options\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_YEAR = STYLES.YEAR\r\n    const CLS_YEAR_PREV = STYLES.YEAR_PREV\r\n    const CLS_YEAR_NEXT = STYLES.YEAR_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_DISABLED = STYLES.DISABLED\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let minYear = this.data.minYear\r\n    let maxYear = this.data.maxYear\r\n    let year = start\r\n\r\n    for (; year <= end; year += 1) {\r\n      let pickedDate = this.getDate()\r\n      let isCurrent = (year === Calendar.getToday().year)\r\n      let isPicked = (year === pickedDate.year)\r\n      let className = CLS_YEAR\r\n      let $year = createElement('div', {\r\n        'data-year': year\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          year\r\n        ])\r\n      ])\r\n\r\n      if (isPrev) {\r\n        className += ' ' + CLS_YEAR_PREV\r\n      } else {\r\n        if (isNext) {\r\n          className += ' ' + CLS_YEAR_NEXT\r\n        }\r\n      }\r\n\r\n      if (isCurrent) {\r\n        className += ' ' + CLS_CURRENT\r\n      }\r\n\r\n      if (isPicked) {\r\n        className += ' ' + CLS_PICKED\r\n        elements.year = $year\r\n      }\r\n\r\n      if (year < minYear || year > maxYear) {\r\n        className += ' ' + CLS_DISABLED\r\n      }\r\n\r\n      $year.className = className\r\n\r\n      fragment.appendChild($year)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的页脚\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderFooter () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_TEXT = STYLES.TEXT\r\n    let elements = this.getEls()\r\n    let $today = elements.today.querySelector('.' + CLS_TEXT)\r\n    let $time = elements.time.querySelector('.' + CLS_TEXT)\r\n    let today = Calendar.getToday()\r\n    let timer = null\r\n\r\n    let renderTime = () => {\r\n      let time = new Date()\r\n      let hours = time.getHours()\r\n      let minutes = time.getMinutes()\r\n      let seconds = time.getSeconds()\r\n\r\n      if (timer) {\r\n        clearTimeout(timer)\r\n      }\r\n\r\n      if (hours < 10) {\r\n        hours = '0' + hours\r\n      }\r\n\r\n      if (minutes < 10) {\r\n        minutes = '0' + minutes\r\n      }\r\n\r\n      if (seconds < 10) {\r\n        seconds = '0' + seconds\r\n      }\r\n\r\n      $time.innerHTML = hours + ':' + minutes + ':' + seconds\r\n\r\n      timer = setTimeout(renderTime, 1000)\r\n    }\r\n\r\n    $today.innerHTML = '今天：' + today.text\r\n    Calendar.DOM.setAttribute($today, 'data-date', today.value)\r\n\r\n    renderTime()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击标题的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _titleClick () {\r\n    let viewMode = this.get('viewMode')\r\n\r\n    viewMode += 1\r\n\r\n    if (viewMode > 2) {\r\n      viewMode = 2\r\n    }\r\n\r\n    this.update(viewMode)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向上翻页的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _prevClick () {\r\n    this.prev()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向下翻页的事件处理起\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _nextClick () {\r\n    this.next()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击日期的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _dateClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-date')\r\n    let picked\r\n\r\n    this.pickDate($el)\r\n\r\n    picked = this.getPicked()\r\n\r\n    console.log('------------- _dateClick -------------')\r\n    if (this.get('pickMode') === 'single') {\r\n      console.log(time)\r\n    } else {\r\n      console.log(picked)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击月份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _monthClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-month')\r\n\r\n    this.pickMonth($el)\r\n\r\n    console.log('------------- _monthClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击年份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _yearClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-year')\r\n\r\n    this.pickYear($el)\r\n\r\n    console.log('------------- _yearClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击今天的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _todayClick () {\r\n    let time = Calendar.getToday().value\r\n\r\n    this.pickToday()\r\n\r\n    console.log('------------- _todayClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得年份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{value: (Number|{value, text, fullText}), text: string, fullText: string}}\r\n   */\r\n  static getYear (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = time.getYear()\r\n\r\n    if (year < 1900) {\r\n      year += 1900\r\n    }\r\n\r\n    return {\r\n      value: year,\r\n      text: year.toString(),\r\n      fullText: year + '年'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取月份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示月份的字符串或者数字（默认值：本月）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getMonth (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = Calendar.getYear(val)\r\n    let month = time.getMonth()\r\n\r\n    month += 1\r\n\r\n    return {\r\n      value: month,\r\n      text: year.text + '-' + month,\r\n      fullText: year.fullText + month + '月'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getDate (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let year = Calendar.getYear(val)\r\n    let month = Calendar.getMonth(val)\r\n    let day = Calendar.getDay(val)\r\n    let date = time.getDate()\r\n    let text = month.fullText + date + '日'\r\n\r\n    return {\r\n      year: year.value,\r\n      month: month.value,\r\n      date: date,\r\n      day: day.value,\r\n      text: year.value + '-' + month.value + '-' + date,\r\n      fullText: text + ' ' + day.fullText\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取星期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getDay (val) {\r\n    let time = !val ? new Date() : new Date(val)\r\n    let day = time.getDay()\r\n    let text = Calendar.defaults.DAYS[day]\r\n\r\n    return {\r\n      value: day,\r\n      text: text,\r\n      fullText: '星期' + text\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取今天的日期信息\r\n   * ========================================================================\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getToday () {\r\n    return Calendar.getDate()\r\n  }\r\n\r\n  /**\r\n   * 获取年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{start: (number|Number|{value, text}), end: (*|number)}}\r\n   */\r\n  static getYears (val) {\r\n    let year = Calendar.getYear(val).value\r\n    let numbers = year.toString().split('')\r\n    let lastNumber = parseInt(numbers[numbers.length - 1], 10)\r\n    let yearsStart = 0\r\n    let yearsEnd = 0\r\n\r\n    if (lastNumber === 0) {\r\n      yearsStart = year\r\n      yearsEnd = year + 9\r\n    } else {\r\n      if (lastNumber === 9) {\r\n        yearsStart = year - 9\r\n        yearsEnd = year\r\n      } else {\r\n        yearsStart = year - lastNumber\r\n        yearsEnd = year + (9 - lastNumber)\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: yearsStart,\r\n      end: yearsEnd\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期所属的整个星期的日期区间信息\r\n   * ========================================================================\r\n   * @param {String} time - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getWeekRanges (time) {\r\n    const DATES = Calendar.defaults.DATES\r\n    const isLeapYear = Calendar.isLeapYear\r\n    let day = Calendar.getDay(time).value\r\n    let begins = time.split('-')\r\n    let year = parseInt(begins[0], 10)\r\n    let month = parseInt(begins[1], 10)\r\n    let date = parseInt(begins[2], 10)\r\n    let days = DATES[month - 1]\r\n    let startYear = year\r\n    let startMonth = month\r\n    let startDate = date - day\r\n    let endYear = year\r\n    let endMonth = month\r\n    let endDate = date + (6 - day)\r\n    let prevMonth = 0\r\n\r\n    // 闰年2月为29天，默认值为28天，所以需要+1天\r\n    if (isLeapYear(year) && month === 2) {\r\n      days += 1\r\n    }\r\n\r\n    if (startDate < 1) {\r\n      // 上一个月\r\n      prevMonth = month - 2\r\n      startMonth -= 1\r\n\r\n      if (prevMonth < 0) {\r\n        startYear -= 1\r\n        startMonth = 12\r\n        startDate = DATES[11] + startDate\r\n      } else {\r\n        // 开始日期\r\n        startDate = DATES[prevMonth] + startDate\r\n      }\r\n    }\r\n\r\n    if (endDate > days) {\r\n      endMonth += 1\r\n\r\n      // 结束日期\r\n      endDate = endDate - days\r\n\r\n      if (prevMonth > 11) {\r\n        endYear += 1\r\n        endMonth = 1\r\n      }\r\n    }\r\n\r\n    return Calendar.getRanges((startYear + '-' + startMonth + '-' + startDate), (endYear + '-' + endMonth + '-' + endDate))\r\n  }\r\n\r\n  /**\r\n   * 获取两个日期之间的所有日期信息\r\n   * ========================================================================\r\n   * @param {String} begin - 表示日期的字符串\r\n   * @param {String} end - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getRanges (begin, end) {\r\n    const ONE_DAY_TO_SECONDS = 24 * 60 * 60 * 1000\r\n    let ranges = []\r\n    let begins = begin.split('-')\r\n    let ends = end.split('-')\r\n    let beginTime = new Date()\r\n    let endTime = new Date()\r\n    let beginNumber\r\n    let endNumber\r\n    let timeNumber\r\n\r\n    beginTime.setUTCFullYear(parseInt(begins[0], 10), parseInt(begins[1], 10) - 1, parseInt(begins[2], 10))\r\n    endTime.setUTCFullYear(parseInt(ends[0], 10), parseInt(ends[1], 10) - 1, parseInt(ends[2], 10))\r\n\r\n    beginNumber = beginTime.getTime()\r\n    endNumber = endTime.getTime()\r\n    timeNumber = beginNumber\r\n\r\n    for (; timeNumber <= endNumber; timeNumber += ONE_DAY_TO_SECONDS) {\r\n      ranges.push(Calendar.getDate(timeNumber).text)\r\n    }\r\n\r\n    return ranges\r\n  }\r\n\r\n  /**\r\n   * 判断是否为闰年\r\n   * ========================================================================\r\n   * @param {Number} year - 年份数值\r\n   * @returns {boolean}\r\n   */\r\n  static isLeapYear (year) {\r\n    return ((year % 4 === 0) || (year % 400 === 0)) && (year % 100 !== 0)\r\n  }\r\n\r\n  /**\r\n   * 判断是否为今天\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {*}\r\n   */\r\n  static isToday (time) {\r\n    return Calendar.isDatesEqual(time)\r\n  }\r\n\r\n  /**\r\n   * 判断两个日期是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} dateOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} [dateTwo] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {boolean}\r\n   */\r\n  static isDatesEqual (dateOne, dateTwo) {\r\n    const getDate = Calendar.getDate\r\n\r\n    return Calendar.isEqual(getDate(dateOne).text, getDate(dateTwo).text)\r\n  }\r\n\r\n  /**\r\n   * 判断两个时间是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} timeOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} timeTwo - 表示日期的字符串或者数字\r\n   * @returns {boolean}\r\n   */\r\n  static isEqual (timeOne, timeTwo) {\r\n    return new Date(timeOne).getTime() === new Date(timeTwo).getTime()\r\n  }\r\n}\r\n\r\n/**\r\n * 日历控件默认的配置信息\r\n * ========================================================================\r\n */\r\nCalendar.defaults = {\r\n  parent: 'calendar',\r\n  time: '',\r\n  // 0 - 日期显示模式（默认值）\r\n  // 1 - 月份显示模式\r\n  // 2 - 年代显示模式\r\n  viewMode: 0,\r\n  // single - 单选（默认值）\r\n  // multiple - 多选\r\n  // range - 范围多选\r\n  // week - 整个星期选择\r\n  pickMode: 'single',\r\n  MONTHS: [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n  ],\r\n  DAYS: [\r\n    '日',\r\n    '一',\r\n    '二',\r\n    '三',\r\n    '四',\r\n    '五',\r\n    '六'\r\n  ],\r\n  DATES: [\r\n    31,\r\n    28,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31\r\n  ],\r\n  STYLES: {\r\n    WRAP: 'cal-md',\r\n    HEADER: 'cal-hd',\r\n    TITLE: 'cal-title',\r\n    SWITCHER: 'cal-switcher',\r\n    PREV: 'cal-prev',\r\n    ICON_PREV: 'icon-angle-up',\r\n    NEXT: 'cal-next',\r\n    ICON_NEXT: 'icon-angle-down',\r\n    BODY: 'cal-bd',\r\n    WEEK: 'cal-week',\r\n    WEEKEND: 'cal-weekend',\r\n    DAY: 'cal-day',\r\n    DATES: 'cal-dates',\r\n    DATE: 'cal-date',\r\n    DATE_PREV: 'cal-date-prev',\r\n    DATE_NEXT: 'cal-date-next',\r\n    MONTHS: 'cal-months',\r\n    MONTH: 'cal-month',\r\n    MONTH_NEXT: 'cal-month-next',\r\n    YEARS: 'cal-years',\r\n    YEAR: 'cal-year',\r\n    YEAR_PREV: 'cal-year-prev',\r\n    YEAR_NEXT: 'cal-year-next',\r\n    FOOTER: 'cal-ft',\r\n    FOOTER_DATE: 'cal-ft-date',\r\n    TODAY: 'cal-today',\r\n    FOOTER_TIME: 'cal-ft-time',\r\n    TIME: 'cal-time',\r\n    TEXT: 'cal-text',\r\n    CURRENT: 'cal-current',\r\n    PICKED: 'cal-picked',\r\n    PICKED_RANGE: 'cal-picked-range',\r\n    PICKED_POINT: 'cal-picked-point',\r\n    DISABLED: 'cal-disabled',\r\n    HIDDEN: 'cal-hidden'\r\n  }\r\n}\r\n\r\n/**\r\n * 常用的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.Utils = {\r\n  uuid: 0,\r\n  isString: (o) => {\r\n    return typeof o === 'string'\r\n  },\r\n  isNumber: (o) => {\r\n    return typeof o === 'number'\r\n  },\r\n  isArray: (o) => {\r\n    if (Array.isArray) {\r\n      return Array.isArray(o)\r\n    } else {\r\n      return Object.prototype.toString.apply(o) === '[object Array]'\r\n    }\r\n  },\r\n  isElement: (o) => {\r\n    return o && o.nodeName && o.tagName && o.nodeType === 1\r\n  },\r\n  isEmpty: (str) => {\r\n    return Calendar.Utils.isString(str) && str === ''\r\n  },\r\n  guid: (prefix) => {\r\n    let Utils = Calendar.Utils\r\n\r\n    Utils.uuid += 1\r\n\r\n    return prefix ? prefix + '-' + Utils.uuid : 'guid-' + Utils.uuid\r\n  },\r\n  trim: (str) => {\r\n    return str.replace(/^\\s+/g, '').replace(/\\s+$/g, '')\r\n  },\r\n  stripTags: (str) => {\r\n    return str.replace(/<\\/?[^>]+(>|$)/g, '')\r\n  }\r\n}\r\n\r\n/**\r\n * DOM 操作相关的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.DOM = {\r\n  /**\r\n   * 创建 DOM 节点，并添加属性和子节点\r\n   * ========================================================================\r\n   * @param {String} tagName - 标签名称\r\n   * @param {Object} attributes - 属性对象\r\n   * @param {Array} children - 子节点数组\r\n   * @returns {HTMLElement}\r\n   */\r\n  createElement: (tagName, attributes, children) => {\r\n    const Utils = Calendar.Utils\r\n    let element = document.createElement(tagName)\r\n\r\n    for (let attr in attributes) {\r\n      if (attributes.hasOwnProperty(attr)) {\r\n        Calendar.DOM.setAttribute(element, attr, attributes[attr])\r\n      }\r\n    }\r\n\r\n    if (Utils.isArray(children)) {\r\n      children.forEach((child) => {\r\n        let childNode\r\n\r\n        if (Utils.isElement(child)) {\r\n          childNode = child\r\n        } else {\r\n          if (Utils.isString(child) || Utils.isNumber(child)) {\r\n            let text = Utils.isString(child) ? Utils.trim(Utils.stripTags(child)) : child.toString()\r\n\r\n            childNode = document.createTextNode(text)\r\n          }\r\n        }\r\n\r\n        element.appendChild(childNode)\r\n      })\r\n    }\r\n\r\n    return element\r\n  },\r\n  /**\r\n   * 给 DOM 节点设置属性/值\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} attr - 属性名称\r\n   * @param {String|Number|Boolean} value - 属性值\r\n   */\r\n  setAttribute: (el, attr, value) => {\r\n    let tagName = el.tagName.toLowerCase()\r\n\r\n    switch (attr) {\r\n      case 'style':\r\n        el.style.cssText = value\r\n        break\r\n      case 'value':\r\n        if (tagName === 'input' || tagName === 'textarea') {\r\n          el.value = value\r\n        } else {\r\n          el.setAttribute(attr, value)\r\n        }\r\n        break\r\n      case 'className':\r\n        el.className = value\r\n        break\r\n      default:\r\n        el.setAttribute(attr, value)\r\n        break\r\n    }\r\n  },\r\n  /**\r\n   * 检测 DOM 节点是否包含名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {*}\r\n   */\r\n  hasClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass) {\r\n      return false\r\n    }\r\n\r\n    return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\r\n  },\r\n  /**\r\n   * 给 DOM 节点添加名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  addClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n\r\n    el.className = allClass\r\n  },\r\n  /**\r\n   * 移除 DOM 节点的 className 样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  removeClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass || !Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass = Calendar.Utils.trim(allClass.replace(className, ''))\r\n\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\n/**\r\n * 代理事件\r\n * ========================================================\r\n * 说明：代码修改至 Nicolas Gallagher 的 delegate.js\r\n * 项目 GitHub 地址：https://github.com/necolas/delegate.js\r\n * ========================================================\r\n */\r\nCalendar.Delegate = {\r\n  /**\r\n   * 绑定代理事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   * @param {Boolean} [once] - 是否只触发一次（默认值：false - 事件冒泡）\r\n   */\r\n  on (el, selector, type, callback, context, capture, /* private */ once) {\r\n    const Delegate = Calendar.Delegate\r\n    const wrapper = function (e) {\r\n      let delegateTarget = Delegate.getDelegateTarget(el, e.target, selector)\r\n\r\n      e.delegateTarget = delegateTarget\r\n\r\n      if (delegateTarget) {\r\n        if (once === true) {\r\n          Delegate.off(el, type, wrapper)\r\n        }\r\n        callback.call(context || el, e)\r\n      }\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    callback._delegateWrapper = callback\r\n    el.addEventListener(type, wrapper, capture || false)\r\n\r\n    return callback\r\n  },\r\n  /**\r\n   * 绑定只触发一次的事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  once (el, type, selector, callback, context, capture) {\r\n    Calendar.Delegate.on(el, type, selector, callback, context, capture, true)\r\n  },\r\n  /**\r\n   * 取消事件绑定\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 取消绑定（代理）事件的 DOM 节点\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  off (el, type, callback, capture) {\r\n    if (callback._delegateWrapper) {\r\n      callback = callback._delegateWrapper\r\n      delete callback._delegateWrapper\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    el.removeEventListener(type, callback, capture || false)\r\n  },\r\n  /**\r\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stop (evt) {\r\n    const Delegate = Calendar.Delegate\r\n\r\n    Delegate.stopPropagation(evt)\r\n    Delegate.preventDefault(evt)\r\n  },\r\n  /**\r\n   * 终止事件在传播过程的捕获或冒泡\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stopPropagation (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.stopPropagation) {\r\n      evt.stopPropagation()\r\n    } else {\r\n      event.cancelBubble = true\r\n    }\r\n  },\r\n  /**\r\n   * 阻止事件的默认行为\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  preventDefault (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault()\r\n    } else {\r\n      event.returnValue = false\r\n    }\r\n  },\r\n  /**\r\n   * 通过 className 获得事件代理节点的事件代理目标节点\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定事件代理的节点\r\n   * @param target - （触发事件后）事件的目标对象\r\n   * @param selector - 目标节点的类选择器\r\n   * @returns {HTMLElement|Null}\r\n   */\r\n  getDelegateTarget (el, target, selector) {\r\n    while (target && target !== el) {\r\n      if (Calendar.DOM.hasClass(target, selector.replace('.', ''))) {\r\n        return target\r\n      }\r\n\r\n      target = target.parentElement\r\n    }\r\n\r\n    return null\r\n  }\r\n}\r\n"]}