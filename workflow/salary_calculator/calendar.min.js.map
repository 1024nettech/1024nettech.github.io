{"version":3,"sources":["calendar.js"],"names":["this","Calendar","obj","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","arg","key","input","hint","prim","toPrimitive","undefined","String","Number","res","call","TypeError","options","_classCallCheck","viewMode","attributes","parent","time","pickMode","hasSwitcher","hasFooter","hasClock","onDatePick","onMonthPick","onYearPick","onTodayPick","MONTHS","DAYS","DATES","STYLES","elements","wrap","header","title","switcher","prev","next","body","week","dates","months","years","footer","today","data","minYear","maxYear","year","month","date","picked","text","fullText","initialize","render","addEventListeners","Constructor","protoProps","staticProps","startDate","val","Date","toAllSupported","getFullYear","value","toString","getMonth","getRanges","getYear","day","fullDate","getDate","getDay","defaults","yearsEnd","lastNumber","isToday","isDatesEqual","yearsStart","start","end","startYear","startMonth","isLeapYear","endYear","endDate","parseInt","Utils","prevMonth","begins","days","endMonth","split","push","begin","HEADER","SWITCHER","setUTCFullYear","beginTime","getTime","endTime","beginNumber","WRAP","timeNumber","endNumber","ranges","isEqual","dateOne","dateTwo","timeOne","timeTwo","isElement","nodeName","isNumber","str","indexOf","replace","unshift","join","monthText","set","setYear","get","setDate","_setYears","dateRanges","getWeekRanges","_createElements","$switcher","appendChild","$header","$body","_renderDays","_renderDates","_renderFooter","_renderMonths","$footer","_renderYears","$wrap","$fragment","selectorYear","selectorToday","Delegate","selectorTitle","selectorPrev","DOT","PREV","NEXT","selectorDate","DATE","selectorMonth","MONTH","selectorNext","getEls","on","CLICK","_dateClick","_prevClick","_nextClick","_yearClick","_todayClick","destroy","removeEventListeners","hide","remove","reset","off","_titleClick","_monthClick","removeChild","attr","assign","arguments","updateViewMode","updateView","mode","$months","CLS_HIDDEN","HIDDEN","addClass","DOM","removeClass","_renderTitle","$years","$week","_repaintDates","_repaintMonths","$dates","_repaintYears","getYears","setMonth","pickedDates","callback","CLS_PICKED","PICKED","$picked","_removePicked","hasClass","isFunction","$date","getAttribute","getPicked","_updateDateRanges","sort","$month","$year","getToday","update","querySelector","show","index","splice","className","CLS_HEADER","CLS_BODY","BODY","createElement","CLS_TITLE","TITLE","CLS_TEXT","CLS_FOOTER","CLS_FOOTER_DATE","CLS_TODAY","CLS_FOOTER_TIME","CLS_SWITCHER","CLS_PREV","wrapClassName","weekClassName","CLS_ICON_PREV","datesClassName","CLS_DATES","yearsClassName","CLS_NEXT","SPACE","monthsClassName","CLS_ICON_NEXT","CLS_WEEK","CLS_WRAP_WITHOUT_FOOTER","id","guid","$title","CLS_DAY","fragment","CLS_TIME","TEXT","prevDays","nextDays","innerHTML","DAY","nextYear","nextMonth","document","createDocumentFragment","forEach","firstDateDay","prevYear","CLS_DATE","CLS_CURRENT","isPrev","_getDatesFragment","isNext","CLS_DATE_PREV","isPicked","CLS_DATE_NEXT","CLS_PICKED_RANGE","CLS_WEEKEND","DATE_NEXT","_loop","$children","data-date","isCurrent","PICKED_RANGE","$pickedDates","CLS_MONTH","CLS_MONTH_NEXT","pickedDate","_this2","nextStartYear","prevEndYear","_getYearsFragment","data-month","CLS_YEAR","CLS_YEAR_NEXT","prevStartYear","renderTime","nextEndYear","CLS_DISABLED","YEAR_PREV","DISABLED","data-year","CLS_YEAR_PREV","console","hours","$el","evt","delegateTarget","minutes","seconds","getSeconds","timer","$time","setTimeout","setAttribute","getHours","getMinutes","$today","clearTimeout","pickDate","log","pickMonth","pickYear","pickToday","element","WRAP_WITHOUT_FOOTER","ICON_PREV","allClass","WEEK","WEEKEND","el","DATE_PREV","MONTH_PREV","MONTH_NEXT","YEARS","YEAR","YEAR_NEXT","FOOTER","FOOTER_DATE","TODAY","CURRENT","PICKED_POINT","FOOTER_TIME","TIME","uuid","isString","e","o","isArray","Array","capture","apply","prefix","trim","tagName","nodeType","stripTags","children","childNode","stop","stopPropagation","preventDefault","child","event","createTextNode","style","cssText","getDelegateTarget","match","context","type","once","wrapper","selector","_delegateWrapper","addEventListener","window","returnValue","nextKey","nextSource","hasOwnProperty","to"],"mappings":"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","file":"calendar.min.js","sourcesContent":["/**\n * Calendar 类\n */\nclass Calendar {\n  /**\n   * 构造函数\n   * ========================================================================\n   * @constructor\n   * @param {Object} [options] - 日历控件的配置参数\n   * @param [options.parent] - 日历显示的位置（DOM 节点 ID）\n   * @param [options.time] - 日历初始化显示的时间\n   * @param [options.viewMode] - 日历的试图模式：0 - 日期试图（默认值）\n   *                                           1 - 月份试图\n   *                                           2 - 年代试图\n   * @param [options.pickMode] - 日历的日期选择模式: single - 单选模式（默认值）\n   *                                               multiple - 多选模式\n   *                                               range - 范围选择模式\n   *                                               week - 星期选择模式\n   * @param [options.hasSwitcher] - 是否显示上下切换按钮（默认值：true）\n   * @param [options.hasFooter] - 是否显示日历页脚（默认值：true）\n   * @param [options.hasClock] - 是否显示当前时间（默认值：true）\n   * @param [options.onDatePick] - 选择日期后的自定义事件处理器\n   * @param [options.onMonthPick] - 选择月份后的自定义事件处理器\n   * @param [options.onYearPick] - 选择年份后的自定义事件处理器\n   * @param [options.onTodayPick] - 点击当前日期的自定义事件处理器\n   * @param [options.MONTHS] - 月份常量（格式：去年11/12月 + 今天月份 + 明年1/2月）\n   * @param [options.DAYS] - 星期常量（周日为一周的第一天，周六为一周的最后一天）\n   * @param [options.DATES] - 月份天数常量（2月为28天，闰年则 28 + 1）\n   * @param [options.STYLES] - 日历控件的样式常量\n   * @returns {Calendar}\n   */\n  constructor (options) {\n    /**\n     * Calendar 控件的配置属性\n     * ========================================================================\n     */\n    this.attributes = {\n      // 日历显示的位置（DOM 节点 ID）\n      parent: '',\n      // 日历初始化显示的时间\n      time: '',\n      // 日历的试图模式：\n      // 0 - 日期试图（默认值）\n      // 1 - 月份试图\n      // 2 - 年代试图\n      viewMode: 0,\n      // 日历的日期选择模式\n      // single - 单选模式（默认值）\n      // multiple - 多选模式\n      // range - 范围选择模式\n      // week - 星期选择模式\n      pickMode: 'single',\n      // 是否显示上下切换按钮（默认值：true）\n      hasSwitcher: true,\n      // 是否显示日历页脚（默认值：true）\n      hasFooter: true,\n      // 是否显示当前时间（默认值：true）\n      hasClock: true,\n      // 选择日期后的自定义事件处理器\n      // time - 选中的日期时间范围\n      // $el - 点击的 DOM 节点\n      // calendar - 日历控件的实例\n      // onDatePick: function (time, $el, calendar) {\n      //   console.log('选择时间：' + time)\n      //   console.log('选择的 DOM 节点：' + $el)\n      //   console.log('日历实例：' + calendar)\n      // },\n      onDatePick: null,\n      // 选择月份后的自定义事件处理器\n      // time - 选中的日期时间\n      // $el - 点击的 DOM 节点\n      // calendar - 日历控件的实例\n      // onMonthPick: function (time, $el, calendar) {\n      //   console.log('选择时间：', time)\n      //   console.log('选择DOM：', $el)\n      //   console.log('日历实例：', calendar)\n      // }\n      onMonthPick: null,\n      // 选择年份后的自定义事件处理器\n      // time - 选中的日期时间\n      // $el - 点击的 DOM 节点\n      // calendar - 日历控件的实例\n      // onYearPick: function (time, $el, calendar) {\n      //   console.log('选择时间：', time)\n      //   console.log('选择DOM：', $el)\n      //   console.log('日历实例：', calendar)\n      // }\n      onYearPick: null,\n      // 点击当前日期的自定义事件处理器\n      // time - 选中的日期时间\n      // $el - 点击的 DOM 节点\n      // calendar - 日历控件的实例\n      // onTodayPick: function (time, $el, calendar) {\n      //   console.log('选择时间：', time)\n      //   console.log('选择的 DOM 节点：', $el)\n      //   console.log('日历实例：', calendar)\n      // }\n      onTodayPick: null,\n      // 月份常量\n      MONTHS: [],\n      // 星期常量\n      DAYS: [],\n      // 月份天数常量\n      DATES: [],\n      // 日历控件的样式常量\n      STYLES: {}\n    }\n\n    /**\n     * Calendar 控件相关的 DOM 节点属性\n     * ========================================================================\n     */\n    this.elements = {\n      // 显示日历控件的父节点\n      parent: null,\n      // 日历控件的根节点\n      wrap: null,\n      // 日历控件的头部节点\n      header: null,\n      // 日历控件的标题节点\n      title: null,\n      // 日历控件的切换器节点\n      switcher: null,\n      // 日历控件向上切换按钮节点\n      prev: null,\n      // 日历控件向下切换按钮节点\n      next: null,\n      // 日历控件的主体内容节点\n      body: null,\n      // 日历控件的星期栏节点\n      week: null,\n      // 日历控件的日期显示节点\n      dates: null,\n      // 日历控件的月份显示节点\n      months: null,\n      // 日历控件的年代显示节点\n      years: null,\n      // 日历控件的页脚节点\n      footer: null,\n      // 日历控件的当前日期显示节点\n      today: null,\n      // 日历控件的当前时间显示节点\n      time: null\n    }\n\n    /**\n     * Calendar 控件相关的数据属性\n     * ========================================================================\n     */\n    this.data = {\n      // 日历可以显示的最小年份\n      minYear: 0,\n      // 日历可以显示的最大年份\n      maxYear: 0,\n      // 当前选中日期的年份\n      year: 0,\n      // 当前选中日期的月份\n      month: 0,\n      // 选中的日期信息\n      date: {\n        // 年份\n        year: 0,\n        // 月份\n        month: 0,\n        // 日期\n        date: 0,\n        // 星期几\n        day: 0,\n        // 日期的英文表示（格式：2019-6-2）\n        text: '',\n        // 日期的完整中文表示（格式：2019年6月2日 星期日）\n        fullText: ''\n      },\n      // 多选（multiple/range/week）模式下，选中的日期数据\n      picked: []\n    }\n\n    // 执行初始化操作\n    // 绘制界面\n    // 绑定事件处理器\n    this.initialize(options)\n        .render()\n        .addEventListeners()\n\n    return this\n  }\n\n  /**\n   * 初始化方法\n   * ========================================================================\n   * 1. 初始化配置信息；\n   * 2. 初始化数据信息；\n   * 3. 初始化 DOM 信息（创建控件相关的 DOM 节点）；\n   * ========================================================================\n   * @param {Object} options - 配置信息\n   * @see this.attributes\n   * @returns {Calendar}\n   */\n  initialize (options) {\n    let year = Calendar.getYear().value\n    let pickMode\n    let time\n    let month\n    let monthText\n    let dateRanges\n    let startDate\n    let endDate\n\n    // 初始化配置\n    this.set(Calendar.defaults)\n        .set(options)\n\n    time = this.get('time')\n    pickMode = this.get('pickMode')\n    month = Calendar.getMonth(time)\n    monthText = month.text\n\n    // 初始化数据\n    this.setYear(time)\n        .setMonth(time)\n        .setDate(time)\n        ._setYears(time)\n\n    // 初始化（多选模式）选中的时间\n    switch (pickMode) {\n      case 'multiple':\n        this.data.picked.push(this.getDate().text)\n\n        break\n      case 'range':\n        startDate = monthText + '-' + 1\n        endDate = monthText + '-' + this.get('DATES')[month.value - 1]\n\n        // 默认选中整个月\n        this.data.picked = [\n          startDate,\n          endDate\n        ]\n\n        break\n      case 'week':\n        dateRanges = Calendar.getWeekRanges(time)\n        startDate = dateRanges[0]\n        endDate = dateRanges[dateRanges.length - 1]\n\n        // 默认选中配置日期所在的那个星期\n        this.data.picked = [\n          startDate,\n          endDate\n        ]\n\n        break\n    }\n\n    // 设置日历控件可以显示的年份范围\n    this.data.minYear = year - 100\n    this.data.maxYear = year + 100\n\n    // 创建控件相关的 DOM 节点\n    this._createElements()\n\n    return this\n  }\n\n  /**\n   * 绘制日历控件界面的方法\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  render () {\n    let elements = this.getEls()\n    let $wrap = elements.wrap\n    let $header = elements.header\n    let $switcher = elements.switcher\n    let $body = elements.body\n    let $footer = elements.footer\n    let $fragment = document.createDocumentFragment()\n\n    // 绘制头部\n    this._renderTitle()\n    $header.appendChild(elements.title)\n\n    // 配置了显示上下切换按钮\n    if(this.get('hasSwitcher')) {\n      $switcher.appendChild(elements.prev)\n      $switcher.appendChild(elements.next)\n      $header.appendChild($switcher)\n    }\n\n    // 绘制星期栏\n    this._renderDays()\n    $body.appendChild(elements.week)\n\n    // 绘制日期\n    this._renderDates()\n    $body.appendChild(elements.dates)\n\n    // 绘制月份\n    this._renderMonths()\n    $body.appendChild(elements.months)\n\n    // 绘制年代\n    this._renderYears()\n    $body.appendChild(elements.years)\n\n    // 配置了显示页脚\n    if(this.get('hasFooter')) {\n      // 绘制页脚\n      this._renderFooter()\n      $footer.appendChild(elements.today)\n\n      // 配置了显示当前时间\n      if(this.get('hasClock')) {\n        $footer.appendChild(elements.time)\n      }\n    }\n\n    // 将主体模块绘制出来\n    $wrap.appendChild($header)\n    $wrap.appendChild($body)\n\n    // 配置了显示页脚\n    if(this.get('hasFooter')) {\n      $wrap.appendChild($footer)\n    }\n\n    // 将控件零时保存在文档碎片中\n    $fragment.appendChild($wrap)\n\n    // 一次性绘制出整个日历控件\n    elements.parent.appendChild($fragment)\n\n    return this\n  }\n\n  /**\n   * 给日历控件相关的 DOM 节点绑定事件处理器\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  addEventListeners () {\n    const DOT = '.'\n    const STYLES = this.get('STYLES')\n    const CLICK = 'click'\n    const selectorTitle = DOT + STYLES.TITLE\n    const selectorPrev = DOT + STYLES.PREV\n    const selectorNext = DOT + STYLES.NEXT\n    const selectorDate = DOT + STYLES.DATE\n    const selectorMonth = DOT + STYLES.MONTH\n    const selectorYear = DOT + STYLES.YEAR\n    const selectorToday = DOT + STYLES.TODAY\n    const Delegate = Calendar.Delegate\n    let $wrap = this.getEls().wrap\n\n    // 绑定点击标题的事件处理器\n    Delegate.on($wrap, selectorTitle, CLICK, this._titleClick, this)\n\n    if(this.get('hasSwitcher')) {\n      // 绑定点击向上按钮的事件处理器\n      Delegate.on($wrap, selectorPrev, CLICK, this._prevClick, this)\n      // 绑定点击向下按钮的事件处理器\n      Delegate.on($wrap, selectorNext, CLICK, this._nextClick, this)\n    }\n\n    // 绑定点击日期的事件处理器\n    Delegate.on($wrap, selectorDate, CLICK, this._dateClick, this)\n    // 绑定点击月份的事件处理器\n    Delegate.on($wrap, selectorMonth, CLICK, this._monthClick, this)\n    // 绑定点击年份的事件处理器\n    Delegate.on($wrap, selectorYear, CLICK, this._yearClick, this)\n\n    if(this.get('hasClock')) {\n      // 绑定点击今天的事件处理器\n      Delegate.on($wrap, selectorToday, CLICK, this._todayClick, this)\n    }\n\n    return this\n  }\n\n  /**\n   * 重启日历控件\n   * ========================================================================\n   * 1. 销毁日历控件：\n   *    1.1 移除所有的绑定的事件处理器\n   *    1.2 隐藏控件\n   *    1.3 移除所有 DOM 节点\n   *    1.4 重置所有属性\n   * 2. 初始化控件\n   * 3. 绘制控件\n   * 4. 绑定事件处理起\n   * ========================================================================\n   * @param {Object} options - 配置信息\n   * @see this.attributes\n   * @returns {Calendar}\n   */\n  reload (options) {\n    this.destroy().initialize(options).render().addEventListeners()\n\n    return this\n  }\n\n  /**\n   * 销毁日历控件\n   * ========================================================================\n   * 1 移除所有的绑定的事件处理器\n   * 2 隐藏控件\n   * 3 移除所有 DOM 节点\n   * 4 重置所有属性\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  destroy () {\n    this.removeEventListeners().hide().remove().reset()\n\n    return this\n  }\n\n  /**\n   * 移除所有绑定的事件处理器\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  removeEventListeners () {\n    const CLICK = 'click'\n    const Delegate = Calendar.Delegate\n    let $wrap = this.getEls().wrap\n\n    Delegate.off($wrap, CLICK, this._titleClick)\n\n    if(this.get('hasSwitcher')) {\n      Delegate.off($wrap, CLICK, this._prevClick)\n      Delegate.off($wrap, CLICK, this._nextClick)\n    }\n\n    Delegate.off($wrap, CLICK, this._dateClick)\n    Delegate.off($wrap, CLICK, this._monthClick)\n    Delegate.off($wrap, CLICK, this._yearClick)\n\n    if(this.get('hasClock')) {\n      Delegate.off($wrap, CLICK, this._todayClick)\n    }\n\n    return this\n  }\n\n  /**\n   * 移除所有 DOM 节点\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  remove () {\n    let elements = this.getEls()\n\n    elements.parent.removeChild(elements.wrap)\n\n    return this\n  }\n\n  /**\n   * 重置所有属性\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  reset () {\n    this.attributes = {\n      parent: '',\n      time: '',\n      viewMode: 0,\n      pickMode: 'single',\n      hasSwitcher: true,\n      hasFooter: true,\n      hasClock: true,\n      MONTHS: [],\n      DAYS: [],\n      DATES: [],\n      STYLES: {}\n    }\n\n    this.elements = {\n      parent: null,\n      wrap: null,\n      header: null,\n      title: null,\n      switcher: null,\n      prev: null,\n      next: null,\n      body: null,\n      week: null,\n      dates: null,\n      months: null,\n      years: null,\n      footer: null,\n      today: null,\n      time: null,\n      year: null,\n      month: null,\n      date: null\n    }\n\n    this.data = {\n      minYear: 0,\n      maxYear: 0,\n      years: {\n        start: 0,\n        end: 0\n      },\n      year: 0,\n      month: 0,\n      date: {\n        year: 0,\n        month: 0,\n        date: 0,\n        day: 0,\n        text: '',\n        fullText: ''\n      },\n      picked: []\n    }\n\n    return this\n  }\n\n  /**\n   * 获取配置信息\n   * ========================================================================\n   * @param {String} attr - 配置属性名称\n   * @returns {*} - 返回对应属性的值\n   */\n  get (attr) {\n    return this.attributes[attr]\n  }\n\n  /**\n   * 设置配置信息\n   * ========================================================================\n   * @param {Object} [options] - 配置信息对象\n   * @returns {Calendar}\n   */\n  set (options = {}) {\n    Object.assign(this.attributes, options)\n\n    return this\n  }\n\n  /**\n   * 获取日历控件所有相关的 DOM 节点的对象\n   * ========================================================================\n   * @see Calendar.elements\n   * @returns {Object}\n   */\n  getEls () {\n    return this.elements\n  }\n\n  /**\n   * 获取日历控件当前显示的年份信息\n   * ========================================================================\n   * @returns {Number} - 返回日历控件当前显示的年份\n   */\n  getYear () {\n    return this.data.year\n  }\n\n  /**\n   * 设置日历控件当前的年份\n   * ========================================================================\n   * @param {String|Number} [time] - 表示年份的字符串或数字（默认值：今年）\n   *                                 字符串格式：'2019'、'2019-2' 或 '2019-2-2'\n   *                                 数字格式：  1546300800000\n   * @returns {Calendar}\n   */\n  setYear (time) {\n    this.data.year = Calendar.getYear(time).value\n\n    return this\n  }\n\n  /**\n   * 获得日历控件当前显示的月份信息\n   * ========================================================================\n   * @returns {Number} - 返回日历控件当前显示的月份\n   */\n  getMonth () {\n    return this.data.month\n  }\n\n  /**\n   * 设置日历控件当前显示的月份\n   * ========================================================================\n   * @param {String|Number} [time] - 表示月份的字符串或数字（默认值：本月）\n   * @returns {Calendar}\n   */\n  setMonth (time) {\n    this.data.month = Calendar.getMonth(time).value\n\n    return this\n  }\n\n  /**\n   * 获取日历控件当前选中的日期\n   * ========================================================================\n   * @returns {Object} - 返回日历控件当前选中的日期\n   */\n  getDate () {\n    return this.data.date\n  }\n\n  /**\n   * 设置日历控件当前选中的日期\n   * ========================================================================\n   * @param {String|Number} [time] - 表示日期的字符串或者数字（默认值：今天）\n   * @returns {Calendar}\n   */\n  setDate (time) {\n    this.data.date = Calendar.getDate(time)\n\n    return this\n  }\n\n  /**\n   * 获取日历控件当前显示的年份所在的年代信息\n   * ========================================================================\n   * @returns {Object} - 返回当前所在年代信息\n   */\n  getYears () {\n    return this.data.years\n  }\n\n  /**\n   * 获取日历控件在多选（multiple/range/week）模式下选中的日期信息\n   * ========================================================================\n   * @returns {Array} - 返回选中的日期信息\n   */\n  getPicked () {\n    return this.data.picked\n  }\n\n  /**\n   * 根据试图显示模式\n   * ========================================================================\n   * 1. 切换日历控件的显示模式\n   * 2. 更新显示内容\n   * ========================================================================\n   * @param {Number} viewMode - 显示模式的值：\n   *                            0 - 日期显示模式（默认值）\n   *                            1 - 月份显示模式\n   *                            2 - 年代显示模式\n   * @returns {Calendar}\n   */\n  update (viewMode = 0) {\n    this.updateViewMode(viewMode).updateView()\n\n    return this\n  }\n\n  /**\n   * 更新试图显示模式的配置信息\n   * ========================================================================\n   * @param {Number} viewMode - 显示模式的值（默认值：0）\n   * @see this.update\n   * @returns {Calendar}\n   */\n  updateViewMode (viewMode = 0) {\n    let mode = viewMode\n\n    if (mode > 2) {\n      mode = 2\n    } else {\n      if (mode < 0) {\n        mode = 0\n      }\n    }\n\n    this.set({\n      viewMode: mode\n    })\n\n    return this\n  }\n\n  /**\n   * 更新日历控件的显示内容\n   * ========================================================================\n   * 1. 更新标题内容\n   *    1.1 日期显示模式：显示年份和月份\n   *    1.2 月份显示模式：显示年份\n   *    1.3 年份显示模式：显示年代区间信息\n   * 2. 更细主体内容\n   *    2.1 日期显示模式：隐藏年份和月份的 DOM 节点，显示星期栏和日期信息\n   *    2.2 月份显示模式：隐藏年份、星期栏以及日期信息\n   *    2.3 年份显示模式：隐藏月份 DOM 节点、星期栏以及日期信息\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  updateView () {\n    const STYLES = this.get('STYLES')\n    const CLS_HIDDEN = STYLES.HIDDEN\n    const DOM = Calendar.DOM\n    const addClass = DOM.addClass\n    const removeClass = DOM.removeClass\n    let elements = this.getEls()\n    let $week = elements.week\n    let $dates = elements.dates\n    let $months = elements.months\n    let $years = elements.years\n\n    this._renderTitle()\n\n    switch (this.get('viewMode')) {\n      // 日期显示模式\n      case 0:\n        addClass($months, CLS_HIDDEN)\n        addClass($years, CLS_HIDDEN)\n\n        removeClass($week, CLS_HIDDEN)\n        removeClass($dates, CLS_HIDDEN)\n\n        // 重新绘制日期\n        this._repaintDates()\n\n        break\n      // 月份显示模式\n      case 1:\n        addClass($week, CLS_HIDDEN)\n        addClass($dates, CLS_HIDDEN)\n        addClass($years, CLS_HIDDEN)\n\n        removeClass($months, CLS_HIDDEN)\n\n        // 重新绘制月份\n        this._repaintMonths()\n\n        break\n      // 年份显示模式\n      case 2:\n        addClass($week, CLS_HIDDEN)\n        addClass($dates, CLS_HIDDEN)\n        addClass($months, CLS_HIDDEN)\n\n        removeClass($years, CLS_HIDDEN)\n\n        // 重新绘制年份\n        this._repaintYears()\n\n        break\n    }\n\n    return this\n  }\n\n  /**\n   * 向上翻页\n   * ========================================================================\n   * 1. 日期显示模式：向上翻页，显示上一个月份的日期信息\n   * 2. 月份显示模式：向上翻页，显示上一年的月份信息\n   * 3. 年份显示模式：向上翻页，显示上一个年代（10前）的年份信息\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  prev () {\n    let years = this.getYears()\n    let startYear = years.start\n    let year = this.getYear()\n    let month = this.getMonth()\n    let minYear = this.data.minYear\n    let time\n\n    // 针对显示模式，处理相应的翻页逻辑\n    switch (this.get('viewMode')) {\n      // 日期显示模式\n      case 0:\n        // 切换月份\n        month -= 1\n\n        // 到了上一年，切换年份\n        if (month < 1) {\n          month = 12\n          year -= 1\n\n          // 确保不小于最小可以显示的年份\n          if (year < minYear) {\n            year = minYear\n          }\n        }\n\n        time = year + '-' + month + '-1'\n\n        this.setYear(time)\n            .setMonth(time)\n\n        break\n      case 1:\n        // 切换年份\n        year -= 1\n\n        if (year < minYear) {\n          year = minYear\n        }\n\n        this.setYear(year + '-1-1')\n\n        break\n      case 2:\n        // 切换年代\n        startYear -= 10\n\n        if (startYear < minYear) {\n          startYear = minYear + 9\n        }\n\n        this._setYears(startYear.toString())\n\n        break\n    }\n\n    // 更新显示内容\n    this.updateView()\n\n    return this\n  }\n\n  /**\n   * 向下翻页\n   * ========================================================================\n   * 1. 日期显示模式：向下翻页，显示下一个月份的日期信息\n   * 2. 月份显示模式：向下翻页，显示下一年的月份信息\n   * 3. 年份显示模式：向下翻页，显示下一个年代（10后）的年份信息\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  next () {\n    let years = this.getYears()\n    let startYear = years.start\n    let year = this.getYear()\n    let month = this.getMonth()\n    let maxYear = this.data.maxYear\n    let time\n\n    switch (this.get('viewMode')) {\n      case 0:\n        month += 1\n\n        if (month > 12) {\n          month = 1\n          year += 1\n\n          if (year > maxYear) {\n            year = maxYear\n          }\n        }\n\n        time = year + '-' + month + '-1'\n\n        this.setYear(time)\n            .setMonth(time)\n\n        break\n      case 1:\n        year += 1\n\n        if (year > maxYear) {\n          year = maxYear\n        }\n\n        this.setYear(year + '-1-1')\n\n        break\n      case 2:\n        startYear += 10\n\n        if (startYear > maxYear) {\n          startYear = maxYear - 9\n        }\n\n        this._setYears(startYear.toString())\n\n        break\n    }\n\n    this.updateView()\n\n    return this\n  }\n\n  /**\n   * 选择日期\n   * ========================================================================\n   * 1. 选择了选中状态的日期：\n   *    1.1 星期区间和单选模式：不做任何处理\n   *    1.2 多选模式：取消选中 DOM 节点的选中状态，并且将选中的日期在选中信息移除\n   *    1.3 日期区间选择模式下：取消之前选中区间的选中样式，将当前选中的日期 DOM 节点\n   *        设置为选中状态。移除之前选中日期信息，并将选中日期信息保存起来\n   * 2. 选择了未选中状态的日期：\n   *    2.1 单选模式：获取选中日期信息，并用这个信息替换之前选中的信息。移除之前选中样\n   *        式，并设置当前选中日期的选中样式\n   *    2.2 多选模式：获取选中的日期信息，然后保存到选中信息中，最后设置选中日期的样式\n   *    2.3 日期区间选择模式下：\n   *    2.4 星期区间选择模式：获取当前选择日期的星期区间信息，移除之前保存的区间信息将\n   *        新的区间信息保存起来，移除之前的区间选中样式，并设置当前选中区间的选中样式\n   * ========================================================================\n   * @param {HTMLElement} $date - 选中的日期 DOM 节点\n   * @returns {*}\n   */\n  pickDate ($date) {\n    const STYLES = this.get('STYLES')\n    const CLS_PICKED = STYLES.PICKED\n    const DOM = Calendar.DOM\n    const hasClass = DOM.hasClass\n    const addClass = DOM.addClass\n    const removeClass = DOM.removeClass\n    const isFunction = Calendar.Utils.isFunction\n    let pickMode = this.get('pickMode')\n    let elements = this.getEls()\n    let time = $date.getAttribute('data-date')\n    let callback = this.get('onDatePick')\n    let $picked = null\n    let pickedDates\n\n    // 选择了选中状态的日期\n    if (hasClass($date, CLS_PICKED)) {\n      switch (pickMode) {\n        // 单选/星期选择模式\n        case 'single':\n        case 'week':\n          return false\n        // 多选模式\n        case 'multiple':\n          // 取消选中样式\n          removeClass($date, CLS_PICKED)\n          // 移除选中的日期信息\n          this._removePicked(time)\n\n          // 设置最后一个选中的时间为当前选中日期\n          pickedDates = this.getPicked()\n          this.setDate(pickedDates[pickedDates.length - 1])\n\n          if (isFunction(callback)) {\n            callback(pickedDates, $date, this)\n          }\n\n          break\n        case 'range':\n          // 清除之前选中的数据\n          this.data.picked = []\n          // 将当前选中的日期数据保存起来\n          this.data.picked.push(time)\n\n          this.setDate(time)\n\n          // 绘制选中样式\n          elements.date = $date\n          this._updateDateRanges()\n\n          if (isFunction(callback)) {\n            callback(this.getPicked(), $date, this)\n          }\n\n          break\n      }\n    } else {\n      this.setYear(time)\n          .setMonth(time)\n\n      // 选择了未选中状态的日期\n      switch (pickMode) {\n        case 'single':\n          $picked = elements.date\n\n          // 移除之前选中日期的选中样式\n          if ($picked) {\n            removeClass($picked, CLS_PICKED)\n          }\n\n          // 设置当前选中日期的选中样式\n          addClass($date, CLS_PICKED)\n          elements.date = $date\n\n          this.setDate(time)\n\n          if (isFunction(callback)) {\n            callback(time, $date, this)\n          }\n\n          break\n        case 'multiple':\n          // 保存选中的日期，并对选中时间排序\n          this.data.picked.push(time)\n          this.data.picked.sort()\n\n          // 设置最晚的那个日期为当前选中日期\n          pickedDates = this.getPicked()\n          this.setDate(pickedDates[pickedDates.length - 1])\n\n          addClass($date, CLS_PICKED)\n\n          if (isFunction(callback)) {\n            callback(this.getPicked(), $date, this)\n          }\n\n          break\n        case 'range':\n          // 根据已经选中的日期长度，处理数据的保存\n          switch (this.data.picked.length) {\n            case 0:\n            case 1:\n              // 保存选中的日期\n              this.data.picked.push(time)\n\n              // 如果选择两个不同的日期，则完成了范围选择，需要对日期排序\n              if (this.data.picked.length === 2) {\n                this.data.picked.sort()\n              }\n\n              // 设置选中日期范围的最后一天为当前选中日期\n              pickedDates = this.getPicked()\n              this.setDate(pickedDates[pickedDates.length - 1])\n\n              elements.date = $date\n\n              this._updateDateRanges()\n\n              if (isFunction(callback)) {\n                callback(pickedDates, $date, this)\n              }\n\n              break\n            case 2:\n              // 之前已经选中了一个日期范围，现在需要清除之前的数据\n              this.data.picked = []\n              // 保存第一个日期点\n              this.data.picked.push(time)\n\n              elements.date = $date\n\n              this._updateDateRanges()\n\n              break\n          }\n\n          break\n        case 'week':\n          // 获得当前选中日期的星期范围\n          let ranges = Calendar.getWeekRanges(time)\n\n          // 清除之前的数据，保存现在的星期日期范围\n          this.data.picked = [ranges[0], ranges[ranges.length - 1]]\n\n          this.setDate(ranges[ranges.length - 1])\n\n          elements.date = $date\n\n          this._updateWeekRanges()\n\n          if (isFunction(callback)) {\n            callback(this.getPicked(), $date, this)\n          }\n\n          break\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * 选择月份\n   * ========================================================================\n   * 1. 选择了已选中状态的月份：直接切换试图模式到日期试图模式\n   * 2. 选择了未选中状态的月份：移除之前选中的月份的选中样式，并当前选中的月份的选中\n   *    样式。然后更新选中年份和月份的数据，并切换到日期试图模式\n   * ========================================================================\n   * @param {HTMLElement} $month - 选中的月份 DOM 节点\n   * @returns {Calendar}\n   */\n  pickMonth ($month) {\n    const CLS_PICKED = this.get('STYLES').PICKED\n    const DOM = Calendar.DOM\n    let elements = this.getEls()\n    let $picked = elements.month\n    let time = $month.getAttribute('data-month')\n    let callback = this.get('onMonthPick')\n\n    // 点击已经选中的年份\n    if (DOM.hasClass($month, CLS_PICKED)) {\n      // 切换到月份试图模式\n      this.update()\n    } else {\n      // 移除之前选中的年份选中样式\n      if ($picked) {\n        DOM.removeClass($picked, CLS_PICKED)\n      }\n\n      // 设置选中样式\n      DOM.addClass($month, CLS_PICKED)\n      elements.month = $month\n\n      this.setYear(time)\n          .setMonth(time)\n          ._setYears(time)\n          .update()\n    }\n\n    if (Calendar.Utils.isFunction(callback)) {\n      callback(time, $month, this)\n    }\n\n    return this\n  }\n\n  /**\n   * 选择年份\n   * ========================================================================\n   * 1. 选择了已选中状态的年份：更新选中的年份信息，并切换到月份试图模式\n   * 2. 选择了未选中状态的年份：移除之前选中的年份的选中样式，将当前选中的年份设为选中\n   *    样式，并切换到月份试图模式\n   * ========================================================================\n   * @param {HTMLElement} $year - 选中的年份 DOM 节点\n   * @returns {Calendar}\n   */\n  pickYear ($year) {\n    const CLS_PICKED = this.get('STYLES').PICKED\n    const DOM = Calendar.DOM\n    let elements = this.getEls()\n    let $picked = elements.year\n    let time = $year.getAttribute('data-year')\n    let callback = this.get('onYearPick')\n\n    // 点击已经选中的月份\n    if (DOM.hasClass($year, CLS_PICKED)) {\n      // 切换到日期试图模式\n      this.setYear(time).update(1)\n    } else {\n      // 移除之前选中的年份选中样式\n      if ($picked) {\n        DOM.removeClass($picked, CLS_PICKED)\n      }\n\n      // 设置选中样式\n      DOM.addClass($year, CLS_PICKED)\n      elements.year = $year\n\n      // 更新年份并切换到月份试图\n      this.setYear(time)\n          ._setYears(time)\n          .update(1)\n    }\n\n    if (Calendar.Utils.isFunction(callback)) {\n      callback(time, $year, this)\n    }\n\n    return this\n  }\n\n  /**\n   * 选择今天\n   * ========================================================================\n   * 将今天的年份、月份以及日期信息设置为当前选中日期，并切换到日期试图模式\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  pickToday () {\n    let time = Calendar.getToday().text\n    let callback = this.get('onTodayPick')\n\n    this.setYear(time)\n        .setMonth(time)\n        .setDate(time)\n        ._setYears(time)\n        .update()\n\n    if (Calendar.Utils.isFunction(callback)) {\n      callback(time, this.getEls().dates.querySelector('[data-date=' + time + ']'), this)\n    }\n\n    return this\n  }\n\n  /**\n   * 隐藏日历控件\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  hide () {\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\n    let $wrap = this.getEls().wrap\n\n    Calendar.DOM.addClass($wrap, CLS_HIDDEN)\n\n    return this\n  }\n\n  /**\n   * 显示日历控件\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  show () {\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\n    let $wrap = this.getEls().wrap\n\n    Calendar.DOM.removeClass($wrap, CLS_HIDDEN)\n\n    return this\n  }\n\n  /**\n   * 隐藏/显示之间切换\n   * ========================================================================\n   * @returns {Calendar}\n   */\n  toggle () {\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\n\n    let $wrap = this.getEls().wrap\n\n    if (Calendar.DOM.hasClass($wrap, CLS_HIDDEN)) {\n      this.show()\n    } else {\n      this.hide()\n    }\n\n    return this\n  }\n\n  /**\n   * 设置当前的年代信息\n   * ========================================================================\n   * @param {String|Number} [time] - 表示年份的字符串或者数字（默认值：今年）\n   * @returns {Calendar}\n   * @private\n   */\n  _setYears (time) {\n    this.data.years = Calendar.getYears(time)\n\n    return this\n  }\n\n  /**\n   * （多选模式）移除选中的日期\n   * ========================================================================\n   * @param {String|Number} time - 表示日期的字符串或者数字\n   * @returns {Calendar}\n   * @private\n   */\n  _removePicked (time) {\n    let pickedDates = this.getPicked()\n    let index = pickedDates.indexOf(time)\n\n    if (index > -1) {\n      pickedDates.splice(index, 1)\n    }\n\n    return this\n  }\n\n  /**\n   * 绘制日历控件的各个主要 DOM 节点\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _createElements () {\n    const STYLES = this.get('STYLES')\n    const CLS_WRAP = STYLES.WRAP\n    const CLS_WRAP_WITHOUT_FOOTER = STYLES.WRAP_WITHOUT_FOOTER\n    const CLS_HEADER = STYLES.HEADER\n    const CLS_TITLE = STYLES.TITLE\n    const CLS_SWITCHER = STYLES.SWITCHER\n    const CLS_PREV = STYLES.PREV\n    const CLS_ICON_PREV = STYLES.ICON_PREV\n    const CLS_NEXT = STYLES.NEXT\n    const CLS_ICON_NEXT = STYLES.ICON_NEXT\n    const CLS_BODY = STYLES.BODY\n    const CLS_WEEK = STYLES.WEEK\n    const CLS_DATES = STYLES.DATES\n    const CLS_MONTHS = STYLES.MONTHS\n    const CLS_YEARS = STYLES.YEARS\n    const CLS_FOOTER = STYLES.FOOTER\n    const CLS_FOOTER_DATE = STYLES.FOOTER_DATE\n    const CLS_TODAY = STYLES.TODAY\n    const CLS_FOOTER_TIME = STYLES.FOOTER_TIME\n    const CLS_TIME = STYLES.TIME\n    const CLS_TEXT = STYLES.TEXT\n    const CLS_HIDDEN = STYLES.HIDDEN\n    const SPACE = ' '\n    let hasFooter = this.get('hasFooter')\n    let elements = this.getEls()\n    let createElement = Calendar.DOM.createElement\n    let wrapClassName = CLS_WRAP\n    let weekClassName = CLS_WEEK\n    let datesClassName = CLS_DATES\n    let monthsClassName = CLS_MONTHS\n    let yearsClassName = CLS_YEARS\n\n    switch (this.get('viewMode')) {\n      case 0:\n        monthsClassName += SPACE + CLS_HIDDEN\n        yearsClassName += SPACE + CLS_HIDDEN\n        break\n      case 1:\n        weekClassName += SPACE + CLS_HIDDEN\n        datesClassName += SPACE + CLS_HIDDEN\n        yearsClassName += SPACE + CLS_HIDDEN\n        break\n      case 2:\n        weekClassName += SPACE + CLS_HIDDEN\n        datesClassName += SPACE + CLS_HIDDEN\n        monthsClassName += SPACE + CLS_HIDDEN\n        break\n    }\n\n    if(!hasFooter){\n      wrapClassName += SPACE + CLS_WRAP_WITHOUT_FOOTER\n    }\n\n    elements.parent = document.getElementById(this.get('parent'))\n\n    // wrap\n    elements.wrap = createElement('div', {\n      id: Calendar.Utils.guid('calendar'),\n      className: wrapClassName\n    })\n    // header\n    elements.header = createElement('div', {\n      className: CLS_HEADER\n    })\n    elements.title = createElement('h4', {\n      className: CLS_TITLE\n    }, [\n      createElement('span', {\n        className: CLS_TEXT\n      })\n    ])\n\n    // 配置了显示上下切换按钮\n    if(this.get('hasSwitcher')) {\n      elements.switcher = createElement('div', {\n        className: CLS_SWITCHER\n      })\n      elements.prev = createElement('div', {\n        className: CLS_PREV\n      }, [\n        createElement('span', {\n          className: CLS_TEXT\n        }, [\n          createElement('i', {\n            className: CLS_ICON_PREV\n          })\n        ])\n      ])\n      elements.next = createElement('div', {\n        className: CLS_NEXT\n      }, [\n        createElement('span', {\n          className: CLS_TEXT\n        }, [\n          createElement('i', {\n            className: CLS_ICON_NEXT\n          })\n        ])\n      ])\n    }\n\n    // body\n    elements.body = createElement('div', {\n      className: CLS_BODY\n    })\n    elements.week = createElement('div', {\n      className: weekClassName\n    })\n    elements.dates = createElement('div', {\n      className: datesClassName\n    })\n    elements.months = createElement('div', {\n      className: monthsClassName\n    })\n    elements.years = createElement('div', {\n      className: yearsClassName\n    })\n\n    // 配置了显示页脚\n    if(hasFooter) {\n      // footer\n      elements.footer = createElement('div', {\n        className: CLS_FOOTER\n      })\n      elements.today = createElement('div', {\n        className: CLS_FOOTER_DATE\n      }, [\n        createElement('p', {\n          className: CLS_TODAY\n        }, [\n          createElement('span', {\n            className: CLS_TEXT\n          })\n        ])\n      ])\n\n      // 配置了显示当前时间\n      if (this.get('hasClock')) {\n        elements.time = createElement('div', {\n          className: CLS_FOOTER_TIME\n        }, [\n          createElement('p', {\n            className: CLS_TIME\n          }, [\n            createElement('span', {\n              className: CLS_TEXT\n            })\n          ])\n        ])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * 绘制日历控件的标题\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _renderTitle () {\n    let $title = this.getEls().title.querySelector('.' + this.get('STYLES').TEXT)\n    let years = this.getYears()\n    let year = this.getYear()\n    let value = ''\n\n    switch (this.get('viewMode')) {\n      case 0:\n        // 显示完整的年月时间\n        value = Calendar.getMonth(year + '-' + this.getMonth() + '-1').fullText\n        break\n      case 1:\n        // 显示年份时间\n        value = Calendar.getYear(year + '-1-1').fullText\n        break\n      case 2:\n        // 显示年代范围格式时间\n        value = years.start + ' - ' + years.end\n        break\n    }\n\n    $title.innerHTML = value\n\n    return this\n  }\n\n  /**\n   * 绘制日历控件的星期栏\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _renderDays () {\n    const STYLES = this.get('STYLES')\n    const CLS_DAY = STYLES.DAY\n    const CLS_WEEKEND = STYLES.WEEKEND\n    const CLS_TEXT = STYLES.TEXT\n    const DAYS = this.get('DAYS')\n    const createElement = Calendar.DOM.createElement\n    let fragment = document.createDocumentFragment()\n\n    DAYS.forEach((day, i) => {\n      let className = i === 0 || i === DAYS.length - 1 ? CLS_DAY + ' ' + CLS_WEEKEND : CLS_DAY\n\n      // 先将创建的星期几的 DOM 节点保存到文档碎片\n      fragment.appendChild(createElement('div', {\n        className: className\n      }, [\n        createElement('span', {\n          className: CLS_TEXT\n        }, [\n          day\n        ])\n      ]))\n    })\n\n    // 然后一次性添加到页面，性能会更好\n    this.getEls().week.appendChild(fragment)\n\n    return this\n  }\n\n  /**\n   * 绘制日历控件的日期信息\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _renderDates () {\n    const DATES = this.get('DATES')\n    const isLeapYear = Calendar.isLeapYear\n    // fragments\n    let fragment = document.createDocumentFragment()\n    // current month\n    let year = this.getYear()\n    let month = this.getMonth()\n    let days = DATES[month - 1]\n    let firstDateDay = Calendar.getDay(year + '-' + month + '-' + 1).value\n    // prev month\n    let prevYear = month - 2 < 0 ? year - 1 : year\n    let prevMonth = month - 2 < 0 ? 12 : month - 1\n    let prevDays = DATES[prevMonth - 1]\n    // next month\n    let nextYear = month === 12 ? year + 1 : year\n    let nextMonth = month === 12 ? 1 : month + 1\n    let nextDays\n\n    // 如果当前是闰年，上个月是二月份，则闰年二月为29天\n    if (isLeapYear(year) && prevMonth === 2) {\n      prevDays += 1\n    }\n    else {\n      // 如果当前是闰年，当前月份是二月，则本月有29天\n      if (isLeapYear(year) && month === 2) {\n        days += 1\n      }\n    }\n\n    nextDays = 42 - (firstDateDay + days)\n\n    // 绘制上个月月底的最后几天\n    if (firstDateDay !== 0) {\n      fragment.appendChild(this._getDatesFragment({\n        year: prevYear,\n        month: prevMonth,\n        start: prevDays - (firstDateDay - 1),\n        end: prevDays,\n        isPrev: true,\n        isNext: false\n      }))\n    }\n\n    // 绘制本月的日期\n    fragment.appendChild(this._getDatesFragment({\n      year: year,\n      month: month,\n      start: 1,\n      end: days,\n      isPrev: false,\n      isNext: false\n    }))\n\n    // 绘制下个月月头的几天\n    if (nextDays > 0) {\n      fragment.appendChild(this._getDatesFragment({\n        year: nextYear,\n        month: nextMonth,\n        start: 1,\n        end: nextDays,\n        isPrev: false,\n        isNext: true\n      }))\n    }\n\n    this.getEls().dates.appendChild(fragment)\n\n    return this\n  }\n\n  /**\n   * 重绘日历控件的日期信息\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _repaintDates () {\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\n    const DOM = Calendar.DOM\n    let $dates = this.getEls().dates\n\n    DOM.addClass($dates, CLS_HIDDEN)\n    $dates.innerHTML = ''\n    DOM.removeClass($dates, CLS_HIDDEN)\n\n    this._renderDates()\n\n    return this\n  }\n\n  /**\n   * 获得绘制日期信息时的文档碎片\n   * ========================================================================\n   * @param {Object} options - 参数对象\n   * @param {Number} options.year - 年份\n   * @param {Number} options.month - 月份\n   * @param {Number} options.start - 开始的日期\n   * @param {Number} options.end - 结束的日期\n   * @param {Boolean} options.isPrev - 是否为上个月的日期\n   * @param {Boolean} options.isNext - 是否为下个月的日期\n   * @returns {DocumentFragment}\n   * @private\n   */\n  _getDatesFragment (options) {\n    const {year, month, start, end, isPrev, isNext} = options\n    const SPACE = ' '\n    const STYLES = this.get('STYLES')\n    const CLS_DATE = STYLES.DATE\n    const CLS_DATE_PREV = STYLES.DATE_PREV\n    const CLS_DATE_NEXT = STYLES.DATE_NEXT\n    const CLS_CURRENT = STYLES.CURRENT\n    const CLS_PICKED = STYLES.PICKED\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\n    const CLS_WEEKEND = STYLES.WEEKEND\n    const CLS_TEXT = STYLES.TEXT\n    const createElement = Calendar.DOM.createElement\n    const isDatesEqual = Calendar.isDatesEqual\n    let fragment = document.createDocumentFragment()\n    let elements = this.getEls()\n    let date = start\n    let pickMode = this.get('pickMode')\n    let pickedDates = this.getPicked()\n\n    for (; date <= end; date += 1) {\n      let fullDate = year + '-' + month + '-' + date\n      let isCurrent = Calendar.isToday(fullDate)\n      let day = Calendar.getDay(fullDate)\n      let $children = [\n        createElement('span', {\n          className: CLS_TEXT\n        }, [\n          date\n        ])\n      ]\n      let className = ''\n      let $date\n\n      $date = createElement('div', {\n        'data-date': fullDate\n      }, $children)\n\n      className += CLS_DATE\n\n      if (isPrev) {\n        className += (SPACE + CLS_DATE_PREV)\n      } else {\n        if (isNext) {\n          className += (SPACE + CLS_DATE_NEXT)\n        }\n      }\n\n      // 当前（今天）的日期\n      if (isCurrent) {\n        className += (SPACE + CLS_CURRENT)\n      }\n\n      // 周末\n      if (day.value === 0 || day.value === 6) {\n        className += (SPACE + CLS_WEEKEND)\n      }\n\n      switch (pickMode) {\n        // 单选模式\n        case 'single':\n          let pickedDate = this.getDate().text\n          let isPickedDate = isDatesEqual(fullDate, pickedDate)\n\n          if (isPickedDate) {\n            className += (SPACE + CLS_PICKED)\n            elements.date = $date\n          }\n          break\n        // 多选模式\n        case 'multiple':\n          pickedDates.forEach((picked) => {\n            let isPicked = isDatesEqual(fullDate, picked)\n\n            if (isPicked) {\n              className += (SPACE + CLS_PICKED)\n            }\n          })\n\n          break\n        // 区间模式\n        case 'range':\n        case 'week':\n          let dateRanges = []\n\n          // 只有选中了两个节点，才绘制选中日期区间的样式\n          if (pickedDates.length === 2) {\n            dateRanges = Calendar.getRanges(pickedDates[0], pickedDates[1])\n\n            dateRanges.forEach((picked, i) => {\n              let isPicked = isDatesEqual(fullDate, picked)\n\n              if (!isPicked) {\n                return false\n              }\n\n              // 设置中间日期的样式\n              if (i !== 0 && i !== (dateRanges.length - 1)) {\n                className += (SPACE + CLS_PICKED)\n                className += (SPACE + CLS_PICKED_RANGE)\n              } else {\n                if (i === 0 || i === dateRanges.length - 1) {\n                  className += (SPACE + CLS_PICKED)\n                }\n              }\n            })\n          } else {\n            if (pickedDates.length === 1) {\n              className += (SPACE + CLS_PICKED)\n            }\n          }\n\n          break\n      }\n\n      $date.className = className\n\n      fragment.appendChild($date)\n    }\n\n    return fragment\n  }\n\n  /**\n   * 绘制选中的日期区间选中样式\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _updateDateRanges () {\n    const STYLES = this.get('STYLES')\n    const CLS_PICKED = STYLES.PICKED\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\n    const DOM = Calendar.DOM\n    const hasClass = DOM.hasClass\n    const removeClass = DOM.removeClass\n    const addClass = DOM.addClass\n    let elements = this.getEls()\n    let $date = this.elements.date\n    let $dates = elements.dates\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\n\n    switch (this.data.picked.length) {\n      case 1:\n        // 移除之前的选中样式\n        $pickedDates.forEach(($picked) => {\n          removeClass($picked, CLS_PICKED)\n\n          if (hasClass($picked, CLS_PICKED_RANGE)) {\n            removeClass($picked, CLS_PICKED_RANGE)\n          }\n        })\n\n        // 绘制选中的第一个端点的选中样式\n        addClass($date, CLS_PICKED)\n\n        break\n      case 2:\n        let ranges = Calendar.getRanges(this.data.picked[0], this.data.picked[1])\n\n        ranges.forEach((picked, i) => {\n          let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\n\n          // 绘制中间区域的选中样式\n          if (i > 0 && i < ranges.length - 1) {\n            addClass($picked, CLS_PICKED)\n            addClass($picked, CLS_PICKED_RANGE)\n          }\n        })\n\n        // 绘制选中的第二个端点的选中样式\n        addClass($date, CLS_PICKED)\n    }\n\n    return this\n  }\n\n  /**\n   * 绘制选中的星期区间\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _updateWeekRanges () {\n    const STYLES = this.get('STYLES')\n    const CLS_PICKED = STYLES.PICKED\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\n    const DOM = Calendar.DOM\n    const removeClass = DOM.removeClass\n    const addClass = DOM.addClass\n    let elements = this.getEls()\n    let $dates = elements.dates\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\n    let picked = this.getPicked()\n    let ranges = Calendar.getWeekRanges(picked[0])\n\n    // 移除之前选中区域的样式\n    $pickedDates.forEach(($picked) => {\n      removeClass($picked, CLS_PICKED_RANGE)\n      removeClass($picked, CLS_PICKED)\n    })\n\n    // 设置新的选中区域的样式\n    ranges.forEach((picked, i) => {\n      let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\n\n      // 绘制中间区域\n      if (i > 0 && i < ranges.length - 1) {\n        addClass($picked, CLS_PICKED)\n        addClass($picked, CLS_PICKED_RANGE)\n      } else {\n        // 绘制两头的节点\n        if (i === 0 || i === ranges.length - 1) {\n          addClass($picked, CLS_PICKED)\n        }\n      }\n    })\n\n    return this\n  }\n\n  /**\n   * 绘制日历控件的月份信息\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _renderMonths () {\n    const SPACE = ' '\n    const STYLES = this.get('STYLES')\n    const CLS_CURRENT = STYLES.CURRENT\n    const CLS_PICKED = STYLES.PICKED\n    const CLS_MONTH = STYLES.MONTH\n    const CLS_MONTH_PREV = STYLES.MONTH_PREV\n    const CLS_MONTH_NEXT = STYLES.MONTH_NEXT\n    const CLS_TEXT = STYLES.TEXT\n    const MONTHS = this.get('MONTHS')\n    const DOM = Calendar.DOM\n    const createElement = DOM.createElement\n    let fragment = document.createDocumentFragment()\n    let elements = this.getEls()\n    let year = this.getYear()\n    let today = Calendar.getToday()\n\n    MONTHS.forEach((MONTH, i) => {\n      let pickedDate = this.getDate()\n      let className = CLS_MONTH\n      let $month\n\n      // 去年的月份\n      if (i < 2) {\n        className += SPACE + CLS_MONTH_PREV\n\n        // 判断是否被选中了\n        if ((year - 1) === pickedDate.year && MONTH === pickedDate.month) {\n          className += SPACE + CLS_PICKED\n        }\n\n        // 创建月份的 DOM 节点\n        $month = createElement('div', {\n          className: className,\n          'data-month': (year - 1) + '-' + MONTH + '-1'\n        }, [\n          createElement('span', {\n            className: CLS_TEXT\n          }, [\n            MONTH\n          ])\n        ])\n      } else {\n        // 今年的月份\n        if (i >= 2 && i <= 13) {\n          // 判断是否为今天\n          if (year === today.year && MONTH === today.month) {\n            className += ' ' + CLS_CURRENT\n          }\n\n          // 判断是否被选中了\n          if (year === pickedDate.year && MONTH === pickedDate.month) {\n            className += SPACE + CLS_PICKED\n          }\n\n          // 创建月份的 DOM 节点\n          $month = createElement('div', {\n            className: className,\n            'data-month': year + '-' + MONTH + '-1'\n          }, [\n            createElement('span', {\n              className: CLS_TEXT\n            }, [\n              year + '-' + MONTH\n            ])\n          ])\n        } else {\n          // 明年的月份\n          if (i > 13 && i <= 15) {\n            className += SPACE + CLS_MONTH_NEXT\n\n            // 判断是否被选中了\n            if ((year + 1) === pickedDate.year && MONTH === pickedDate.month) {\n              className += SPACE + CLS_PICKED\n            }\n\n            // 创建月份的 DOM 节点\n            $month = createElement('div', {\n              className: className,\n              'data-month': (year + 1) + '-' + MONTH + '-1'\n            }, [\n              createElement('span', {\n                className: CLS_TEXT\n              }, [\n                MONTH\n              ])\n            ])\n          }\n        }\n      }\n\n      // 将所有月份 DOM 节点缓存到文档碎片中\n      fragment.appendChild($month)\n    })\n\n    elements.months.appendChild(fragment)\n\n    return this\n  }\n\n  /**\n   * 重绘日历控件的月份信息\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _repaintMonths () {\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\n    const DOM = Calendar.DOM\n    let $months = this.getEls().months\n\n    DOM.addClass($months, CLS_HIDDEN)\n    $months.innerHTML = ''\n    DOM.removeClass($months, CLS_HIDDEN)\n\n    this._renderMonths()\n\n    return this\n  }\n\n  /**\n   * 绘制日历控件的年份信息\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _renderYears () {\n    let years = this.getYears()\n    let yearsStart = years.start\n    let yearsEnd = years.end\n    let prevStartYear = yearsStart - 3\n    let prevEndYear = yearsStart - 1\n    let nextStartYear = yearsEnd + 1\n    let nextEndYear = yearsEnd + 3\n    let fragment = document.createDocumentFragment()\n\n    fragment.appendChild(this._getYearsFragment({\n      start: prevStartYear,\n      end: prevEndYear,\n      isPrev: true,\n      isNext: false\n    }))\n    fragment.appendChild(this._getYearsFragment({\n      start: yearsStart,\n      end: yearsEnd,\n      isPrev: false,\n      isNext: false\n    }))\n    fragment.appendChild(this._getYearsFragment({\n      start: nextStartYear,\n      end: nextEndYear,\n      isPrev: false,\n      isNext: true\n    }))\n\n    this.getEls().years.appendChild(fragment)\n\n    return this\n  }\n\n  /**\n   * 重绘日历控件的年份信息\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _repaintYears () {\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\n    const DOM = Calendar.DOM\n    let $years = this.getEls().years\n\n    DOM.addClass($years, CLS_HIDDEN)\n    $years.innerHTML = ''\n    DOM.removeClass($years, CLS_HIDDEN)\n\n    this._renderYears()\n\n    return this\n  }\n\n  /**\n   * 获取绘制年份信息的文档碎片\n   * ========================================================================\n   * @param {Object} options - 参数对象\n   * @param {Number} options.start - 开始年份\n   * @param {Number} options.end - 结束年份\n   * @param {Boolean} options.isPrev - 是否为上个年代的年份\n   * @param {Boolean} options.isNext - 是否为下个年带的年份\n   * @returns {DocumentFragment}\n   * @private\n   */\n  _getYearsFragment (options) {\n    const {start, end, isPrev, isNext} = options\n    const STYLES = this.get('STYLES')\n    const CLS_YEAR = STYLES.YEAR\n    const CLS_YEAR_PREV = STYLES.YEAR_PREV\n    const CLS_YEAR_NEXT = STYLES.YEAR_NEXT\n    const CLS_CURRENT = STYLES.CURRENT\n    const CLS_PICKED = STYLES.PICKED\n    const CLS_DISABLED = STYLES.DISABLED\n    const CLS_TEXT = STYLES.TEXT\n    const DOM = Calendar.DOM\n    const createElement = DOM.createElement\n    let fragment = document.createDocumentFragment()\n    let elements = this.getEls()\n    let minYear = this.data.minYear\n    let maxYear = this.data.maxYear\n    let year = start\n\n    for (; year <= end; year += 1) {\n      let pickedDate = this.getDate()\n      let isCurrent = (year === Calendar.getToday().year)\n      let isPicked = (year === pickedDate.year)\n      let className = CLS_YEAR\n      let $year = createElement('div', {\n        'data-year': year + '-1-1'\n      }, [\n        createElement('span', {\n          className: CLS_TEXT\n        }, [\n          year\n        ])\n      ])\n\n      if (isPrev) {\n        className += ' ' + CLS_YEAR_PREV\n      } else {\n        if (isNext) {\n          className += ' ' + CLS_YEAR_NEXT\n        }\n      }\n\n      if (isCurrent) {\n        className += ' ' + CLS_CURRENT\n      }\n\n      if (isPicked) {\n        className += ' ' + CLS_PICKED\n        elements.year = $year\n      }\n\n      if (year < minYear || year > maxYear) {\n        className += ' ' + CLS_DISABLED\n      }\n\n      $year.className = className\n\n      fragment.appendChild($year)\n    }\n\n    return fragment\n  }\n\n  /**\n   * 绘制日历控件的页脚\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _renderFooter () {\n    const STYLES = this.get('STYLES')\n    const CLS_TEXT = STYLES.TEXT\n    let elements = this.getEls()\n    let $today = elements.today.querySelector('.' + CLS_TEXT)\n    let today = Calendar.getToday()\n    let timer = null\n\n    let renderTime = () => {\n      let $time = elements.time.querySelector('.' + CLS_TEXT)\n      let time = new Date()\n      let hours = time.getHours()\n      let minutes = time.getMinutes()\n      let seconds = time.getSeconds()\n\n      if (timer) {\n        clearTimeout(timer)\n      }\n\n      if (hours < 10) {\n        hours = '0' + hours\n      }\n\n      if (minutes < 10) {\n        minutes = '0' + minutes\n      }\n\n      if (seconds < 10) {\n        seconds = '0' + seconds\n      }\n\n      $time.innerHTML = hours + ':' + minutes + ':' + seconds\n\n      timer = setTimeout(renderTime, 1000)\n    }\n\n    $today.innerHTML = '今天：' + today.text\n    Calendar.DOM.setAttribute($today, 'data-date', today.value)\n\n    if(this.get('hasClock')) {\n      renderTime()\n    }\n\n    return this\n  }\n\n  /**\n   * 点击标题的事件处理器\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _titleClick () {\n    let viewMode = this.get('viewMode')\n\n    viewMode += 1\n\n    if (viewMode > 2) {\n      viewMode = 2\n    }\n\n    this.update(viewMode)\n\n    return this\n  }\n\n  /**\n   * 点击向上翻页的事件处理器\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _prevClick () {\n    this.prev()\n\n    return this\n  }\n\n  /**\n   * 点击向下翻页的事件处理起\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _nextClick () {\n    this.next()\n\n    return this\n  }\n\n  /**\n   * 点击日期的事件处理器\n   * ========================================================================\n   * @param {Event} evt - 事件对象\n   * @returns {Calendar}\n   * @private\n   */\n  _dateClick (evt) {\n    let $el = evt.delegateTarget\n    let time = $el.getAttribute('data-date')\n    let picked\n\n    this.pickDate($el)\n\n    picked = this.getPicked()\n\n    console.log('------------- _dateClick -------------')\n    if (this.get('pickMode') === 'single') {\n      console.log(time)\n    } else {\n      console.log(picked)\n    }\n\n    return this\n  }\n\n  /**\n   * 点击月份的事件处理器\n   * ========================================================================\n   * @param {Event} evt - 事件对象\n   * @returns {Calendar}\n   * @private\n   */\n  _monthClick (evt) {\n    let $month = evt.delegateTarget\n    let time = $month.getAttribute('data-month')\n\n    this.pickMonth($month)\n\n    console.log('------------- _monthClick -------------')\n    console.log(time)\n\n    return this\n  }\n\n  /**\n   * 点击年份的事件处理器\n   * ========================================================================\n   * @param {Event} evt - 事件对象\n   * @returns {Calendar}\n   * @private\n   */\n  _yearClick (evt) {\n    let $el = evt.delegateTarget\n    let time = $el.getAttribute('data-year')\n\n    this.pickYear($el)\n\n    console.log('------------- _yearClick -------------')\n    console.log(time)\n\n    return this\n  }\n\n  /**\n   * 点击今天的事件处理器\n   * ========================================================================\n   * @returns {Calendar}\n   * @private\n   */\n  _todayClick () {\n    let elements = this.getEls()\n    let time = Calendar.getToday().text\n\n    this.pickToday()\n\n    // 触发日期选择逻辑\n    this.pickDate(elements.dates.querySelector('[data-date=\"' + time + '\"]'))\n\n    console.log('------------- _todayClick -------------')\n    console.log(time)\n\n    return this\n  }\n\n  /**\n   * 获得年份信息\n   * ========================================================================\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\n   * @returns {{value: (Number|{value, text, fullText}), text: string, fullText: string}}\n   */\n  static getYear (val) {\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\n    let year = time.getFullYear()\n\n    return {\n      value: year,\n      text: year.toString(),\n      fullText: year + '年'\n    }\n  }\n\n  /**\n   * 获取月份信息\n   * ========================================================================\n   * @param {String|Number} [val] - 表示月份的字符串或者数字（默认值：本月）\n   * @returns {{value: number, text: string, fullText: string}}\n   */\n  static getMonth (val) {\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\n    let year = Calendar.getYear(val)\n    let month = time.getMonth()\n\n    month += 1\n\n    return {\n      value: month,\n      text: year.text + '-' + month,\n      fullText: year.fullText + month + '月'\n    }\n  }\n\n  /**\n   * 获取日期信息\n   * ========================================================================\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\n   */\n  static getDate (val) {\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\n    let year = Calendar.getYear(val)\n    let month = Calendar.getMonth(val)\n    let date = time.getDate()\n    let day = Calendar.getDay(val)\n    let fullDate = year.value + '-' + month.value + '-' + date\n    let text = month.fullText + date + '日'\n\n    return {\n      year: year.value,\n      month: month.value,\n      date: date,\n      day: day.value,\n      text: fullDate,\n      fullText: text + ' ' + day.fullText\n    }\n  }\n\n  /**\n   * 获取星期信息\n   * ========================================================================\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\n   * @returns {{value: number, text: string, fullText: string}}\n   */\n  static getDay (val) {\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\n    let day = time.getDay()\n    let text = Calendar.defaults.DAYS[day]\n\n    return {\n      value: day,\n      text: text,\n      fullText: '星期' + text\n    }\n  }\n\n  /**\n   * 获取今天的日期信息\n   * ========================================================================\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\n   */\n  static getToday () {\n    return Calendar.getDate()\n  }\n\n  /**\n   * 获取年代信息\n   * ========================================================================\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\n   * @returns {{start: (number|Number|{value, text}), end: (*|number)}}\n   */\n  static getYears (val) {\n    let year = Calendar.getYear(val).value\n    let numbers = year.toString().split('')\n    let lastNumber = parseInt(numbers[numbers.length - 1], 10)\n    let yearsStart = 0\n    let yearsEnd = 0\n\n    if (lastNumber === 0) {\n      yearsStart = year\n      yearsEnd = year + 9\n    } else {\n      if (lastNumber === 9) {\n        yearsStart = year - 9\n        yearsEnd = year\n      } else {\n        yearsStart = year - lastNumber\n        yearsEnd = year + (9 - lastNumber)\n      }\n    }\n\n    return {\n      start: yearsStart,\n      end: yearsEnd\n    }\n  }\n\n  /**\n   * 获取日期所属的整个星期的日期区间信息\n   * ========================================================================\n   * @param {String} time - 表示日期的字符串\n   * @returns {Array}\n   */\n  static getWeekRanges (time) {\n    const DATES = Calendar.defaults.DATES\n    const isLeapYear = Calendar.isLeapYear\n    let day = Calendar.getDay(time).value\n    let begins = time.split('-')\n    let year = parseInt(begins[0], 10)\n    let month = parseInt(begins[1], 10)\n    let date = parseInt(begins[2], 10)\n    let days = DATES[month - 1]\n    let startYear = year\n    let startMonth = month\n    let startDate = date - day\n    let endYear = year\n    let endMonth = month\n    let endDate = date + (6 - day)\n    let prevMonth = 0\n\n    // 闰年2月为29天，默认值为28天，所以需要+1天\n    if (isLeapYear(year) && month === 2) {\n      days += 1\n    }\n\n    if (startDate < 1) {\n      // 上一个月\n      prevMonth = month - 2\n      startMonth -= 1\n\n      if (prevMonth < 0) {\n        startYear -= 1\n        startMonth = 12\n        startDate = DATES[11] + startDate\n      } else {\n        // 开始日期\n        startDate = DATES[prevMonth] + startDate\n      }\n    }\n\n    if (endDate > days) {\n      endMonth += 1\n\n      // 结束日期\n      endDate = endDate - days\n\n      if (prevMonth > 11) {\n        endYear += 1\n        endMonth = 1\n      }\n    }\n\n    return Calendar.getRanges((startYear + '-' + startMonth + '-' + startDate), (endYear + '-' + endMonth + '-' + endDate))\n  }\n\n  /**\n   * 获取两个日期之间的所有日期信息\n   * ========================================================================\n   * @param {String} begin - 表示日期的字符串\n   * @param {String} end - 表示日期的字符串\n   * @returns {Array}\n   */\n  static getRanges (begin, end) {\n    const ONE_DAY_TO_SECONDS = 24 * 60 * 60 * 1000\n    let ranges = []\n    let begins = begin.split('-')\n    let ends = end.split('-')\n    let beginTime = new Date()\n    let endTime = new Date()\n    let beginNumber\n    let endNumber\n    let timeNumber\n\n    beginTime.setUTCFullYear(parseInt(begins[0], 10), parseInt(begins[1], 10) - 1, parseInt(begins[2], 10))\n    endTime.setUTCFullYear(parseInt(ends[0], 10), parseInt(ends[1], 10) - 1, parseInt(ends[2], 10))\n\n    beginNumber = beginTime.getTime()\n    endNumber = endTime.getTime()\n    timeNumber = beginNumber\n\n    for (; timeNumber <= endNumber; timeNumber += ONE_DAY_TO_SECONDS) {\n      ranges.push(Calendar.getDate(timeNumber).text)\n    }\n\n    return ranges\n  }\n\n  /**\n   * 判断是否为闰年\n   * ========================================================================\n   * @param {Number} year - 年份数值\n   * @returns {boolean}\n   */\n  static isLeapYear (year) {\n    return ((year % 4 === 0) || (year % 400 === 0)) && (year % 100 !== 0)\n  }\n\n  /**\n   * 判断是否为今天\n   * ========================================================================\n   * @param {String|Number} time - 表示日期的字符串或者数字\n   * @returns {*}\n   */\n  static isToday (time) {\n    return Calendar.isDatesEqual(time)\n  }\n\n  /**\n   * 判断两个日期是否相等\n   * ========================================================================\n   * @param {String|Number} dateOne - 表示日期的字符串或者数字\n   * @param {String|Number} [dateTwo] - 表示日期的字符串或者数字（默认值：今天）\n   * @returns {boolean}\n   */\n  static isDatesEqual (dateOne, dateTwo) {\n    const getDate = Calendar.getDate\n\n    return Calendar.isEqual(getDate(dateOne).text, getDate(dateTwo).text)\n  }\n\n  /**\n   * 判断两个时间是否相等\n   * ========================================================================\n   * @param {String|Number} timeOne - 表示日期的字符串或者数字\n   * @param {String|Number} timeTwo - 表示日期的字符串或者数字\n   * @returns {boolean}\n   */\n  static isEqual (timeOne, timeTwo) {\n    const toAllSupported = Calendar.toAllSupported\n    return new Date(toAllSupported(timeOne)).getTime() === new Date(toAllSupported(timeTwo)).getTime()\n  }\n\n  static toAllSupported(time) {\n    const Utils = Calendar.Utils\n    let date = []\n\n    if(Utils.isNumber(time)){\n      return time\n    } else {\n      if(Utils.isString(time)) {\n        if (time.indexOf('-')) {\n          date = time.split('-')\n        } else {\n          if (time.indexOf('/')) {\n            date = time.split('/')\n          }\n        }\n\n        if (date.length === 1) {\n          date.push('1')\n          date.push('1')\n        } else{\n          if (date.length === 2) {\n            // 例如：'2019-1'\n            if (date[0].length === 4) {\n              date.push('1')\n            } else {\n              // 例如：'1-2019'\n              if (data[1].length === 4) {\n                date.unshift('1')\n              }\n            }\n          }\n        }\n\n        return date.join('/')\n      }\n    }\n  }\n}\n\n/**\n * 日历控件默认的配置信息\n * ========================================================================\n */\nCalendar.defaults = {\n  parent: 'calendar',\n  time: '',\n  // 0 - 日期显示模式（默认值）\n  // 1 - 月份显示模式\n  // 2 - 年代显示模式\n  viewMode: 0,\n  // single - 单选（默认值）\n  // multiple - 多选\n  // range - 范围多选\n  // week - 整个星期选择\n  pickMode: 'single',\n  hasSwitcher: true,\n  hasFooter: true,\n  hasClock: true,\n  onDatePick: null,\n  onMonthPick: null,\n  onYearPick: null,\n  onTodayPick: null,\n  MONTHS: [\n    11,\n    12,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    1,\n    2\n  ],\n  DAYS: [\n    '日',\n    '一',\n    '二',\n    '三',\n    '四',\n    '五',\n    '六'\n  ],\n  DATES: [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n  ],\n  STYLES: {\n    WRAP: 'cal-md',\n    WRAP_WITHOUT_FOOTER: 'cal-md-without-footer',\n    HEADER: 'cal-hd',\n    TITLE: 'cal-title',\n    SWITCHER: 'cal-switcher',\n    PREV: 'cal-prev',\n    ICON_PREV: 'icon-angle-up',\n    NEXT: 'cal-next',\n    ICON_NEXT: 'icon-angle-down',\n    BODY: 'cal-bd',\n    WEEK: 'cal-week',\n    WEEKEND: 'cal-weekend',\n    DAY: 'cal-day',\n    DATES: 'cal-dates',\n    DATE: 'cal-date',\n    DATE_PREV: 'cal-date-prev',\n    DATE_NEXT: 'cal-date-next',\n    MONTHS: 'cal-months',\n    MONTH: 'cal-month',\n    MONTH_PREV: 'cal-month-prev',\n    MONTH_NEXT: 'cal-month-next',\n    YEARS: 'cal-years',\n    YEAR: 'cal-year',\n    YEAR_PREV: 'cal-year-prev',\n    YEAR_NEXT: 'cal-year-next',\n    FOOTER: 'cal-ft',\n    FOOTER_DATE: 'cal-ft-date',\n    TODAY: 'cal-today',\n    FOOTER_TIME: 'cal-ft-time',\n    TIME: 'cal-time',\n    TEXT: 'cal-text',\n    CURRENT: 'cal-current',\n    PICKED: 'cal-picked',\n    PICKED_RANGE: 'cal-picked-range',\n    PICKED_POINT: 'cal-picked-point',\n    DISABLED: 'cal-disabled',\n    HIDDEN: 'cal-hidden'\n  }\n}\n\n/**\n * 常用的工具方法\n * ========================================================================\n */\nCalendar.Utils = {\n  uuid: 0,\n  isString: (o) => {\n    return typeof o === 'string'\n  },\n  isNumber: (o) => {\n    return typeof o === 'number'\n  },\n  isArray: (o) => {\n    if (Array.isArray) {\n      return Array.isArray(o)\n    } else {\n      return Object.prototype.toString.apply(o) === '[object Array]'\n    }\n  },\n  isFunction: (o) => {\n    return (typeof o === 'function') || Object.prototype.toString.apply(o) === '[object Function]'\n  },\n  isElement: (o) => {\n    return o && o.nodeName && o.tagName && o.nodeType === 1\n  },\n  guid: (prefix) => {\n    let Utils = Calendar.Utils\n\n    Utils.uuid += 1\n\n    return prefix ? prefix + '-' + Utils.uuid : 'guid-' + Utils.uuid\n  },\n  trim: (str) => {\n    return str.replace(/^\\s+/g, '').replace(/\\s+$/g, '')\n  },\n  stripTags: (str) => {\n    return str.replace(/<\\/?[^>]+(>|$)/g, '')\n  }\n}\n\n/**\n * DOM 操作相关的工具方法\n * ========================================================================\n */\nCalendar.DOM = {\n  /**\n   * 创建 DOM 节点，并添加属性和子节点\n   * ========================================================================\n   * @param {String} tagName - 标签名称\n   * @param {Object} attributes - 属性对象\n   * @param {Array} [children] - 子节点数组\n   * @returns {HTMLElement}\n   */\n  createElement: (tagName, attributes, children) => {\n    const Utils = Calendar.Utils\n    let element = document.createElement(tagName)\n\n    for (let attr in attributes) {\n      if (attributes.hasOwnProperty(attr)) {\n        Calendar.DOM.setAttribute(element, attr, attributes[attr])\n      }\n    }\n\n    if (Utils.isArray(children)) {\n      children.forEach((child) => {\n        let childNode\n\n        if (Utils.isElement(child)) {\n          childNode = child\n        } else {\n          if (Utils.isString(child) || Utils.isNumber(child)) {\n            let text = Utils.isString(child) ? Utils.trim(Utils.stripTags(child)) : child.toString()\n\n            childNode = document.createTextNode(text)\n          }\n        }\n\n        element.appendChild(childNode)\n      })\n    }\n\n    return element\n  },\n  /**\n   * 给 DOM 节点设置属性/值\n   * ========================================================================\n   * @param {HTMLElement} el - DOM 节点\n   * @param {String} attr - 属性名称\n   * @param {String|Number|Boolean} value - 属性值\n   */\n  setAttribute: (el, attr, value) => {\n    let tagName = el.tagName.toLowerCase()\n\n    switch (attr) {\n      case 'style':\n        el.style.cssText = value\n        break\n      case 'value':\n        if (tagName === 'input' || tagName === 'textarea') {\n          el.value = value\n        } else {\n          el.setAttribute(attr, value)\n        }\n        break\n      case 'className':\n        el.className = value\n        break\n      default:\n        el.setAttribute(attr, value)\n        break\n    }\n  },\n  /**\n   * 检测 DOM 节点是否包含名为 className 的样式\n   * ========================================================================\n   * @param {HTMLElement} el - DOM 节点\n   * @param {String} className - 样式名称\n   * @returns {*}\n   */\n  hasClass (el, className) {\n    let allClass = el.className\n\n    if (!allClass) {\n      return false\n    }\n\n    return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\n  },\n  /**\n   * 给 DOM 节点添加名为 className 的样式\n   * ========================================================================\n   * @param {HTMLElement} el - DOM 节点\n   * @param {String} className - 样式名称\n   * @returns {Boolean}\n   */\n  addClass (el, className) {\n    let allClass = el.className\n\n    if (Calendar.DOM.hasClass(el, className)) {\n      return false\n    }\n\n    allClass += allClass.length > 0 ? ' ' + className : className\n\n    el.className = allClass\n  },\n  /**\n   * 移除 DOM 节点的 className 样式\n   * ========================================================================\n   * @param {HTMLElement} el - DOM 节点\n   * @param {String} className - 样式名称\n   * @returns {Boolean}\n   */\n  removeClass (el, className) {\n    let allClass = el.className\n\n    if (!allClass || !Calendar.DOM.hasClass(el, className)) {\n      return false\n    }\n\n    allClass = Calendar.Utils.trim(allClass.replace(className, ''))\n\n    el.className = allClass\n  }\n}\n\n/**\n * 代理事件\n * ========================================================\n * 说明：代码修改至 Nicolas Gallagher 的 delegate.js\n * 项目 GitHub 地址：https://github.com/necolas/delegate.js\n * ========================================================\n */\nCalendar.Delegate = {\n  /**\n   * 绑定代理事件\n   * ========================================================================\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\n   * @param {String} type - 事件类型\n   * @param {Function} callback - 绑定事件的回调函数\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\n   * @param {Boolean} [once] - 是否只触发一次（默认值：false - 事件冒泡）\n   */\n  on (el, selector, type, callback, context, capture, /* private */ once) {\n    const Delegate = Calendar.Delegate\n    const wrapper = function (e) {\n      let delegateTarget = Delegate.getDelegateTarget(el, e.target, selector)\n\n      e.delegateTarget = delegateTarget\n\n      if (delegateTarget) {\n        if (once === true) {\n          Delegate.off(el, type, wrapper)\n        }\n        callback.call(context || el, e)\n      }\n    }\n\n    if (type === 'mouseenter' || type === 'mouseleave') {\n      capture = true\n    }\n\n    callback._delegateWrapper = callback\n    el.addEventListener(type, wrapper, capture || false)\n\n    return callback\n  },\n  /**\n   * 绑定只触发一次的事件\n   * ========================================================================\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\n   * @param {String} type - 事件类型\n   * @param {Function} callback - 绑定事件的回调函数\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\n   */\n  once (el, type, selector, callback, context, capture) {\n    Calendar.Delegate.on(el, type, selector, callback, context, capture, true)\n  },\n  /**\n   * 取消事件绑定\n   * ========================================================================\n   * @param {HTMLElement} el - 取消绑定（代理）事件的 DOM 节点\n   * @param {String} type - 事件类型\n   * @param {Function} callback - 绑定事件的回调函数\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\n   */\n  off (el, type, callback, capture) {\n    if (callback._delegateWrapper) {\n      callback = callback._delegateWrapper\n      delete callback._delegateWrapper\n    }\n\n    if (type === 'mouseenter' || type === 'mouseleave') {\n      capture = true\n    }\n\n    el.removeEventListener(type, callback, capture || false)\n  },\n  /**\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\n   * ========================================================================\n   * @param {Event} evt - 事件对象\n   */\n  stop (evt) {\n    const Delegate = Calendar.Delegate\n\n    Delegate.stopPropagation(evt)\n    Delegate.preventDefault(evt)\n  },\n  /**\n   * 终止事件在传播过程的捕获或冒泡\n   * ========================================================================\n   * @param {Event} evt - 事件对象\n   */\n  stopPropagation (evt) {\n    let event = window.event\n\n    if (evt.stopPropagation) {\n      evt.stopPropagation()\n    } else {\n      event.cancelBubble = true\n    }\n  },\n  /**\n   * 阻止事件的默认行为\n   * ========================================================================\n   * @param {Event} evt - 事件对象\n   */\n  preventDefault (evt) {\n    let event = window.event\n\n    if (evt.preventDefault) {\n      evt.preventDefault()\n    } else {\n      event.returnValue = false\n    }\n  },\n  /**\n   * 通过 className 获得事件代理节点的事件代理目标节点\n   * ========================================================================\n   * @param {HTMLElement} el - 绑定事件代理的节点\n   * @param target - （触发事件后）事件的目标对象\n   * @param selector - 目标节点的类选择器\n   * @returns {HTMLElement|Null}\n   */\n  getDelegateTarget (el, target, selector) {\n    while (target && target !== el) {\n      if (Calendar.DOM.hasClass(target, selector.replace('.', ''))) {\n        return target\n      }\n\n      target = target.parentElement\n    }\n\n    return null\n  }\n}\n\n// 为了处理不兼容 Object.assign\nif (!Calendar.Utils.isFunction(Object.assign)) {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) { // .length of function is 2\n      'use strict';\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      let to = Object(target);\n\n      for (let index = 1; index < arguments.length; index++) {\n        let nextSource = arguments[index];\n\n        if (nextSource != null) { // Skip over if undefined or null\n          for (let nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n"]}